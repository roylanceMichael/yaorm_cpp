// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yaorm_models.proto

#ifndef PROTOBUF_yaorm_5fmodels_2eproto__INCLUDED
#define PROTOBUF_yaorm_5fmodels_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace yaorm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_yaorm_5fmodels_2eproto();
void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

class Definition;
class Definitions;
class Difference;
class DifferenceReport;
class Index;
class PropertyDefinition;
class PropertyHolder;
class Record;
class Records;
class WhereClauseItem;

enum WhereClauseItem_OperatorType {
  WhereClauseItem_OperatorType_EQUALS = 0,
  WhereClauseItem_OperatorType_GREATER_THAN = 1,
  WhereClauseItem_OperatorType_LESS_THAN = 2,
  WhereClauseItem_OperatorType_NOT_EQUALS = 3,
  WhereClauseItem_OperatorType_WhereClauseItem_OperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WhereClauseItem_OperatorType_WhereClauseItem_OperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WhereClauseItem_OperatorType_IsValid(int value);
const WhereClauseItem_OperatorType WhereClauseItem_OperatorType_OperatorType_MIN = WhereClauseItem_OperatorType_EQUALS;
const WhereClauseItem_OperatorType WhereClauseItem_OperatorType_OperatorType_MAX = WhereClauseItem_OperatorType_NOT_EQUALS;
const int WhereClauseItem_OperatorType_OperatorType_ARRAYSIZE = WhereClauseItem_OperatorType_OperatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhereClauseItem_OperatorType_descriptor();
inline const ::std::string& WhereClauseItem_OperatorType_Name(WhereClauseItem_OperatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhereClauseItem_OperatorType_descriptor(), value);
}
inline bool WhereClauseItem_OperatorType_Parse(
    const ::std::string& name, WhereClauseItem_OperatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhereClauseItem_OperatorType>(
    WhereClauseItem_OperatorType_descriptor(), name, value);
}
enum WhereClauseItem_ConnectingAndOr {
  WhereClauseItem_ConnectingAndOr_AND = 0,
  WhereClauseItem_ConnectingAndOr_OR = 1,
  WhereClauseItem_ConnectingAndOr_NONE = 2,
  WhereClauseItem_ConnectingAndOr_WhereClauseItem_ConnectingAndOr_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WhereClauseItem_ConnectingAndOr_WhereClauseItem_ConnectingAndOr_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WhereClauseItem_ConnectingAndOr_IsValid(int value);
const WhereClauseItem_ConnectingAndOr WhereClauseItem_ConnectingAndOr_ConnectingAndOr_MIN = WhereClauseItem_ConnectingAndOr_AND;
const WhereClauseItem_ConnectingAndOr WhereClauseItem_ConnectingAndOr_ConnectingAndOr_MAX = WhereClauseItem_ConnectingAndOr_NONE;
const int WhereClauseItem_ConnectingAndOr_ConnectingAndOr_ARRAYSIZE = WhereClauseItem_ConnectingAndOr_ConnectingAndOr_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhereClauseItem_ConnectingAndOr_descriptor();
inline const ::std::string& WhereClauseItem_ConnectingAndOr_Name(WhereClauseItem_ConnectingAndOr value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhereClauseItem_ConnectingAndOr_descriptor(), value);
}
inline bool WhereClauseItem_ConnectingAndOr_Parse(
    const ::std::string& name, WhereClauseItem_ConnectingAndOr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhereClauseItem_ConnectingAndOr>(
    WhereClauseItem_ConnectingAndOr_descriptor(), name, value);
}
enum Difference_EntityType {
  Difference_EntityType_INDEX = 0,
  Difference_EntityType_COLUMN = 1,
  Difference_EntityType_TABLE = 2,
  Difference_EntityType_Difference_EntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Difference_EntityType_Difference_EntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Difference_EntityType_IsValid(int value);
const Difference_EntityType Difference_EntityType_EntityType_MIN = Difference_EntityType_INDEX;
const Difference_EntityType Difference_EntityType_EntityType_MAX = Difference_EntityType_TABLE;
const int Difference_EntityType_EntityType_ARRAYSIZE = Difference_EntityType_EntityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Difference_EntityType_descriptor();
inline const ::std::string& Difference_EntityType_Name(Difference_EntityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Difference_EntityType_descriptor(), value);
}
inline bool Difference_EntityType_Parse(
    const ::std::string& name, Difference_EntityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Difference_EntityType>(
    Difference_EntityType_descriptor(), name, value);
}
enum Difference_Operation {
  Difference_Operation_CREATE = 0,
  Difference_Operation_DROP = 1,
  Difference_Operation_Difference_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Difference_Operation_Difference_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Difference_Operation_IsValid(int value);
const Difference_Operation Difference_Operation_Operation_MIN = Difference_Operation_CREATE;
const Difference_Operation Difference_Operation_Operation_MAX = Difference_Operation_DROP;
const int Difference_Operation_Operation_ARRAYSIZE = Difference_Operation_Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Difference_Operation_descriptor();
inline const ::std::string& Difference_Operation_Name(Difference_Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Difference_Operation_descriptor(), value);
}
inline bool Difference_Operation_Parse(
    const ::std::string& name, Difference_Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Difference_Operation>(
    Difference_Operation_descriptor(), name, value);
}
enum ProtobufType {
  NONE = 0,
  DOUBLE = 1,
  FLOAT = 2,
  INT32 = 3,
  INT64 = 4,
  UINT32 = 5,
  UINT64 = 6,
  SINT32 = 7,
  SINT64 = 8,
  FIXED32 = 9,
  FIXED64 = 10,
  SFIXED32 = 11,
  SFIXED64 = 12,
  BOOL = 13,
  STRING = 14,
  BYTES = 15,
  PROTO = 16,
  ProtobufType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtobufType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtobufType_IsValid(int value);
const ProtobufType ProtobufType_MIN = NONE;
const ProtobufType ProtobufType_MAX = PROTO;
const int ProtobufType_ARRAYSIZE = ProtobufType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtobufType_descriptor();
inline const ::std::string& ProtobufType_Name(ProtobufType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtobufType_descriptor(), value);
}
inline bool ProtobufType_Parse(
    const ::std::string& name, ProtobufType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtobufType>(
    ProtobufType_descriptor(), name, value);
}
// ===================================================================

class WhereClauseItem : public ::google::protobuf::Message {
 public:
  WhereClauseItem();
  virtual ~WhereClauseItem();

  WhereClauseItem(const WhereClauseItem& from);

  inline WhereClauseItem& operator=(const WhereClauseItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhereClauseItem& default_instance();

  void Swap(WhereClauseItem* other);

  // implements Message ----------------------------------------------

  inline WhereClauseItem* New() const { return New(NULL); }

  WhereClauseItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhereClauseItem& from);
  void MergeFrom(const WhereClauseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WhereClauseItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef WhereClauseItem_OperatorType OperatorType;
  static const OperatorType EQUALS = WhereClauseItem_OperatorType_EQUALS;
  static const OperatorType GREATER_THAN = WhereClauseItem_OperatorType_GREATER_THAN;
  static const OperatorType LESS_THAN = WhereClauseItem_OperatorType_LESS_THAN;
  static const OperatorType NOT_EQUALS = WhereClauseItem_OperatorType_NOT_EQUALS;
  static inline bool OperatorType_IsValid(int value) {
    return WhereClauseItem_OperatorType_IsValid(value);
  }
  static const OperatorType OperatorType_MIN =
    WhereClauseItem_OperatorType_OperatorType_MIN;
  static const OperatorType OperatorType_MAX =
    WhereClauseItem_OperatorType_OperatorType_MAX;
  static const int OperatorType_ARRAYSIZE =
    WhereClauseItem_OperatorType_OperatorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperatorType_descriptor() {
    return WhereClauseItem_OperatorType_descriptor();
  }
  static inline const ::std::string& OperatorType_Name(OperatorType value) {
    return WhereClauseItem_OperatorType_Name(value);
  }
  static inline bool OperatorType_Parse(const ::std::string& name,
      OperatorType* value) {
    return WhereClauseItem_OperatorType_Parse(name, value);
  }

  typedef WhereClauseItem_ConnectingAndOr ConnectingAndOr;
  static const ConnectingAndOr AND = WhereClauseItem_ConnectingAndOr_AND;
  static const ConnectingAndOr OR = WhereClauseItem_ConnectingAndOr_OR;
  static const ConnectingAndOr NONE = WhereClauseItem_ConnectingAndOr_NONE;
  static inline bool ConnectingAndOr_IsValid(int value) {
    return WhereClauseItem_ConnectingAndOr_IsValid(value);
  }
  static const ConnectingAndOr ConnectingAndOr_MIN =
    WhereClauseItem_ConnectingAndOr_ConnectingAndOr_MIN;
  static const ConnectingAndOr ConnectingAndOr_MAX =
    WhereClauseItem_ConnectingAndOr_ConnectingAndOr_MAX;
  static const int ConnectingAndOr_ARRAYSIZE =
    WhereClauseItem_ConnectingAndOr_ConnectingAndOr_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectingAndOr_descriptor() {
    return WhereClauseItem_ConnectingAndOr_descriptor();
  }
  static inline const ::std::string& ConnectingAndOr_Name(ConnectingAndOr value) {
    return WhereClauseItem_ConnectingAndOr_Name(value);
  }
  static inline bool ConnectingAndOr_Parse(const ::std::string& name,
      ConnectingAndOr* value) {
    return WhereClauseItem_ConnectingAndOr_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .org.yaorm.PropertyHolder name_and_property = 1;
  bool has_name_and_property() const;
  void clear_name_and_property();
  static const int kNameAndPropertyFieldNumber = 1;
  const ::org::yaorm::PropertyHolder& name_and_property() const;
  ::org::yaorm::PropertyHolder* mutable_name_and_property();
  ::org::yaorm::PropertyHolder* release_name_and_property();
  void set_allocated_name_and_property(::org::yaorm::PropertyHolder* name_and_property);

  // optional .org.yaorm.WhereClauseItem.OperatorType operator_type = 2;
  void clear_operator_type();
  static const int kOperatorTypeFieldNumber = 2;
  ::org::yaorm::WhereClauseItem_OperatorType operator_type() const;
  void set_operator_type(::org::yaorm::WhereClauseItem_OperatorType value);

  // optional .org.yaorm.WhereClauseItem.ConnectingAndOr connecting_and_or = 3;
  void clear_connecting_and_or();
  static const int kConnectingAndOrFieldNumber = 3;
  ::org::yaorm::WhereClauseItem_ConnectingAndOr connecting_and_or() const;
  void set_connecting_and_or(::org::yaorm::WhereClauseItem_ConnectingAndOr value);

  // optional .org.yaorm.WhereClauseItem connecting_where_clause = 4;
  bool has_connecting_where_clause() const;
  void clear_connecting_where_clause();
  static const int kConnectingWhereClauseFieldNumber = 4;
  const ::org::yaorm::WhereClauseItem& connecting_where_clause() const;
  ::org::yaorm::WhereClauseItem* mutable_connecting_where_clause();
  ::org::yaorm::WhereClauseItem* release_connecting_where_clause();
  void set_allocated_connecting_where_clause(::org::yaorm::WhereClauseItem* connecting_where_clause);

  // @@protoc_insertion_point(class_scope:org.yaorm.WhereClauseItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::org::yaorm::PropertyHolder* name_and_property_;
  int operator_type_;
  int connecting_and_or_;
  ::org::yaorm::WhereClauseItem* connecting_where_clause_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static WhereClauseItem* default_instance_;
};
// -------------------------------------------------------------------

class PropertyDefinition : public ::google::protobuf::Message {
 public:
  PropertyDefinition();
  virtual ~PropertyDefinition();

  PropertyDefinition(const PropertyDefinition& from);

  inline PropertyDefinition& operator=(const PropertyDefinition& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyDefinition& default_instance();

  void Swap(PropertyDefinition* other);

  // implements Message ----------------------------------------------

  inline PropertyDefinition* New() const { return New(NULL); }

  PropertyDefinition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyDefinition& from);
  void MergeFrom(const PropertyDefinition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PropertyDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .org.yaorm.ProtobufType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::org::yaorm::ProtobufType type() const;
  void set_type(::org::yaorm::ProtobufType value);

  // optional bool foreign_collection = 3;
  void clear_foreign_collection();
  static const int kForeignCollectionFieldNumber = 3;
  bool foreign_collection() const;
  void set_foreign_collection(bool value);

  // optional bool is_key = 4;
  void clear_is_key();
  static const int kIsKeyFieldNumber = 4;
  bool is_key() const;
  void set_is_key(bool value);

  // @@protoc_insertion_point(class_scope:org.yaorm.PropertyDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  bool foreign_collection_;
  bool is_key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static PropertyDefinition* default_instance_;
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  void Swap(Index* other);

  // implements Message ----------------------------------------------

  inline Index* New() const { return New(NULL); }

  Index* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.PropertyDefinition column_names = 1;
  int column_names_size() const;
  void clear_column_names();
  static const int kColumnNamesFieldNumber = 1;
  const ::org::yaorm::PropertyDefinition& column_names(int index) const;
  ::org::yaorm::PropertyDefinition* mutable_column_names(int index);
  ::org::yaorm::PropertyDefinition* add_column_names();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
      mutable_column_names();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
      column_names() const;

  // repeated .org.yaorm.PropertyDefinition include_names = 2;
  int include_names_size() const;
  void clear_include_names();
  static const int kIncludeNamesFieldNumber = 2;
  const ::org::yaorm::PropertyDefinition& include_names(int index) const;
  ::org::yaorm::PropertyDefinition* mutable_include_names(int index);
  ::org::yaorm::PropertyDefinition* add_include_names();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
      mutable_include_names();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
      include_names() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.Index)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition > column_names_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition > include_names_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static Index* default_instance_;
};
// -------------------------------------------------------------------

class Difference : public ::google::protobuf::Message {
 public:
  Difference();
  virtual ~Difference();

  Difference(const Difference& from);

  inline Difference& operator=(const Difference& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Difference& default_instance();

  void Swap(Difference* other);

  // implements Message ----------------------------------------------

  inline Difference* New() const { return New(NULL); }

  Difference* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Difference& from);
  void MergeFrom(const Difference& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Difference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Difference_EntityType EntityType;
  static const EntityType INDEX = Difference_EntityType_INDEX;
  static const EntityType COLUMN = Difference_EntityType_COLUMN;
  static const EntityType TABLE = Difference_EntityType_TABLE;
  static inline bool EntityType_IsValid(int value) {
    return Difference_EntityType_IsValid(value);
  }
  static const EntityType EntityType_MIN =
    Difference_EntityType_EntityType_MIN;
  static const EntityType EntityType_MAX =
    Difference_EntityType_EntityType_MAX;
  static const int EntityType_ARRAYSIZE =
    Difference_EntityType_EntityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EntityType_descriptor() {
    return Difference_EntityType_descriptor();
  }
  static inline const ::std::string& EntityType_Name(EntityType value) {
    return Difference_EntityType_Name(value);
  }
  static inline bool EntityType_Parse(const ::std::string& name,
      EntityType* value) {
    return Difference_EntityType_Parse(name, value);
  }

  typedef Difference_Operation Operation;
  static const Operation CREATE = Difference_Operation_CREATE;
  static const Operation DROP = Difference_Operation_DROP;
  static inline bool Operation_IsValid(int value) {
    return Difference_Operation_IsValid(value);
  }
  static const Operation Operation_MIN =
    Difference_Operation_Operation_MIN;
  static const Operation Operation_MAX =
    Difference_Operation_Operation_MAX;
  static const int Operation_ARRAYSIZE =
    Difference_Operation_Operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operation_descriptor() {
    return Difference_Operation_descriptor();
  }
  static inline const ::std::string& Operation_Name(Operation value) {
    return Difference_Operation_Name(value);
  }
  static inline bool Operation_Parse(const ::std::string& name,
      Operation* value) {
    return Difference_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .org.yaorm.Difference.EntityType entity_type = 1;
  void clear_entity_type();
  static const int kEntityTypeFieldNumber = 1;
  ::org::yaorm::Difference_EntityType entity_type() const;
  void set_entity_type(::org::yaorm::Difference_EntityType value);

  // optional .org.yaorm.Difference.Operation operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  ::org::yaorm::Difference_Operation operation() const;
  void set_operation(::org::yaorm::Difference_Operation value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .org.yaorm.Index index = 4;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  const ::org::yaorm::Index& index() const;
  ::org::yaorm::Index* mutable_index();
  ::org::yaorm::Index* release_index();
  void set_allocated_index(::org::yaorm::Index* index);

  // optional .org.yaorm.PropertyDefinition property_definition = 5;
  bool has_property_definition() const;
  void clear_property_definition();
  static const int kPropertyDefinitionFieldNumber = 5;
  const ::org::yaorm::PropertyDefinition& property_definition() const;
  ::org::yaorm::PropertyDefinition* mutable_property_definition();
  ::org::yaorm::PropertyDefinition* release_property_definition();
  void set_allocated_property_definition(::org::yaorm::PropertyDefinition* property_definition);

  // optional .org.yaorm.Definition definition = 6;
  bool has_definition() const;
  void clear_definition();
  static const int kDefinitionFieldNumber = 6;
  const ::org::yaorm::Definition& definition() const;
  ::org::yaorm::Definition* mutable_definition();
  ::org::yaorm::Definition* release_definition();
  void set_allocated_definition(::org::yaorm::Definition* definition);

  // @@protoc_insertion_point(class_scope:org.yaorm.Difference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int entity_type_;
  int operation_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::org::yaorm::Index* index_;
  ::org::yaorm::PropertyDefinition* property_definition_;
  ::org::yaorm::Definition* definition_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static Difference* default_instance_;
};
// -------------------------------------------------------------------

class Definition : public ::google::protobuf::Message {
 public:
  Definition();
  virtual ~Definition();

  Definition(const Definition& from);

  inline Definition& operator=(const Definition& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Definition& default_instance();

  void Swap(Definition* other);

  // implements Message ----------------------------------------------

  inline Definition* New() const { return New(NULL); }

  Definition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Definition& from);
  void MergeFrom(const Definition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Definition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .org.yaorm.PropertyDefinition property_definitions = 2;
  int property_definitions_size() const;
  void clear_property_definitions();
  static const int kPropertyDefinitionsFieldNumber = 2;
  const ::org::yaorm::PropertyDefinition& property_definitions(int index) const;
  ::org::yaorm::PropertyDefinition* mutable_property_definitions(int index);
  ::org::yaorm::PropertyDefinition* add_property_definitions();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
      mutable_property_definitions();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
      property_definitions() const;

  // optional .org.yaorm.Index index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  const ::org::yaorm::Index& index() const;
  ::org::yaorm::Index* mutable_index();
  ::org::yaorm::Index* release_index();
  void set_allocated_index(::org::yaorm::Index* index);

  // @@protoc_insertion_point(class_scope:org.yaorm.Definition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition > property_definitions_;
  ::org::yaorm::Index* index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static Definition* default_instance_;
};
// -------------------------------------------------------------------

class Definitions : public ::google::protobuf::Message {
 public:
  Definitions();
  virtual ~Definitions();

  Definitions(const Definitions& from);

  inline Definitions& operator=(const Definitions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Definitions& default_instance();

  void Swap(Definitions* other);

  // implements Message ----------------------------------------------

  inline Definitions* New() const { return New(NULL); }

  Definitions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Definitions& from);
  void MergeFrom(const Definitions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Definitions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.Definition definitions = 3;
  int definitions_size() const;
  void clear_definitions();
  static const int kDefinitionsFieldNumber = 3;
  const ::org::yaorm::Definition& definitions(int index) const;
  ::org::yaorm::Definition* mutable_definitions(int index);
  ::org::yaorm::Definition* add_definitions();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Definition >*
      mutable_definitions();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Definition >&
      definitions() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.Definitions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Definition > definitions_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static Definitions* default_instance_;
};
// -------------------------------------------------------------------

class DifferenceReport : public ::google::protobuf::Message {
 public:
  DifferenceReport();
  virtual ~DifferenceReport();

  DifferenceReport(const DifferenceReport& from);

  inline DifferenceReport& operator=(const DifferenceReport& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DifferenceReport& default_instance();

  void Swap(DifferenceReport* other);

  // implements Message ----------------------------------------------

  inline DifferenceReport* New() const { return New(NULL); }

  DifferenceReport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DifferenceReport& from);
  void MergeFrom(const DifferenceReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DifferenceReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool migration_exists = 1;
  void clear_migration_exists();
  static const int kMigrationExistsFieldNumber = 1;
  bool migration_exists() const;
  void set_migration_exists(bool value);

  // repeated .org.yaorm.Difference differences = 2;
  int differences_size() const;
  void clear_differences();
  static const int kDifferencesFieldNumber = 2;
  const ::org::yaorm::Difference& differences(int index) const;
  ::org::yaorm::Difference* mutable_differences(int index);
  ::org::yaorm::Difference* add_differences();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >*
      mutable_differences();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >&
      differences() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.DifferenceReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference > differences_;
  bool migration_exists_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static DifferenceReport* default_instance_;
};
// -------------------------------------------------------------------

class PropertyHolder : public ::google::protobuf::Message {
 public:
  PropertyHolder();
  virtual ~PropertyHolder();

  PropertyHolder(const PropertyHolder& from);

  inline PropertyHolder& operator=(const PropertyHolder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyHolder& default_instance();

  void Swap(PropertyHolder* other);

  // implements Message ----------------------------------------------

  inline PropertyHolder* New() const { return New(NULL); }

  PropertyHolder* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyHolder& from);
  void MergeFrom(const PropertyHolder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PropertyHolder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .org.yaorm.PropertyDefinition property_definition = 1;
  bool has_property_definition() const;
  void clear_property_definition();
  static const int kPropertyDefinitionFieldNumber = 1;
  const ::org::yaorm::PropertyDefinition& property_definition() const;
  ::org::yaorm::PropertyDefinition* mutable_property_definition();
  ::org::yaorm::PropertyDefinition* release_property_definition();
  void set_allocated_property_definition(::org::yaorm::PropertyDefinition* property_definition);

  // optional double double_holder = 2;
  void clear_double_holder();
  static const int kDoubleHolderFieldNumber = 2;
  double double_holder() const;
  void set_double_holder(double value);

  // optional float float_holder = 3;
  void clear_float_holder();
  static const int kFloatHolderFieldNumber = 3;
  float float_holder() const;
  void set_float_holder(float value);

  // optional int32 int32_holder = 4;
  void clear_int32_holder();
  static const int kInt32HolderFieldNumber = 4;
  ::google::protobuf::int32 int32_holder() const;
  void set_int32_holder(::google::protobuf::int32 value);

  // optional int64 int64_holder = 5;
  void clear_int64_holder();
  static const int kInt64HolderFieldNumber = 5;
  ::google::protobuf::int64 int64_holder() const;
  void set_int64_holder(::google::protobuf::int64 value);

  // optional uint32 uint32_holder = 6;
  void clear_uint32_holder();
  static const int kUint32HolderFieldNumber = 6;
  ::google::protobuf::uint32 uint32_holder() const;
  void set_uint32_holder(::google::protobuf::uint32 value);

  // optional uint64 uint64_holder = 7;
  void clear_uint64_holder();
  static const int kUint64HolderFieldNumber = 7;
  ::google::protobuf::uint64 uint64_holder() const;
  void set_uint64_holder(::google::protobuf::uint64 value);

  // optional sint32 sint32_holder = 8;
  void clear_sint32_holder();
  static const int kSint32HolderFieldNumber = 8;
  ::google::protobuf::int32 sint32_holder() const;
  void set_sint32_holder(::google::protobuf::int32 value);

  // optional sint64 sint64_holder = 9;
  void clear_sint64_holder();
  static const int kSint64HolderFieldNumber = 9;
  ::google::protobuf::int64 sint64_holder() const;
  void set_sint64_holder(::google::protobuf::int64 value);

  // optional fixed32 fixed32_holder = 10;
  void clear_fixed32_holder();
  static const int kFixed32HolderFieldNumber = 10;
  ::google::protobuf::uint32 fixed32_holder() const;
  void set_fixed32_holder(::google::protobuf::uint32 value);

  // optional fixed64 fixed64_holder = 11;
  void clear_fixed64_holder();
  static const int kFixed64HolderFieldNumber = 11;
  ::google::protobuf::uint64 fixed64_holder() const;
  void set_fixed64_holder(::google::protobuf::uint64 value);

  // optional sfixed32 sfixed32_holder = 12;
  void clear_sfixed32_holder();
  static const int kSfixed32HolderFieldNumber = 12;
  ::google::protobuf::int32 sfixed32_holder() const;
  void set_sfixed32_holder(::google::protobuf::int32 value);

  // optional sfixed64 sfixed64_holder = 13;
  void clear_sfixed64_holder();
  static const int kSfixed64HolderFieldNumber = 13;
  ::google::protobuf::int64 sfixed64_holder() const;
  void set_sfixed64_holder(::google::protobuf::int64 value);

  // optional bool bool_holder = 14;
  void clear_bool_holder();
  static const int kBoolHolderFieldNumber = 14;
  bool bool_holder() const;
  void set_bool_holder(bool value);

  // optional string string_holder = 15;
  void clear_string_holder();
  static const int kStringHolderFieldNumber = 15;
  const ::std::string& string_holder() const;
  void set_string_holder(const ::std::string& value);
  void set_string_holder(const char* value);
  void set_string_holder(const char* value, size_t size);
  ::std::string* mutable_string_holder();
  ::std::string* release_string_holder();
  void set_allocated_string_holder(::std::string* string_holder);

  // optional bytes bytes_holder = 16;
  void clear_bytes_holder();
  static const int kBytesHolderFieldNumber = 16;
  const ::std::string& bytes_holder() const;
  void set_bytes_holder(const ::std::string& value);
  void set_bytes_holder(const char* value);
  void set_bytes_holder(const void* value, size_t size);
  ::std::string* mutable_bytes_holder();
  ::std::string* release_bytes_holder();
  void set_allocated_bytes_holder(::std::string* bytes_holder);

  // @@protoc_insertion_point(class_scope:org.yaorm.PropertyHolder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::org::yaorm::PropertyDefinition* property_definition_;
  double double_holder_;
  float float_holder_;
  ::google::protobuf::int32 int32_holder_;
  ::google::protobuf::int64 int64_holder_;
  ::google::protobuf::uint64 uint64_holder_;
  ::google::protobuf::uint32 uint32_holder_;
  ::google::protobuf::int32 sint32_holder_;
  ::google::protobuf::int64 sint64_holder_;
  ::google::protobuf::uint64 fixed64_holder_;
  ::google::protobuf::uint32 fixed32_holder_;
  ::google::protobuf::int32 sfixed32_holder_;
  ::google::protobuf::int64 sfixed64_holder_;
  ::google::protobuf::internal::ArenaStringPtr string_holder_;
  ::google::protobuf::internal::ArenaStringPtr bytes_holder_;
  bool bool_holder_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static PropertyHolder* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  inline Record* New() const { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.PropertyHolder columns = 1;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 1;
  const ::org::yaorm::PropertyHolder& columns(int index) const;
  ::org::yaorm::PropertyHolder* mutable_columns(int index);
  ::org::yaorm::PropertyHolder* add_columns();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyHolder >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyHolder >&
      columns() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.Record)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyHolder > columns_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class Records : public ::google::protobuf::Message {
 public:
  Records();
  virtual ~Records();

  Records(const Records& from);

  inline Records& operator=(const Records& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Records& default_instance();

  void Swap(Records* other);

  // implements Message ----------------------------------------------

  inline Records* New() const { return New(NULL); }

  Records* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Records& from);
  void MergeFrom(const Records& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Records* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.Record records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::org::yaorm::Record& records(int index) const;
  ::org::yaorm::Record* mutable_records(int index);
  ::org::yaorm::Record* add_records();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >&
      records() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.Records)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record > records_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_AssignDesc_yaorm_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_yaorm_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static Records* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WhereClauseItem

// optional .org.yaorm.PropertyHolder name_and_property = 1;
inline bool WhereClauseItem::has_name_and_property() const {
  return !_is_default_instance_ && name_and_property_ != NULL;
}
inline void WhereClauseItem::clear_name_and_property() {
  if (GetArenaNoVirtual() == NULL && name_and_property_ != NULL) delete name_and_property_;
  name_and_property_ = NULL;
}
inline const ::org::yaorm::PropertyHolder& WhereClauseItem::name_and_property() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClauseItem.name_and_property)
  return name_and_property_ != NULL ? *name_and_property_ : *default_instance_->name_and_property_;
}
inline ::org::yaorm::PropertyHolder* WhereClauseItem::mutable_name_and_property() {
  
  if (name_and_property_ == NULL) {
    name_and_property_ = new ::org::yaorm::PropertyHolder;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.WhereClauseItem.name_and_property)
  return name_and_property_;
}
inline ::org::yaorm::PropertyHolder* WhereClauseItem::release_name_and_property() {
  
  ::org::yaorm::PropertyHolder* temp = name_and_property_;
  name_and_property_ = NULL;
  return temp;
}
inline void WhereClauseItem::set_allocated_name_and_property(::org::yaorm::PropertyHolder* name_and_property) {
  delete name_and_property_;
  name_and_property_ = name_and_property;
  if (name_and_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.WhereClauseItem.name_and_property)
}

// optional .org.yaorm.WhereClauseItem.OperatorType operator_type = 2;
inline void WhereClauseItem::clear_operator_type() {
  operator_type_ = 0;
}
inline ::org::yaorm::WhereClauseItem_OperatorType WhereClauseItem::operator_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClauseItem.operator_type)
  return static_cast< ::org::yaorm::WhereClauseItem_OperatorType >(operator_type_);
}
inline void WhereClauseItem::set_operator_type(::org::yaorm::WhereClauseItem_OperatorType value) {
  
  operator_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.WhereClauseItem.operator_type)
}

// optional .org.yaorm.WhereClauseItem.ConnectingAndOr connecting_and_or = 3;
inline void WhereClauseItem::clear_connecting_and_or() {
  connecting_and_or_ = 0;
}
inline ::org::yaorm::WhereClauseItem_ConnectingAndOr WhereClauseItem::connecting_and_or() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClauseItem.connecting_and_or)
  return static_cast< ::org::yaorm::WhereClauseItem_ConnectingAndOr >(connecting_and_or_);
}
inline void WhereClauseItem::set_connecting_and_or(::org::yaorm::WhereClauseItem_ConnectingAndOr value) {
  
  connecting_and_or_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.WhereClauseItem.connecting_and_or)
}

// optional .org.yaorm.WhereClauseItem connecting_where_clause = 4;
inline bool WhereClauseItem::has_connecting_where_clause() const {
  return !_is_default_instance_ && connecting_where_clause_ != NULL;
}
inline void WhereClauseItem::clear_connecting_where_clause() {
  if (GetArenaNoVirtual() == NULL && connecting_where_clause_ != NULL) delete connecting_where_clause_;
  connecting_where_clause_ = NULL;
}
inline const ::org::yaorm::WhereClauseItem& WhereClauseItem::connecting_where_clause() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClauseItem.connecting_where_clause)
  return connecting_where_clause_ != NULL ? *connecting_where_clause_ : *default_instance_->connecting_where_clause_;
}
inline ::org::yaorm::WhereClauseItem* WhereClauseItem::mutable_connecting_where_clause() {
  
  if (connecting_where_clause_ == NULL) {
    connecting_where_clause_ = new ::org::yaorm::WhereClauseItem;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.WhereClauseItem.connecting_where_clause)
  return connecting_where_clause_;
}
inline ::org::yaorm::WhereClauseItem* WhereClauseItem::release_connecting_where_clause() {
  
  ::org::yaorm::WhereClauseItem* temp = connecting_where_clause_;
  connecting_where_clause_ = NULL;
  return temp;
}
inline void WhereClauseItem::set_allocated_connecting_where_clause(::org::yaorm::WhereClauseItem* connecting_where_clause) {
  delete connecting_where_clause_;
  connecting_where_clause_ = connecting_where_clause;
  if (connecting_where_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.WhereClauseItem.connecting_where_clause)
}

// -------------------------------------------------------------------

// PropertyDefinition

// optional string name = 1;
inline void PropertyDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyDefinition::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyDefinition.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyDefinition.name)
}
inline void PropertyDefinition::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.PropertyDefinition.name)
}
inline void PropertyDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.PropertyDefinition.name)
}
inline ::std::string* PropertyDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.PropertyDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyDefinition::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.PropertyDefinition.name)
}

// optional .org.yaorm.ProtobufType type = 2;
inline void PropertyDefinition::clear_type() {
  type_ = 0;
}
inline ::org::yaorm::ProtobufType PropertyDefinition::type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyDefinition.type)
  return static_cast< ::org::yaorm::ProtobufType >(type_);
}
inline void PropertyDefinition::set_type(::org::yaorm::ProtobufType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyDefinition.type)
}

// optional bool foreign_collection = 3;
inline void PropertyDefinition::clear_foreign_collection() {
  foreign_collection_ = false;
}
inline bool PropertyDefinition::foreign_collection() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyDefinition.foreign_collection)
  return foreign_collection_;
}
inline void PropertyDefinition::set_foreign_collection(bool value) {
  
  foreign_collection_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyDefinition.foreign_collection)
}

// optional bool is_key = 4;
inline void PropertyDefinition::clear_is_key() {
  is_key_ = false;
}
inline bool PropertyDefinition::is_key() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyDefinition.is_key)
  return is_key_;
}
inline void PropertyDefinition::set_is_key(bool value) {
  
  is_key_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyDefinition.is_key)
}

// -------------------------------------------------------------------

// Index

// repeated .org.yaorm.PropertyDefinition column_names = 1;
inline int Index::column_names_size() const {
  return column_names_.size();
}
inline void Index::clear_column_names() {
  column_names_.Clear();
}
inline const ::org::yaorm::PropertyDefinition& Index::column_names(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Index.column_names)
  return column_names_.Get(index);
}
inline ::org::yaorm::PropertyDefinition* Index::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Index.column_names)
  return column_names_.Mutable(index);
}
inline ::org::yaorm::PropertyDefinition* Index::add_column_names() {
  // @@protoc_insertion_point(field_add:org.yaorm.Index.column_names)
  return column_names_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
Index::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Index.column_names)
  return &column_names_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
Index::column_names() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Index.column_names)
  return column_names_;
}

// repeated .org.yaorm.PropertyDefinition include_names = 2;
inline int Index::include_names_size() const {
  return include_names_.size();
}
inline void Index::clear_include_names() {
  include_names_.Clear();
}
inline const ::org::yaorm::PropertyDefinition& Index::include_names(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Index.include_names)
  return include_names_.Get(index);
}
inline ::org::yaorm::PropertyDefinition* Index::mutable_include_names(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Index.include_names)
  return include_names_.Mutable(index);
}
inline ::org::yaorm::PropertyDefinition* Index::add_include_names() {
  // @@protoc_insertion_point(field_add:org.yaorm.Index.include_names)
  return include_names_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
Index::mutable_include_names() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Index.include_names)
  return &include_names_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
Index::include_names() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Index.include_names)
  return include_names_;
}

// -------------------------------------------------------------------

// Difference

// optional .org.yaorm.Difference.EntityType entity_type = 1;
inline void Difference::clear_entity_type() {
  entity_type_ = 0;
}
inline ::org::yaorm::Difference_EntityType Difference::entity_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.entity_type)
  return static_cast< ::org::yaorm::Difference_EntityType >(entity_type_);
}
inline void Difference::set_entity_type(::org::yaorm::Difference_EntityType value) {
  
  entity_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.entity_type)
}

// optional .org.yaorm.Difference.Operation operation = 2;
inline void Difference::clear_operation() {
  operation_ = 0;
}
inline ::org::yaorm::Difference_Operation Difference::operation() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.operation)
  return static_cast< ::org::yaorm::Difference_Operation >(operation_);
}
inline void Difference::set_operation(::org::yaorm::Difference_Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.operation)
}

// optional string name = 3;
inline void Difference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Difference::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Difference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.name)
}
inline void Difference::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Difference.name)
}
inline void Difference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Difference.name)
}
inline ::std::string* Difference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Difference::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Difference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.name)
}

// optional .org.yaorm.Index index = 4;
inline bool Difference::has_index() const {
  return !_is_default_instance_ && index_ != NULL;
}
inline void Difference::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
inline const ::org::yaorm::Index& Difference::index() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
inline ::org::yaorm::Index* Difference::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::org::yaorm::Index;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.index)
  return index_;
}
inline ::org::yaorm::Index* Difference::release_index() {
  
  ::org::yaorm::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline void Difference::set_allocated_index(::org::yaorm::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.index)
}

// optional .org.yaorm.PropertyDefinition property_definition = 5;
inline bool Difference::has_property_definition() const {
  return !_is_default_instance_ && property_definition_ != NULL;
}
inline void Difference::clear_property_definition() {
  if (GetArenaNoVirtual() == NULL && property_definition_ != NULL) delete property_definition_;
  property_definition_ = NULL;
}
inline const ::org::yaorm::PropertyDefinition& Difference::property_definition() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.property_definition)
  return property_definition_ != NULL ? *property_definition_ : *default_instance_->property_definition_;
}
inline ::org::yaorm::PropertyDefinition* Difference::mutable_property_definition() {
  
  if (property_definition_ == NULL) {
    property_definition_ = new ::org::yaorm::PropertyDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.property_definition)
  return property_definition_;
}
inline ::org::yaorm::PropertyDefinition* Difference::release_property_definition() {
  
  ::org::yaorm::PropertyDefinition* temp = property_definition_;
  property_definition_ = NULL;
  return temp;
}
inline void Difference::set_allocated_property_definition(::org::yaorm::PropertyDefinition* property_definition) {
  delete property_definition_;
  property_definition_ = property_definition;
  if (property_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.property_definition)
}

// optional .org.yaorm.Definition definition = 6;
inline bool Difference::has_definition() const {
  return !_is_default_instance_ && definition_ != NULL;
}
inline void Difference::clear_definition() {
  if (GetArenaNoVirtual() == NULL && definition_ != NULL) delete definition_;
  definition_ = NULL;
}
inline const ::org::yaorm::Definition& Difference::definition() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.definition)
  return definition_ != NULL ? *definition_ : *default_instance_->definition_;
}
inline ::org::yaorm::Definition* Difference::mutable_definition() {
  
  if (definition_ == NULL) {
    definition_ = new ::org::yaorm::Definition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.definition)
  return definition_;
}
inline ::org::yaorm::Definition* Difference::release_definition() {
  
  ::org::yaorm::Definition* temp = definition_;
  definition_ = NULL;
  return temp;
}
inline void Difference::set_allocated_definition(::org::yaorm::Definition* definition) {
  delete definition_;
  definition_ = definition;
  if (definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.definition)
}

// -------------------------------------------------------------------

// Definition

// optional string name = 1;
inline void Definition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Definition::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Definition.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Definition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Definition.name)
}
inline void Definition::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Definition.name)
}
inline void Definition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Definition.name)
}
inline ::std::string* Definition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Definition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Definition::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Definition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Definition.name)
}

// repeated .org.yaorm.PropertyDefinition property_definitions = 2;
inline int Definition::property_definitions_size() const {
  return property_definitions_.size();
}
inline void Definition::clear_property_definitions() {
  property_definitions_.Clear();
}
inline const ::org::yaorm::PropertyDefinition& Definition::property_definitions(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Definition.property_definitions)
  return property_definitions_.Get(index);
}
inline ::org::yaorm::PropertyDefinition* Definition::mutable_property_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Definition.property_definitions)
  return property_definitions_.Mutable(index);
}
inline ::org::yaorm::PropertyDefinition* Definition::add_property_definitions() {
  // @@protoc_insertion_point(field_add:org.yaorm.Definition.property_definitions)
  return property_definitions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
Definition::mutable_property_definitions() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Definition.property_definitions)
  return &property_definitions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
Definition::property_definitions() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Definition.property_definitions)
  return property_definitions_;
}

// optional .org.yaorm.Index index = 3;
inline bool Definition::has_index() const {
  return !_is_default_instance_ && index_ != NULL;
}
inline void Definition::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
inline const ::org::yaorm::Index& Definition::index() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Definition.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
inline ::org::yaorm::Index* Definition::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::org::yaorm::Index;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Definition.index)
  return index_;
}
inline ::org::yaorm::Index* Definition::release_index() {
  
  ::org::yaorm::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline void Definition::set_allocated_index(::org::yaorm::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Definition.index)
}

// -------------------------------------------------------------------

// Definitions

// repeated .org.yaorm.Definition definitions = 3;
inline int Definitions::definitions_size() const {
  return definitions_.size();
}
inline void Definitions::clear_definitions() {
  definitions_.Clear();
}
inline const ::org::yaorm::Definition& Definitions::definitions(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Definitions.definitions)
  return definitions_.Get(index);
}
inline ::org::yaorm::Definition* Definitions::mutable_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Definitions.definitions)
  return definitions_.Mutable(index);
}
inline ::org::yaorm::Definition* Definitions::add_definitions() {
  // @@protoc_insertion_point(field_add:org.yaorm.Definitions.definitions)
  return definitions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::Definition >*
Definitions::mutable_definitions() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Definitions.definitions)
  return &definitions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Definition >&
Definitions::definitions() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Definitions.definitions)
  return definitions_;
}

// -------------------------------------------------------------------

// DifferenceReport

// optional bool migration_exists = 1;
inline void DifferenceReport::clear_migration_exists() {
  migration_exists_ = false;
}
inline bool DifferenceReport::migration_exists() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DifferenceReport.migration_exists)
  return migration_exists_;
}
inline void DifferenceReport::set_migration_exists(bool value) {
  
  migration_exists_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DifferenceReport.migration_exists)
}

// repeated .org.yaorm.Difference differences = 2;
inline int DifferenceReport::differences_size() const {
  return differences_.size();
}
inline void DifferenceReport::clear_differences() {
  differences_.Clear();
}
inline const ::org::yaorm::Difference& DifferenceReport::differences(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.DifferenceReport.differences)
  return differences_.Get(index);
}
inline ::org::yaorm::Difference* DifferenceReport::mutable_differences(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.DifferenceReport.differences)
  return differences_.Mutable(index);
}
inline ::org::yaorm::Difference* DifferenceReport::add_differences() {
  // @@protoc_insertion_point(field_add:org.yaorm.DifferenceReport.differences)
  return differences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >*
DifferenceReport::mutable_differences() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.DifferenceReport.differences)
  return &differences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >&
DifferenceReport::differences() const {
  // @@protoc_insertion_point(field_list:org.yaorm.DifferenceReport.differences)
  return differences_;
}

// -------------------------------------------------------------------

// PropertyHolder

// optional .org.yaorm.PropertyDefinition property_definition = 1;
inline bool PropertyHolder::has_property_definition() const {
  return !_is_default_instance_ && property_definition_ != NULL;
}
inline void PropertyHolder::clear_property_definition() {
  if (GetArenaNoVirtual() == NULL && property_definition_ != NULL) delete property_definition_;
  property_definition_ = NULL;
}
inline const ::org::yaorm::PropertyDefinition& PropertyHolder::property_definition() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.property_definition)
  return property_definition_ != NULL ? *property_definition_ : *default_instance_->property_definition_;
}
inline ::org::yaorm::PropertyDefinition* PropertyHolder::mutable_property_definition() {
  
  if (property_definition_ == NULL) {
    property_definition_ = new ::org::yaorm::PropertyDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.PropertyHolder.property_definition)
  return property_definition_;
}
inline ::org::yaorm::PropertyDefinition* PropertyHolder::release_property_definition() {
  
  ::org::yaorm::PropertyDefinition* temp = property_definition_;
  property_definition_ = NULL;
  return temp;
}
inline void PropertyHolder::set_allocated_property_definition(::org::yaorm::PropertyDefinition* property_definition) {
  delete property_definition_;
  property_definition_ = property_definition;
  if (property_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.PropertyHolder.property_definition)
}

// optional double double_holder = 2;
inline void PropertyHolder::clear_double_holder() {
  double_holder_ = 0;
}
inline double PropertyHolder::double_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.double_holder)
  return double_holder_;
}
inline void PropertyHolder::set_double_holder(double value) {
  
  double_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.double_holder)
}

// optional float float_holder = 3;
inline void PropertyHolder::clear_float_holder() {
  float_holder_ = 0;
}
inline float PropertyHolder::float_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.float_holder)
  return float_holder_;
}
inline void PropertyHolder::set_float_holder(float value) {
  
  float_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.float_holder)
}

// optional int32 int32_holder = 4;
inline void PropertyHolder::clear_int32_holder() {
  int32_holder_ = 0;
}
inline ::google::protobuf::int32 PropertyHolder::int32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.int32_holder)
  return int32_holder_;
}
inline void PropertyHolder::set_int32_holder(::google::protobuf::int32 value) {
  
  int32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.int32_holder)
}

// optional int64 int64_holder = 5;
inline void PropertyHolder::clear_int64_holder() {
  int64_holder_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PropertyHolder::int64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.int64_holder)
  return int64_holder_;
}
inline void PropertyHolder::set_int64_holder(::google::protobuf::int64 value) {
  
  int64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.int64_holder)
}

// optional uint32 uint32_holder = 6;
inline void PropertyHolder::clear_uint32_holder() {
  uint32_holder_ = 0u;
}
inline ::google::protobuf::uint32 PropertyHolder::uint32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.uint32_holder)
  return uint32_holder_;
}
inline void PropertyHolder::set_uint32_holder(::google::protobuf::uint32 value) {
  
  uint32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.uint32_holder)
}

// optional uint64 uint64_holder = 7;
inline void PropertyHolder::clear_uint64_holder() {
  uint64_holder_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PropertyHolder::uint64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.uint64_holder)
  return uint64_holder_;
}
inline void PropertyHolder::set_uint64_holder(::google::protobuf::uint64 value) {
  
  uint64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.uint64_holder)
}

// optional sint32 sint32_holder = 8;
inline void PropertyHolder::clear_sint32_holder() {
  sint32_holder_ = 0;
}
inline ::google::protobuf::int32 PropertyHolder::sint32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.sint32_holder)
  return sint32_holder_;
}
inline void PropertyHolder::set_sint32_holder(::google::protobuf::int32 value) {
  
  sint32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.sint32_holder)
}

// optional sint64 sint64_holder = 9;
inline void PropertyHolder::clear_sint64_holder() {
  sint64_holder_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PropertyHolder::sint64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.sint64_holder)
  return sint64_holder_;
}
inline void PropertyHolder::set_sint64_holder(::google::protobuf::int64 value) {
  
  sint64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.sint64_holder)
}

// optional fixed32 fixed32_holder = 10;
inline void PropertyHolder::clear_fixed32_holder() {
  fixed32_holder_ = 0u;
}
inline ::google::protobuf::uint32 PropertyHolder::fixed32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.fixed32_holder)
  return fixed32_holder_;
}
inline void PropertyHolder::set_fixed32_holder(::google::protobuf::uint32 value) {
  
  fixed32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.fixed32_holder)
}

// optional fixed64 fixed64_holder = 11;
inline void PropertyHolder::clear_fixed64_holder() {
  fixed64_holder_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PropertyHolder::fixed64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.fixed64_holder)
  return fixed64_holder_;
}
inline void PropertyHolder::set_fixed64_holder(::google::protobuf::uint64 value) {
  
  fixed64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.fixed64_holder)
}

// optional sfixed32 sfixed32_holder = 12;
inline void PropertyHolder::clear_sfixed32_holder() {
  sfixed32_holder_ = 0;
}
inline ::google::protobuf::int32 PropertyHolder::sfixed32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.sfixed32_holder)
  return sfixed32_holder_;
}
inline void PropertyHolder::set_sfixed32_holder(::google::protobuf::int32 value) {
  
  sfixed32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.sfixed32_holder)
}

// optional sfixed64 sfixed64_holder = 13;
inline void PropertyHolder::clear_sfixed64_holder() {
  sfixed64_holder_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PropertyHolder::sfixed64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.sfixed64_holder)
  return sfixed64_holder_;
}
inline void PropertyHolder::set_sfixed64_holder(::google::protobuf::int64 value) {
  
  sfixed64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.sfixed64_holder)
}

// optional bool bool_holder = 14;
inline void PropertyHolder::clear_bool_holder() {
  bool_holder_ = false;
}
inline bool PropertyHolder::bool_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.bool_holder)
  return bool_holder_;
}
inline void PropertyHolder::set_bool_holder(bool value) {
  
  bool_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.bool_holder)
}

// optional string string_holder = 15;
inline void PropertyHolder::clear_string_holder() {
  string_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyHolder::string_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.string_holder)
  return string_holder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyHolder::set_string_holder(const ::std::string& value) {
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.string_holder)
}
inline void PropertyHolder::set_string_holder(const char* value) {
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.PropertyHolder.string_holder)
}
inline void PropertyHolder::set_string_holder(const char* value, size_t size) {
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.PropertyHolder.string_holder)
}
inline ::std::string* PropertyHolder::mutable_string_holder() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.PropertyHolder.string_holder)
  return string_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyHolder::release_string_holder() {
  
  return string_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyHolder::set_allocated_string_holder(::std::string* string_holder) {
  if (string_holder != NULL) {
    
  } else {
    
  }
  string_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_holder);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.PropertyHolder.string_holder)
}

// optional bytes bytes_holder = 16;
inline void PropertyHolder::clear_bytes_holder() {
  bytes_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyHolder::bytes_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.bytes_holder)
  return bytes_holder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyHolder::set_bytes_holder(const ::std::string& value) {
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.bytes_holder)
}
inline void PropertyHolder::set_bytes_holder(const char* value) {
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.PropertyHolder.bytes_holder)
}
inline void PropertyHolder::set_bytes_holder(const void* value, size_t size) {
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.PropertyHolder.bytes_holder)
}
inline ::std::string* PropertyHolder::mutable_bytes_holder() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.PropertyHolder.bytes_holder)
  return bytes_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyHolder::release_bytes_holder() {
  
  return bytes_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyHolder::set_allocated_bytes_holder(::std::string* bytes_holder) {
  if (bytes_holder != NULL) {
    
  } else {
    
  }
  bytes_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_holder);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.PropertyHolder.bytes_holder)
}

// -------------------------------------------------------------------

// Record

// repeated .org.yaorm.PropertyHolder columns = 1;
inline int Record::columns_size() const {
  return columns_.size();
}
inline void Record::clear_columns() {
  columns_.Clear();
}
inline const ::org::yaorm::PropertyHolder& Record::columns(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Record.columns)
  return columns_.Get(index);
}
inline ::org::yaorm::PropertyHolder* Record::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Record.columns)
  return columns_.Mutable(index);
}
inline ::org::yaorm::PropertyHolder* Record::add_columns() {
  // @@protoc_insertion_point(field_add:org.yaorm.Record.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyHolder >*
Record::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Record.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyHolder >&
Record::columns() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Record.columns)
  return columns_;
}

// -------------------------------------------------------------------

// Records

// repeated .org.yaorm.Record records = 1;
inline int Records::records_size() const {
  return records_.size();
}
inline void Records::clear_records() {
  records_.Clear();
}
inline const ::org::yaorm::Record& Records::records(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Records.records)
  return records_.Get(index);
}
inline ::org::yaorm::Record* Records::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Records.records)
  return records_.Mutable(index);
}
inline ::org::yaorm::Record* Records::add_records() {
  // @@protoc_insertion_point(field_add:org.yaorm.Records.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >*
Records::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Records.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >&
Records::records() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Records.records)
  return records_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yaorm
}  // namespace org

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::org::yaorm::WhereClauseItem_OperatorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::WhereClauseItem_OperatorType>() {
  return ::org::yaorm::WhereClauseItem_OperatorType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::WhereClauseItem_ConnectingAndOr> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::WhereClauseItem_ConnectingAndOr>() {
  return ::org::yaorm::WhereClauseItem_ConnectingAndOr_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::Difference_EntityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::Difference_EntityType>() {
  return ::org::yaorm::Difference_EntityType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::Difference_Operation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::Difference_Operation>() {
  return ::org::yaorm::Difference_Operation_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::ProtobufType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::ProtobufType>() {
  return ::org::yaorm::ProtobufType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_yaorm_5fmodels_2eproto__INCLUDED
