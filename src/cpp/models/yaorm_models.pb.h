// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yaorm_models.proto

#ifndef PROTOBUF_yaorm_5fmodels_2eproto__INCLUDED
#define PROTOBUF_yaorm_5fmodels_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace org {
namespace yaorm {
class AllTableRecords;
class AllTableRecordsDefaultTypeInternal;
extern AllTableRecordsDefaultTypeInternal _AllTableRecords_default_instance_;
class Column;
class ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class ColumnDefinition;
class ColumnDefinitionDefaultTypeInternal;
extern ColumnDefinitionDefaultTypeInternal _ColumnDefinition_default_instance_;
class ConnectionInfo;
class ConnectionInfoDefaultTypeInternal;
extern ConnectionInfoDefaultTypeInternal _ConnectionInfo_default_instance_;
class DatabaseDefinition;
class DatabaseDefinitionDefaultTypeInternal;
extern DatabaseDefinitionDefaultTypeInternal _DatabaseDefinition_default_instance_;
class DatabaseExecution;
class DatabaseExecutionDefaultTypeInternal;
extern DatabaseExecutionDefaultTypeInternal _DatabaseExecution_default_instance_;
class DatabaseExecutionReport;
class DatabaseExecutionReportDefaultTypeInternal;
extern DatabaseExecutionReportDefaultTypeInternal _DatabaseExecutionReport_default_instance_;
class DatabaseOperation;
class DatabaseOperationDefaultTypeInternal;
extern DatabaseOperationDefaultTypeInternal _DatabaseOperation_default_instance_;
class DatabaseOperationResult;
class DatabaseOperationResultDefaultTypeInternal;
extern DatabaseOperationResultDefaultTypeInternal _DatabaseOperationResult_default_instance_;
class Difference;
class DifferenceDefaultTypeInternal;
extern DifferenceDefaultTypeInternal _Difference_default_instance_;
class DifferenceReport;
class DifferenceReportDefaultTypeInternal;
extern DifferenceReportDefaultTypeInternal _DifferenceReport_default_instance_;
class GroupBy;
class GroupByDefaultTypeInternal;
extern GroupByDefaultTypeInternal _GroupBy_default_instance_;
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class JoinTable;
class JoinTableDefaultTypeInternal;
extern JoinTableDefaultTypeInternal _JoinTable_default_instance_;
class JoinTableRecords;
class JoinTableRecordsDefaultTypeInternal;
extern JoinTableRecordsDefaultTypeInternal _JoinTableRecords_default_instance_;
class Migration;
class MigrationDefaultTypeInternal;
extern MigrationDefaultTypeInternal _Migration_default_instance_;
class OrderBy;
class OrderByDefaultTypeInternal;
extern OrderByDefaultTypeInternal _OrderBy_default_instance_;
class Projection;
class ProjectionDefaultTypeInternal;
extern ProjectionDefaultTypeInternal _Projection_default_instance_;
class ProtoTypeToSqlType;
class ProtoTypeToSqlTypeDefaultTypeInternal;
extern ProtoTypeToSqlTypeDefaultTypeInternal _ProtoTypeToSqlType_default_instance_;
class ProtoTypeToSqlTypes;
class ProtoTypeToSqlTypesDefaultTypeInternal;
extern ProtoTypeToSqlTypesDefaultTypeInternal _ProtoTypeToSqlTypes_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class Records;
class RecordsDefaultTypeInternal;
extern RecordsDefaultTypeInternal _Records_default_instance_;
class SqlGeneratorRequestResponse;
class SqlGeneratorRequestResponseDefaultTypeInternal;
extern SqlGeneratorRequestResponseDefaultTypeInternal _SqlGeneratorRequestResponse_default_instance_;
class TableDefinition;
class TableDefinitionDefaultTypeInternal;
extern TableDefinitionDefaultTypeInternal _TableDefinition_default_instance_;
class TableDefinitionGraph;
class TableDefinitionGraphDefaultTypeInternal;
extern TableDefinitionGraphDefaultTypeInternal _TableDefinitionGraph_default_instance_;
class TableDefinitionGraphs;
class TableDefinitionGraphsDefaultTypeInternal;
extern TableDefinitionGraphsDefaultTypeInternal _TableDefinitionGraphs_default_instance_;
class TableDefinitions;
class TableDefinitionsDefaultTypeInternal;
extern TableDefinitionsDefaultTypeInternal _TableDefinitions_default_instance_;
class TableRecords;
class TableRecordsDefaultTypeInternal;
extern TableRecordsDefaultTypeInternal _TableRecords_default_instance_;
class UIYaormRequest;
class UIYaormRequestDefaultTypeInternal;
extern UIYaormRequestDefaultTypeInternal _UIYaormRequest_default_instance_;
class UIYaormResponse;
class UIYaormResponseDefaultTypeInternal;
extern UIYaormResponseDefaultTypeInternal _UIYaormResponse_default_instance_;
class WhereClause;
class WhereClauseDefaultTypeInternal;
extern WhereClauseDefaultTypeInternal _WhereClause_default_instance_;
}  // namespace yaorm
}  // namespace org

namespace org {
namespace yaorm {

namespace protobuf_yaorm_5fmodels_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_yaorm_5fmodels_2eproto

enum WhereClause_OperatorType {
  WhereClause_OperatorType_EQUALS = 0,
  WhereClause_OperatorType_GREATER_THAN = 1,
  WhereClause_OperatorType_LESS_THAN = 2,
  WhereClause_OperatorType_NOT_EQUALS = 3,
  WhereClause_OperatorType_IN = 4,
  WhereClause_OperatorType_WhereClause_OperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WhereClause_OperatorType_WhereClause_OperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WhereClause_OperatorType_IsValid(int value);
const WhereClause_OperatorType WhereClause_OperatorType_OperatorType_MIN = WhereClause_OperatorType_EQUALS;
const WhereClause_OperatorType WhereClause_OperatorType_OperatorType_MAX = WhereClause_OperatorType_IN;
const int WhereClause_OperatorType_OperatorType_ARRAYSIZE = WhereClause_OperatorType_OperatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhereClause_OperatorType_descriptor();
inline const ::std::string& WhereClause_OperatorType_Name(WhereClause_OperatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhereClause_OperatorType_descriptor(), value);
}
inline bool WhereClause_OperatorType_Parse(
    const ::std::string& name, WhereClause_OperatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhereClause_OperatorType>(
    WhereClause_OperatorType_descriptor(), name, value);
}
enum WhereClause_ConnectingAndOr {
  WhereClause_ConnectingAndOr_NONE = 0,
  WhereClause_ConnectingAndOr_AND = 1,
  WhereClause_ConnectingAndOr_OR = 2,
  WhereClause_ConnectingAndOr_WhereClause_ConnectingAndOr_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WhereClause_ConnectingAndOr_WhereClause_ConnectingAndOr_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WhereClause_ConnectingAndOr_IsValid(int value);
const WhereClause_ConnectingAndOr WhereClause_ConnectingAndOr_ConnectingAndOr_MIN = WhereClause_ConnectingAndOr_NONE;
const WhereClause_ConnectingAndOr WhereClause_ConnectingAndOr_ConnectingAndOr_MAX = WhereClause_ConnectingAndOr_OR;
const int WhereClause_ConnectingAndOr_ConnectingAndOr_ARRAYSIZE = WhereClause_ConnectingAndOr_ConnectingAndOr_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhereClause_ConnectingAndOr_descriptor();
inline const ::std::string& WhereClause_ConnectingAndOr_Name(WhereClause_ConnectingAndOr value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhereClause_ConnectingAndOr_descriptor(), value);
}
inline bool WhereClause_ConnectingAndOr_Parse(
    const ::std::string& name, WhereClause_ConnectingAndOr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhereClause_ConnectingAndOr>(
    WhereClause_ConnectingAndOr_descriptor(), name, value);
}
enum ColumnDefinition_ColumnType {
  ColumnDefinition_ColumnType_SCALAR = 0,
  ColumnDefinition_ColumnType_ENUM_NAME = 1,
  ColumnDefinition_ColumnType_ENUM_VALUE = 2,
  ColumnDefinition_ColumnType_MESSAGE_KEY = 3,
  ColumnDefinition_ColumnType_ColumnDefinition_ColumnType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ColumnDefinition_ColumnType_ColumnDefinition_ColumnType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ColumnDefinition_ColumnType_IsValid(int value);
const ColumnDefinition_ColumnType ColumnDefinition_ColumnType_ColumnType_MIN = ColumnDefinition_ColumnType_SCALAR;
const ColumnDefinition_ColumnType ColumnDefinition_ColumnType_ColumnType_MAX = ColumnDefinition_ColumnType_MESSAGE_KEY;
const int ColumnDefinition_ColumnType_ColumnType_ARRAYSIZE = ColumnDefinition_ColumnType_ColumnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColumnDefinition_ColumnType_descriptor();
inline const ::std::string& ColumnDefinition_ColumnType_Name(ColumnDefinition_ColumnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColumnDefinition_ColumnType_descriptor(), value);
}
inline bool ColumnDefinition_ColumnType_Parse(
    const ::std::string& name, ColumnDefinition_ColumnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColumnDefinition_ColumnType>(
    ColumnDefinition_ColumnType_descriptor(), name, value);
}
enum ColumnDefinition_LinkerType {
  ColumnDefinition_LinkerType_NONE = 0,
  ColumnDefinition_LinkerType_PARENT = 1,
  ColumnDefinition_LinkerType_CHILD = 2,
  ColumnDefinition_LinkerType_NEITHER = 3,
  ColumnDefinition_LinkerType_ColumnDefinition_LinkerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ColumnDefinition_LinkerType_ColumnDefinition_LinkerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ColumnDefinition_LinkerType_IsValid(int value);
const ColumnDefinition_LinkerType ColumnDefinition_LinkerType_LinkerType_MIN = ColumnDefinition_LinkerType_NONE;
const ColumnDefinition_LinkerType ColumnDefinition_LinkerType_LinkerType_MAX = ColumnDefinition_LinkerType_NEITHER;
const int ColumnDefinition_LinkerType_LinkerType_ARRAYSIZE = ColumnDefinition_LinkerType_LinkerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColumnDefinition_LinkerType_descriptor();
inline const ::std::string& ColumnDefinition_LinkerType_Name(ColumnDefinition_LinkerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColumnDefinition_LinkerType_descriptor(), value);
}
inline bool ColumnDefinition_LinkerType_Parse(
    const ::std::string& name, ColumnDefinition_LinkerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColumnDefinition_LinkerType>(
    ColumnDefinition_LinkerType_descriptor(), name, value);
}
enum Difference_EntityType {
  Difference_EntityType_INDEX = 0,
  Difference_EntityType_COLUMN = 1,
  Difference_EntityType_TABLE = 2,
  Difference_EntityType_Difference_EntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Difference_EntityType_Difference_EntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Difference_EntityType_IsValid(int value);
const Difference_EntityType Difference_EntityType_EntityType_MIN = Difference_EntityType_INDEX;
const Difference_EntityType Difference_EntityType_EntityType_MAX = Difference_EntityType_TABLE;
const int Difference_EntityType_EntityType_ARRAYSIZE = Difference_EntityType_EntityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Difference_EntityType_descriptor();
inline const ::std::string& Difference_EntityType_Name(Difference_EntityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Difference_EntityType_descriptor(), value);
}
inline bool Difference_EntityType_Parse(
    const ::std::string& name, Difference_EntityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Difference_EntityType>(
    Difference_EntityType_descriptor(), name, value);
}
enum Difference_Operation {
  Difference_Operation_CREATE = 0,
  Difference_Operation_DROP = 1,
  Difference_Operation_Difference_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Difference_Operation_Difference_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Difference_Operation_IsValid(int value);
const Difference_Operation Difference_Operation_Operation_MIN = Difference_Operation_CREATE;
const Difference_Operation Difference_Operation_Operation_MAX = Difference_Operation_DROP;
const int Difference_Operation_Operation_ARRAYSIZE = Difference_Operation_Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Difference_Operation_descriptor();
inline const ::std::string& Difference_Operation_Name(Difference_Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Difference_Operation_descriptor(), value);
}
inline bool Difference_Operation_Parse(
    const ::std::string& name, Difference_Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Difference_Operation>(
    Difference_Operation_descriptor(), name, value);
}
enum TableDefinition_TableType {
  TableDefinition_TableType_NORMAL = 0,
  TableDefinition_TableType_LINKER_MESSAGE = 1,
  TableDefinition_TableType_LINKER_ENUM = 2,
  TableDefinition_TableType_TableDefinition_TableType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TableDefinition_TableType_TableDefinition_TableType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TableDefinition_TableType_IsValid(int value);
const TableDefinition_TableType TableDefinition_TableType_TableType_MIN = TableDefinition_TableType_NORMAL;
const TableDefinition_TableType TableDefinition_TableType_TableType_MAX = TableDefinition_TableType_LINKER_ENUM;
const int TableDefinition_TableType_TableType_ARRAYSIZE = TableDefinition_TableType_TableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TableDefinition_TableType_descriptor();
inline const ::std::string& TableDefinition_TableType_Name(TableDefinition_TableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TableDefinition_TableType_descriptor(), value);
}
inline bool TableDefinition_TableType_Parse(
    const ::std::string& name, TableDefinition_TableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TableDefinition_TableType>(
    TableDefinition_TableType_descriptor(), name, value);
}
enum DatabaseOperation_DatabaseOperationType {
  DatabaseOperation_DatabaseOperationType_CREATE_TABLE = 0,
  DatabaseOperation_DatabaseOperationType_DROP_TABLE = 1,
  DatabaseOperation_DatabaseOperationType_CREATE_INDEX = 2,
  DatabaseOperation_DatabaseOperationType_DROP_INDEX = 3,
  DatabaseOperation_DatabaseOperationType_CREATE_COLUMN = 4,
  DatabaseOperation_DatabaseOperationType_DROP_COLUMN = 5,
  DatabaseOperation_DatabaseOperationType_GET_COUNT = 6,
  DatabaseOperation_DatabaseOperationType_GET_CUSTOM = 7,
  DatabaseOperation_DatabaseOperationType_GET = 8,
  DatabaseOperation_DatabaseOperationType_GET_MANY = 9,
  DatabaseOperation_DatabaseOperationType_GET_WHERE = 10,
  DatabaseOperation_DatabaseOperationType_BULK_INSERT = 11,
  DatabaseOperation_DatabaseOperationType_CREATE_OR_UPDATE = 12,
  DatabaseOperation_DatabaseOperationType_CREATE = 13,
  DatabaseOperation_DatabaseOperationType_UPDATE = 14,
  DatabaseOperation_DatabaseOperationType_UPDATE_WITH_CRITERIA = 15,
  DatabaseOperation_DatabaseOperationType_UPDATE_CUSTOM = 16,
  DatabaseOperation_DatabaseOperationType_DELETE = 17,
  DatabaseOperation_DatabaseOperationType_DELETE_ALL = 18,
  DatabaseOperation_DatabaseOperationType_DatabaseOperation_DatabaseOperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DatabaseOperation_DatabaseOperationType_DatabaseOperation_DatabaseOperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DatabaseOperation_DatabaseOperationType_IsValid(int value);
const DatabaseOperation_DatabaseOperationType DatabaseOperation_DatabaseOperationType_DatabaseOperationType_MIN = DatabaseOperation_DatabaseOperationType_CREATE_TABLE;
const DatabaseOperation_DatabaseOperationType DatabaseOperation_DatabaseOperationType_DatabaseOperationType_MAX = DatabaseOperation_DatabaseOperationType_DELETE_ALL;
const int DatabaseOperation_DatabaseOperationType_DatabaseOperationType_ARRAYSIZE = DatabaseOperation_DatabaseOperationType_DatabaseOperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatabaseOperation_DatabaseOperationType_descriptor();
inline const ::std::string& DatabaseOperation_DatabaseOperationType_Name(DatabaseOperation_DatabaseOperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatabaseOperation_DatabaseOperationType_descriptor(), value);
}
inline bool DatabaseOperation_DatabaseOperationType_Parse(
    const ::std::string& name, DatabaseOperation_DatabaseOperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatabaseOperation_DatabaseOperationType>(
    DatabaseOperation_DatabaseOperationType_descriptor(), name, value);
}
enum TableDefinitionGraph_TableDefinitionGraphType {
  TableDefinitionGraph_TableDefinitionGraphType_ENUM_TYPE = 0,
  TableDefinitionGraph_TableDefinitionGraphType_MESSAGE_TYPE = 1,
  TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraph_TableDefinitionGraphType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraph_TableDefinitionGraphType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TableDefinitionGraph_TableDefinitionGraphType_IsValid(int value);
const TableDefinitionGraph_TableDefinitionGraphType TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraphType_MIN = TableDefinitionGraph_TableDefinitionGraphType_ENUM_TYPE;
const TableDefinitionGraph_TableDefinitionGraphType TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraphType_MAX = TableDefinitionGraph_TableDefinitionGraphType_MESSAGE_TYPE;
const int TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraphType_ARRAYSIZE = TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraphType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TableDefinitionGraph_TableDefinitionGraphType_descriptor();
inline const ::std::string& TableDefinitionGraph_TableDefinitionGraphType_Name(TableDefinitionGraph_TableDefinitionGraphType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TableDefinitionGraph_TableDefinitionGraphType_descriptor(), value);
}
inline bool TableDefinitionGraph_TableDefinitionGraphType_Parse(
    const ::std::string& name, TableDefinitionGraph_TableDefinitionGraphType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TableDefinitionGraph_TableDefinitionGraphType>(
    TableDefinitionGraph_TableDefinitionGraphType_descriptor(), name, value);
}
enum ProtobufType {
  NONE = 0,
  DOUBLE = 1,
  FLOAT = 2,
  INT32 = 3,
  INT64 = 4,
  UINT32 = 5,
  UINT64 = 6,
  SINT32 = 7,
  SINT64 = 8,
  FIXED32 = 9,
  FIXED64 = 10,
  SFIXED32 = 11,
  SFIXED64 = 12,
  BOOL = 13,
  STRING = 14,
  BYTES = 15,
  PROTO = 16,
  ProtobufType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtobufType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtobufType_IsValid(int value);
const ProtobufType ProtobufType_MIN = NONE;
const ProtobufType ProtobufType_MAX = PROTO;
const int ProtobufType_ARRAYSIZE = ProtobufType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtobufType_descriptor();
inline const ::std::string& ProtobufType_Name(ProtobufType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtobufType_descriptor(), value);
}
inline bool ProtobufType_Parse(
    const ::std::string& name, ProtobufType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtobufType>(
    ProtobufType_descriptor(), name, value);
}
enum SelectFunctionType {
  NONE_SELECT_FUNCTION_TYPE = 0,
  COUNT_SELECT_FUNCTION_TYPE = 1,
  MAX_SELECT_FUNCTION_TYPE = 2,
  MIN_SELECT_FUNCTION_TYPE = 3,
  SUM_SELECT_FUNCTION_TYPE = 4,
  SelectFunctionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SelectFunctionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SelectFunctionType_IsValid(int value);
const SelectFunctionType SelectFunctionType_MIN = NONE_SELECT_FUNCTION_TYPE;
const SelectFunctionType SelectFunctionType_MAX = SUM_SELECT_FUNCTION_TYPE;
const int SelectFunctionType_ARRAYSIZE = SelectFunctionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SelectFunctionType_descriptor();
inline const ::std::string& SelectFunctionType_Name(SelectFunctionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SelectFunctionType_descriptor(), value);
}
inline bool SelectFunctionType_Parse(
    const ::std::string& name, SelectFunctionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SelectFunctionType>(
    SelectFunctionType_descriptor(), name, value);
}
enum OrderByType {
  ASC = 0,
  DESC = 1,
  OrderByType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OrderByType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OrderByType_IsValid(int value);
const OrderByType OrderByType_MIN = ASC;
const OrderByType OrderByType_MAX = DESC;
const int OrderByType_ARRAYSIZE = OrderByType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderByType_descriptor();
inline const ::std::string& OrderByType_Name(OrderByType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderByType_descriptor(), value);
}
inline bool OrderByType_Parse(
    const ::std::string& name, OrderByType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderByType>(
    OrderByType_descriptor(), name, value);
}
// ===================================================================

class ProtoTypeToSqlType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.ProtoTypeToSqlType) */ {
 public:
  ProtoTypeToSqlType();
  virtual ~ProtoTypeToSqlType();

  ProtoTypeToSqlType(const ProtoTypeToSqlType& from);

  inline ProtoTypeToSqlType& operator=(const ProtoTypeToSqlType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoTypeToSqlType(ProtoTypeToSqlType&& from) noexcept
    : ProtoTypeToSqlType() {
    *this = ::std::move(from);
  }

  inline ProtoTypeToSqlType& operator=(ProtoTypeToSqlType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTypeToSqlType& default_instance();

  static inline const ProtoTypeToSqlType* internal_default_instance() {
    return reinterpret_cast<const ProtoTypeToSqlType*>(
               &_ProtoTypeToSqlType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProtoTypeToSqlType* other);
  friend void swap(ProtoTypeToSqlType& a, ProtoTypeToSqlType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoTypeToSqlType* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoTypeToSqlType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoTypeToSqlType& from);
  void MergeFrom(const ProtoTypeToSqlType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoTypeToSqlType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sql_type = 2;
  void clear_sql_type();
  static const int kSqlTypeFieldNumber = 2;
  const ::std::string& sql_type() const;
  void set_sql_type(const ::std::string& value);
  #if LANG_CXX11
  void set_sql_type(::std::string&& value);
  #endif
  void set_sql_type(const char* value);
  void set_sql_type(const char* value, size_t size);
  ::std::string* mutable_sql_type();
  ::std::string* release_sql_type();
  void set_allocated_sql_type(::std::string* sql_type);

  // .org.yaorm.ProtobufType proto_type = 1;
  void clear_proto_type();
  static const int kProtoTypeFieldNumber = 1;
  ::org::yaorm::ProtobufType proto_type() const;
  void set_proto_type(::org::yaorm::ProtobufType value);

  // @@protoc_insertion_point(class_scope:org.yaorm.ProtoTypeToSqlType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sql_type_;
  int proto_type_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtoTypeToSqlTypes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.ProtoTypeToSqlTypes) */ {
 public:
  ProtoTypeToSqlTypes();
  virtual ~ProtoTypeToSqlTypes();

  ProtoTypeToSqlTypes(const ProtoTypeToSqlTypes& from);

  inline ProtoTypeToSqlTypes& operator=(const ProtoTypeToSqlTypes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoTypeToSqlTypes(ProtoTypeToSqlTypes&& from) noexcept
    : ProtoTypeToSqlTypes() {
    *this = ::std::move(from);
  }

  inline ProtoTypeToSqlTypes& operator=(ProtoTypeToSqlTypes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTypeToSqlTypes& default_instance();

  static inline const ProtoTypeToSqlTypes* internal_default_instance() {
    return reinterpret_cast<const ProtoTypeToSqlTypes*>(
               &_ProtoTypeToSqlTypes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ProtoTypeToSqlTypes* other);
  friend void swap(ProtoTypeToSqlTypes& a, ProtoTypeToSqlTypes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoTypeToSqlTypes* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoTypeToSqlTypes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoTypeToSqlTypes& from);
  void MergeFrom(const ProtoTypeToSqlTypes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoTypeToSqlTypes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.ProtoTypeToSqlType results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::org::yaorm::ProtoTypeToSqlType& results(int index) const;
  ::org::yaorm::ProtoTypeToSqlType* mutable_results(int index);
  ::org::yaorm::ProtoTypeToSqlType* add_results();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType >&
      results() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.ProtoTypeToSqlTypes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType > results_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WhereClause : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.WhereClause) */ {
 public:
  WhereClause();
  virtual ~WhereClause();

  WhereClause(const WhereClause& from);

  inline WhereClause& operator=(const WhereClause& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WhereClause(WhereClause&& from) noexcept
    : WhereClause() {
    *this = ::std::move(from);
  }

  inline WhereClause& operator=(WhereClause&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WhereClause& default_instance();

  static inline const WhereClause* internal_default_instance() {
    return reinterpret_cast<const WhereClause*>(
               &_WhereClause_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WhereClause* other);
  friend void swap(WhereClause& a, WhereClause& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WhereClause* New() const PROTOBUF_FINAL { return New(NULL); }

  WhereClause* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WhereClause& from);
  void MergeFrom(const WhereClause& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WhereClause* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WhereClause_OperatorType OperatorType;
  static const OperatorType EQUALS =
    WhereClause_OperatorType_EQUALS;
  static const OperatorType GREATER_THAN =
    WhereClause_OperatorType_GREATER_THAN;
  static const OperatorType LESS_THAN =
    WhereClause_OperatorType_LESS_THAN;
  static const OperatorType NOT_EQUALS =
    WhereClause_OperatorType_NOT_EQUALS;
  static const OperatorType IN =
    WhereClause_OperatorType_IN;
  static inline bool OperatorType_IsValid(int value) {
    return WhereClause_OperatorType_IsValid(value);
  }
  static const OperatorType OperatorType_MIN =
    WhereClause_OperatorType_OperatorType_MIN;
  static const OperatorType OperatorType_MAX =
    WhereClause_OperatorType_OperatorType_MAX;
  static const int OperatorType_ARRAYSIZE =
    WhereClause_OperatorType_OperatorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperatorType_descriptor() {
    return WhereClause_OperatorType_descriptor();
  }
  static inline const ::std::string& OperatorType_Name(OperatorType value) {
    return WhereClause_OperatorType_Name(value);
  }
  static inline bool OperatorType_Parse(const ::std::string& name,
      OperatorType* value) {
    return WhereClause_OperatorType_Parse(name, value);
  }

  typedef WhereClause_ConnectingAndOr ConnectingAndOr;
  static const ConnectingAndOr NONE =
    WhereClause_ConnectingAndOr_NONE;
  static const ConnectingAndOr AND =
    WhereClause_ConnectingAndOr_AND;
  static const ConnectingAndOr OR =
    WhereClause_ConnectingAndOr_OR;
  static inline bool ConnectingAndOr_IsValid(int value) {
    return WhereClause_ConnectingAndOr_IsValid(value);
  }
  static const ConnectingAndOr ConnectingAndOr_MIN =
    WhereClause_ConnectingAndOr_ConnectingAndOr_MIN;
  static const ConnectingAndOr ConnectingAndOr_MAX =
    WhereClause_ConnectingAndOr_ConnectingAndOr_MAX;
  static const int ConnectingAndOr_ARRAYSIZE =
    WhereClause_ConnectingAndOr_ConnectingAndOr_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectingAndOr_descriptor() {
    return WhereClause_ConnectingAndOr_descriptor();
  }
  static inline const ::std::string& ConnectingAndOr_Name(ConnectingAndOr value) {
    return WhereClause_ConnectingAndOr_Name(value);
  }
  static inline bool ConnectingAndOr_Parse(const ::std::string& name,
      ConnectingAndOr* value) {
    return WhereClause_ConnectingAndOr_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string in_items = 5;
  int in_items_size() const;
  void clear_in_items();
  static const int kInItemsFieldNumber = 5;
  const ::std::string& in_items(int index) const;
  ::std::string* mutable_in_items(int index);
  void set_in_items(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_in_items(int index, ::std::string&& value);
  #endif
  void set_in_items(int index, const char* value);
  void set_in_items(int index, const char* value, size_t size);
  ::std::string* add_in_items();
  void add_in_items(const ::std::string& value);
  #if LANG_CXX11
  void add_in_items(::std::string&& value);
  #endif
  void add_in_items(const char* value);
  void add_in_items(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in_items() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in_items();

  // .org.yaorm.Column name_and_property = 1;
  bool has_name_and_property() const;
  void clear_name_and_property();
  static const int kNameAndPropertyFieldNumber = 1;
  const ::org::yaorm::Column& name_and_property() const;
  ::org::yaorm::Column* mutable_name_and_property();
  ::org::yaorm::Column* release_name_and_property();
  void set_allocated_name_and_property(::org::yaorm::Column* name_and_property);

  // .org.yaorm.WhereClause connecting_where_clause = 4;
  bool has_connecting_where_clause() const;
  void clear_connecting_where_clause();
  static const int kConnectingWhereClauseFieldNumber = 4;
  const ::org::yaorm::WhereClause& connecting_where_clause() const;
  ::org::yaorm::WhereClause* mutable_connecting_where_clause();
  ::org::yaorm::WhereClause* release_connecting_where_clause();
  void set_allocated_connecting_where_clause(::org::yaorm::WhereClause* connecting_where_clause);

  // .org.yaorm.WhereClause.OperatorType operator_type = 2;
  void clear_operator_type();
  static const int kOperatorTypeFieldNumber = 2;
  ::org::yaorm::WhereClause_OperatorType operator_type() const;
  void set_operator_type(::org::yaorm::WhereClause_OperatorType value);

  // .org.yaorm.WhereClause.ConnectingAndOr connecting_and_or = 3;
  void clear_connecting_and_or();
  static const int kConnectingAndOrFieldNumber = 3;
  ::org::yaorm::WhereClause_ConnectingAndOr connecting_and_or() const;
  void set_connecting_and_or(::org::yaorm::WhereClause_ConnectingAndOr value);

  // @@protoc_insertion_point(class_scope:org.yaorm.WhereClause)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_items_;
  ::org::yaorm::Column* name_and_property_;
  ::org::yaorm::WhereClause* connecting_where_clause_;
  int operator_type_;
  int connecting_and_or_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ColumnDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.ColumnDefinition) */ {
 public:
  ColumnDefinition();
  virtual ~ColumnDefinition();

  ColumnDefinition(const ColumnDefinition& from);

  inline ColumnDefinition& operator=(const ColumnDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColumnDefinition(ColumnDefinition&& from) noexcept
    : ColumnDefinition() {
    *this = ::std::move(from);
  }

  inline ColumnDefinition& operator=(ColumnDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnDefinition& default_instance();

  static inline const ColumnDefinition* internal_default_instance() {
    return reinterpret_cast<const ColumnDefinition*>(
               &_ColumnDefinition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ColumnDefinition* other);
  friend void swap(ColumnDefinition& a, ColumnDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColumnDefinition* New() const PROTOBUF_FINAL { return New(NULL); }

  ColumnDefinition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ColumnDefinition& from);
  void MergeFrom(const ColumnDefinition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ColumnDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ColumnDefinition_ColumnType ColumnType;
  static const ColumnType SCALAR =
    ColumnDefinition_ColumnType_SCALAR;
  static const ColumnType ENUM_NAME =
    ColumnDefinition_ColumnType_ENUM_NAME;
  static const ColumnType ENUM_VALUE =
    ColumnDefinition_ColumnType_ENUM_VALUE;
  static const ColumnType MESSAGE_KEY =
    ColumnDefinition_ColumnType_MESSAGE_KEY;
  static inline bool ColumnType_IsValid(int value) {
    return ColumnDefinition_ColumnType_IsValid(value);
  }
  static const ColumnType ColumnType_MIN =
    ColumnDefinition_ColumnType_ColumnType_MIN;
  static const ColumnType ColumnType_MAX =
    ColumnDefinition_ColumnType_ColumnType_MAX;
  static const int ColumnType_ARRAYSIZE =
    ColumnDefinition_ColumnType_ColumnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColumnType_descriptor() {
    return ColumnDefinition_ColumnType_descriptor();
  }
  static inline const ::std::string& ColumnType_Name(ColumnType value) {
    return ColumnDefinition_ColumnType_Name(value);
  }
  static inline bool ColumnType_Parse(const ::std::string& name,
      ColumnType* value) {
    return ColumnDefinition_ColumnType_Parse(name, value);
  }

  typedef ColumnDefinition_LinkerType LinkerType;
  static const LinkerType NONE =
    ColumnDefinition_LinkerType_NONE;
  static const LinkerType PARENT =
    ColumnDefinition_LinkerType_PARENT;
  static const LinkerType CHILD =
    ColumnDefinition_LinkerType_CHILD;
  static const LinkerType NEITHER =
    ColumnDefinition_LinkerType_NEITHER;
  static inline bool LinkerType_IsValid(int value) {
    return ColumnDefinition_LinkerType_IsValid(value);
  }
  static const LinkerType LinkerType_MIN =
    ColumnDefinition_LinkerType_LinkerType_MIN;
  static const LinkerType LinkerType_MAX =
    ColumnDefinition_LinkerType_LinkerType_MAX;
  static const int LinkerType_ARRAYSIZE =
    ColumnDefinition_LinkerType_LinkerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LinkerType_descriptor() {
    return ColumnDefinition_LinkerType_descriptor();
  }
  static inline const ::std::string& LinkerType_Name(LinkerType value) {
    return ColumnDefinition_LinkerType_Name(value);
  }
  static inline bool LinkerType_Parse(const ::std::string& name,
      LinkerType* value) {
    return ColumnDefinition_LinkerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string alias = 7;
  void clear_alias();
  static const int kAliasFieldNumber = 7;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string table_alias = 8;
  void clear_table_alias();
  static const int kTableAliasFieldNumber = 8;
  const ::std::string& table_alias() const;
  void set_table_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_table_alias(::std::string&& value);
  #endif
  void set_table_alias(const char* value);
  void set_table_alias(const char* value, size_t size);
  ::std::string* mutable_table_alias();
  ::std::string* release_table_alias();
  void set_allocated_table_alias(::std::string* table_alias);

  // string function_text = 10;
  void clear_function_text();
  static const int kFunctionTextFieldNumber = 10;
  const ::std::string& function_text() const;
  void set_function_text(const ::std::string& value);
  #if LANG_CXX11
  void set_function_text(::std::string&& value);
  #endif
  void set_function_text(const char* value);
  void set_function_text(const char* value, size_t size);
  ::std::string* mutable_function_text();
  ::std::string* release_function_text();
  void set_allocated_function_text(::std::string* function_text);

  // .org.yaorm.ProtobufType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::org::yaorm::ProtobufType type() const;
  void set_type(::org::yaorm::ProtobufType value);

  // bool is_key = 3;
  void clear_is_key();
  static const int kIsKeyFieldNumber = 3;
  bool is_key() const;
  void set_is_key(bool value);

  // .org.yaorm.ColumnDefinition.ColumnType column_type = 4;
  void clear_column_type();
  static const int kColumnTypeFieldNumber = 4;
  ::org::yaorm::ColumnDefinition_ColumnType column_type() const;
  void set_column_type(::org::yaorm::ColumnDefinition_ColumnType value);

  // .org.yaorm.ColumnDefinition.LinkerType linker_type = 5;
  void clear_linker_type();
  static const int kLinkerTypeFieldNumber = 5;
  ::org::yaorm::ColumnDefinition_LinkerType linker_type() const;
  void set_linker_type(::org::yaorm::ColumnDefinition_LinkerType value);

  // int32 order = 6;
  void clear_order();
  static const int kOrderFieldNumber = 6;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // .org.yaorm.SelectFunctionType function_type = 9;
  void clear_function_type();
  static const int kFunctionTypeFieldNumber = 9;
  ::org::yaorm::SelectFunctionType function_type() const;
  void set_function_type(::org::yaorm::SelectFunctionType value);

  // @@protoc_insertion_point(class_scope:org.yaorm.ColumnDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr table_alias_;
  ::google::protobuf::internal::ArenaStringPtr function_text_;
  int type_;
  bool is_key_;
  int column_type_;
  int linker_type_;
  ::google::protobuf::int32 order_;
  int function_type_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(Index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Index* other);
  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const PROTOBUF_FINAL { return New(NULL); }

  Index* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.ColumnDefinition column_names = 1;
  int column_names_size() const;
  void clear_column_names();
  static const int kColumnNamesFieldNumber = 1;
  const ::org::yaorm::ColumnDefinition& column_names(int index) const;
  ::org::yaorm::ColumnDefinition* mutable_column_names(int index);
  ::org::yaorm::ColumnDefinition* add_column_names();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
      mutable_column_names();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
      column_names() const;

  // repeated .org.yaorm.ColumnDefinition include_names = 2;
  int include_names_size() const;
  void clear_include_names();
  static const int kIncludeNamesFieldNumber = 2;
  const ::org::yaorm::ColumnDefinition& include_names(int index) const;
  ::org::yaorm::ColumnDefinition* mutable_include_names(int index);
  ::org::yaorm::ColumnDefinition* add_include_names();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
      mutable_include_names();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
      include_names() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.Index)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition > column_names_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition > include_names_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Difference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.Difference) */ {
 public:
  Difference();
  virtual ~Difference();

  Difference(const Difference& from);

  inline Difference& operator=(const Difference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Difference(Difference&& from) noexcept
    : Difference() {
    *this = ::std::move(from);
  }

  inline Difference& operator=(Difference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Difference& default_instance();

  static inline const Difference* internal_default_instance() {
    return reinterpret_cast<const Difference*>(
               &_Difference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Difference* other);
  friend void swap(Difference& a, Difference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Difference* New() const PROTOBUF_FINAL { return New(NULL); }

  Difference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Difference& from);
  void MergeFrom(const Difference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Difference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Difference_EntityType EntityType;
  static const EntityType INDEX =
    Difference_EntityType_INDEX;
  static const EntityType COLUMN =
    Difference_EntityType_COLUMN;
  static const EntityType TABLE =
    Difference_EntityType_TABLE;
  static inline bool EntityType_IsValid(int value) {
    return Difference_EntityType_IsValid(value);
  }
  static const EntityType EntityType_MIN =
    Difference_EntityType_EntityType_MIN;
  static const EntityType EntityType_MAX =
    Difference_EntityType_EntityType_MAX;
  static const int EntityType_ARRAYSIZE =
    Difference_EntityType_EntityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EntityType_descriptor() {
    return Difference_EntityType_descriptor();
  }
  static inline const ::std::string& EntityType_Name(EntityType value) {
    return Difference_EntityType_Name(value);
  }
  static inline bool EntityType_Parse(const ::std::string& name,
      EntityType* value) {
    return Difference_EntityType_Parse(name, value);
  }

  typedef Difference_Operation Operation;
  static const Operation CREATE =
    Difference_Operation_CREATE;
  static const Operation DROP =
    Difference_Operation_DROP;
  static inline bool Operation_IsValid(int value) {
    return Difference_Operation_IsValid(value);
  }
  static const Operation Operation_MIN =
    Difference_Operation_Operation_MIN;
  static const Operation Operation_MAX =
    Difference_Operation_Operation_MAX;
  static const int Operation_ARRAYSIZE =
    Difference_Operation_Operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operation_descriptor() {
    return Difference_Operation_descriptor();
  }
  static inline const ::std::string& Operation_Name(Operation value) {
    return Difference_Operation_Name(value);
  }
  static inline bool Operation_Parse(const ::std::string& name,
      Operation* value) {
    return Difference_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .org.yaorm.Index index = 4;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  const ::org::yaorm::Index& index() const;
  ::org::yaorm::Index* mutable_index();
  ::org::yaorm::Index* release_index();
  void set_allocated_index(::org::yaorm::Index* index);

  // .org.yaorm.ColumnDefinition property_definition = 5;
  bool has_property_definition() const;
  void clear_property_definition();
  static const int kPropertyDefinitionFieldNumber = 5;
  const ::org::yaorm::ColumnDefinition& property_definition() const;
  ::org::yaorm::ColumnDefinition* mutable_property_definition();
  ::org::yaorm::ColumnDefinition* release_property_definition();
  void set_allocated_property_definition(::org::yaorm::ColumnDefinition* property_definition);

  // .org.yaorm.TableDefinition table_definition = 6;
  bool has_table_definition() const;
  void clear_table_definition();
  static const int kTableDefinitionFieldNumber = 6;
  const ::org::yaorm::TableDefinition& table_definition() const;
  ::org::yaorm::TableDefinition* mutable_table_definition();
  ::org::yaorm::TableDefinition* release_table_definition();
  void set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition);

  // .org.yaorm.Difference.EntityType entity_type = 1;
  void clear_entity_type();
  static const int kEntityTypeFieldNumber = 1;
  ::org::yaorm::Difference_EntityType entity_type() const;
  void set_entity_type(::org::yaorm::Difference_EntityType value);

  // .org.yaorm.Difference.Operation operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  ::org::yaorm::Difference_Operation operation() const;
  void set_operation(::org::yaorm::Difference_Operation value);

  // @@protoc_insertion_point(class_scope:org.yaorm.Difference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::org::yaorm::Index* index_;
  ::org::yaorm::ColumnDefinition* property_definition_;
  ::org::yaorm::TableDefinition* table_definition_;
  int entity_type_;
  int operation_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.TableDefinition) */ {
 public:
  TableDefinition();
  virtual ~TableDefinition();

  TableDefinition(const TableDefinition& from);

  inline TableDefinition& operator=(const TableDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableDefinition(TableDefinition&& from) noexcept
    : TableDefinition() {
    *this = ::std::move(from);
  }

  inline TableDefinition& operator=(TableDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableDefinition& default_instance();

  static inline const TableDefinition* internal_default_instance() {
    return reinterpret_cast<const TableDefinition*>(
               &_TableDefinition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TableDefinition* other);
  friend void swap(TableDefinition& a, TableDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableDefinition* New() const PROTOBUF_FINAL { return New(NULL); }

  TableDefinition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableDefinition& from);
  void MergeFrom(const TableDefinition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TableDefinition_TableType TableType;
  static const TableType NORMAL =
    TableDefinition_TableType_NORMAL;
  static const TableType LINKER_MESSAGE =
    TableDefinition_TableType_LINKER_MESSAGE;
  static const TableType LINKER_ENUM =
    TableDefinition_TableType_LINKER_ENUM;
  static inline bool TableType_IsValid(int value) {
    return TableDefinition_TableType_IsValid(value);
  }
  static const TableType TableType_MIN =
    TableDefinition_TableType_TableType_MIN;
  static const TableType TableType_MAX =
    TableDefinition_TableType_TableType_MAX;
  static const int TableType_ARRAYSIZE =
    TableDefinition_TableType_TableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TableType_descriptor() {
    return TableDefinition_TableType_descriptor();
  }
  static inline const ::std::string& TableType_Name(TableType value) {
    return TableDefinition_TableType_Name(value);
  }
  static inline bool TableType_Parse(const ::std::string& name,
      TableType* value) {
    return TableDefinition_TableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.ColumnDefinition column_definitions = 2;
  int column_definitions_size() const;
  void clear_column_definitions();
  static const int kColumnDefinitionsFieldNumber = 2;
  const ::org::yaorm::ColumnDefinition& column_definitions(int index) const;
  ::org::yaorm::ColumnDefinition* mutable_column_definitions(int index);
  ::org::yaorm::ColumnDefinition* add_column_definitions();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
      mutable_column_definitions();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
      column_definitions() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string alias = 5;
  void clear_alias();
  static const int kAliasFieldNumber = 5;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // .org.yaorm.Index index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  const ::org::yaorm::Index& index() const;
  ::org::yaorm::Index* mutable_index();
  ::org::yaorm::Index* release_index();
  void set_allocated_index(::org::yaorm::Index* index);

  // .org.yaorm.TableDefinition.TableType table_type = 4;
  void clear_table_type();
  static const int kTableTypeFieldNumber = 4;
  ::org::yaorm::TableDefinition_TableType table_type() const;
  void set_table_type(::org::yaorm::TableDefinition_TableType value);

  // @@protoc_insertion_point(class_scope:org.yaorm.TableDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition > column_definitions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::org::yaorm::Index* index_;
  int table_type_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableDefinitions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.TableDefinitions) */ {
 public:
  TableDefinitions();
  virtual ~TableDefinitions();

  TableDefinitions(const TableDefinitions& from);

  inline TableDefinitions& operator=(const TableDefinitions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableDefinitions(TableDefinitions&& from) noexcept
    : TableDefinitions() {
    *this = ::std::move(from);
  }

  inline TableDefinitions& operator=(TableDefinitions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableDefinitions& default_instance();

  static inline const TableDefinitions* internal_default_instance() {
    return reinterpret_cast<const TableDefinitions*>(
               &_TableDefinitions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TableDefinitions* other);
  friend void swap(TableDefinitions& a, TableDefinitions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableDefinitions* New() const PROTOBUF_FINAL { return New(NULL); }

  TableDefinitions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableDefinitions& from);
  void MergeFrom(const TableDefinitions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableDefinitions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.TableDefinition table_definitions = 1;
  int table_definitions_size() const;
  void clear_table_definitions();
  static const int kTableDefinitionsFieldNumber = 1;
  const ::org::yaorm::TableDefinition& table_definitions(int index) const;
  ::org::yaorm::TableDefinition* mutable_table_definitions(int index);
  ::org::yaorm::TableDefinition* add_table_definitions();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinition >*
      mutable_table_definitions();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinition >&
      table_definitions() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.TableDefinitions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinition > table_definitions_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DifferenceReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.DifferenceReport) */ {
 public:
  DifferenceReport();
  virtual ~DifferenceReport();

  DifferenceReport(const DifferenceReport& from);

  inline DifferenceReport& operator=(const DifferenceReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DifferenceReport(DifferenceReport&& from) noexcept
    : DifferenceReport() {
    *this = ::std::move(from);
  }

  inline DifferenceReport& operator=(DifferenceReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DifferenceReport& default_instance();

  static inline const DifferenceReport* internal_default_instance() {
    return reinterpret_cast<const DifferenceReport*>(
               &_DifferenceReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DifferenceReport* other);
  friend void swap(DifferenceReport& a, DifferenceReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DifferenceReport* New() const PROTOBUF_FINAL { return New(NULL); }

  DifferenceReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DifferenceReport& from);
  void MergeFrom(const DifferenceReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DifferenceReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.Difference differences = 2;
  int differences_size() const;
  void clear_differences();
  static const int kDifferencesFieldNumber = 2;
  const ::org::yaorm::Difference& differences(int index) const;
  ::org::yaorm::Difference* mutable_differences(int index);
  ::org::yaorm::Difference* add_differences();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >*
      mutable_differences();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >&
      differences() const;

  // bool migration_exists = 1;
  void clear_migration_exists();
  static const int kMigrationExistsFieldNumber = 1;
  bool migration_exists() const;
  void set_migration_exists(bool value);

  // @@protoc_insertion_point(class_scope:org.yaorm.DifferenceReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference > differences_;
  bool migration_exists_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Column : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.Column) */ {
 public:
  Column();
  virtual ~Column();

  Column(const Column& from);

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Column& default_instance();

  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Column* other);
  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Column* New() const PROTOBUF_FINAL { return New(NULL); }

  Column* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Column* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string string_holder = 15;
  void clear_string_holder();
  static const int kStringHolderFieldNumber = 15;
  const ::std::string& string_holder() const;
  void set_string_holder(const ::std::string& value);
  #if LANG_CXX11
  void set_string_holder(::std::string&& value);
  #endif
  void set_string_holder(const char* value);
  void set_string_holder(const char* value, size_t size);
  ::std::string* mutable_string_holder();
  ::std::string* release_string_holder();
  void set_allocated_string_holder(::std::string* string_holder);

  // bytes bytes_holder = 16;
  void clear_bytes_holder();
  static const int kBytesHolderFieldNumber = 16;
  const ::std::string& bytes_holder() const;
  void set_bytes_holder(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_holder(::std::string&& value);
  #endif
  void set_bytes_holder(const char* value);
  void set_bytes_holder(const void* value, size_t size);
  ::std::string* mutable_bytes_holder();
  ::std::string* release_bytes_holder();
  void set_allocated_bytes_holder(::std::string* bytes_holder);

  // .org.yaorm.ColumnDefinition definition = 1;
  bool has_definition() const;
  void clear_definition();
  static const int kDefinitionFieldNumber = 1;
  const ::org::yaorm::ColumnDefinition& definition() const;
  ::org::yaorm::ColumnDefinition* mutable_definition();
  ::org::yaorm::ColumnDefinition* release_definition();
  void set_allocated_definition(::org::yaorm::ColumnDefinition* definition);

  // double double_holder = 2;
  void clear_double_holder();
  static const int kDoubleHolderFieldNumber = 2;
  double double_holder() const;
  void set_double_holder(double value);

  // float float_holder = 3;
  void clear_float_holder();
  static const int kFloatHolderFieldNumber = 3;
  float float_holder() const;
  void set_float_holder(float value);

  // int32 int32_holder = 4;
  void clear_int32_holder();
  static const int kInt32HolderFieldNumber = 4;
  ::google::protobuf::int32 int32_holder() const;
  void set_int32_holder(::google::protobuf::int32 value);

  // int64 int64_holder = 5;
  void clear_int64_holder();
  static const int kInt64HolderFieldNumber = 5;
  ::google::protobuf::int64 int64_holder() const;
  void set_int64_holder(::google::protobuf::int64 value);

  // uint64 uint64_holder = 7;
  void clear_uint64_holder();
  static const int kUint64HolderFieldNumber = 7;
  ::google::protobuf::uint64 uint64_holder() const;
  void set_uint64_holder(::google::protobuf::uint64 value);

  // uint32 uint32_holder = 6;
  void clear_uint32_holder();
  static const int kUint32HolderFieldNumber = 6;
  ::google::protobuf::uint32 uint32_holder() const;
  void set_uint32_holder(::google::protobuf::uint32 value);

  // sint32 sint32_holder = 8;
  void clear_sint32_holder();
  static const int kSint32HolderFieldNumber = 8;
  ::google::protobuf::int32 sint32_holder() const;
  void set_sint32_holder(::google::protobuf::int32 value);

  // sint64 sint64_holder = 9;
  void clear_sint64_holder();
  static const int kSint64HolderFieldNumber = 9;
  ::google::protobuf::int64 sint64_holder() const;
  void set_sint64_holder(::google::protobuf::int64 value);

  // fixed64 fixed64_holder = 11;
  void clear_fixed64_holder();
  static const int kFixed64HolderFieldNumber = 11;
  ::google::protobuf::uint64 fixed64_holder() const;
  void set_fixed64_holder(::google::protobuf::uint64 value);

  // fixed32 fixed32_holder = 10;
  void clear_fixed32_holder();
  static const int kFixed32HolderFieldNumber = 10;
  ::google::protobuf::uint32 fixed32_holder() const;
  void set_fixed32_holder(::google::protobuf::uint32 value);

  // sfixed32 sfixed32_holder = 12;
  void clear_sfixed32_holder();
  static const int kSfixed32HolderFieldNumber = 12;
  ::google::protobuf::int32 sfixed32_holder() const;
  void set_sfixed32_holder(::google::protobuf::int32 value);

  // sfixed64 sfixed64_holder = 13;
  void clear_sfixed64_holder();
  static const int kSfixed64HolderFieldNumber = 13;
  ::google::protobuf::int64 sfixed64_holder() const;
  void set_sfixed64_holder(::google::protobuf::int64 value);

  // bool bool_holder = 14;
  void clear_bool_holder();
  static const int kBoolHolderFieldNumber = 14;
  bool bool_holder() const;
  void set_bool_holder(bool value);

  // @@protoc_insertion_point(class_scope:org.yaorm.Column)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr string_holder_;
  ::google::protobuf::internal::ArenaStringPtr bytes_holder_;
  ::org::yaorm::ColumnDefinition* definition_;
  double double_holder_;
  float float_holder_;
  ::google::protobuf::int32 int32_holder_;
  ::google::protobuf::int64 int64_holder_;
  ::google::protobuf::uint64 uint64_holder_;
  ::google::protobuf::uint32 uint32_holder_;
  ::google::protobuf::int32 sint32_holder_;
  ::google::protobuf::int64 sint64_holder_;
  ::google::protobuf::uint64 fixed64_holder_;
  ::google::protobuf::uint32 fixed32_holder_;
  ::google::protobuf::int32 sfixed32_holder_;
  ::google::protobuf::int64 sfixed64_holder_;
  bool bool_holder_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Record* other);
  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const PROTOBUF_FINAL { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.Column columns = 1;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 1;
  const ::org::yaorm::Column& columns(int index) const;
  ::org::yaorm::Column* mutable_columns(int index);
  ::org::yaorm::Column* add_columns();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Column >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Column >&
      columns() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.Record)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Column > columns_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Records : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.Records) */ {
 public:
  Records();
  virtual ~Records();

  Records(const Records& from);

  inline Records& operator=(const Records& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Records(Records&& from) noexcept
    : Records() {
    *this = ::std::move(from);
  }

  inline Records& operator=(Records&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Records& default_instance();

  static inline const Records* internal_default_instance() {
    return reinterpret_cast<const Records*>(
               &_Records_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Records* other);
  friend void swap(Records& a, Records& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Records* New() const PROTOBUF_FINAL { return New(NULL); }

  Records* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Records& from);
  void MergeFrom(const Records& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Records* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.Record records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::org::yaorm::Record& records(int index) const;
  ::org::yaorm::Record* mutable_records(int index);
  ::org::yaorm::Record* add_records();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >&
      records() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.Records)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record > records_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableRecords : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.TableRecords) */ {
 public:
  TableRecords();
  virtual ~TableRecords();

  TableRecords(const TableRecords& from);

  inline TableRecords& operator=(const TableRecords& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableRecords(TableRecords&& from) noexcept
    : TableRecords() {
    *this = ::std::move(from);
  }

  inline TableRecords& operator=(TableRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableRecords& default_instance();

  static inline const TableRecords* internal_default_instance() {
    return reinterpret_cast<const TableRecords*>(
               &_TableRecords_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TableRecords* other);
  friend void swap(TableRecords& a, TableRecords& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableRecords* New() const PROTOBUF_FINAL { return New(NULL); }

  TableRecords* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableRecords& from);
  void MergeFrom(const TableRecords& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableRecords* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table_name = 3;
  void clear_table_name();
  static const int kTableNameFieldNumber = 3;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // .org.yaorm.TableDefinition table_definition = 1;
  bool has_table_definition() const;
  void clear_table_definition();
  static const int kTableDefinitionFieldNumber = 1;
  const ::org::yaorm::TableDefinition& table_definition() const;
  ::org::yaorm::TableDefinition* mutable_table_definition();
  ::org::yaorm::TableDefinition* release_table_definition();
  void set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition);

  // .org.yaorm.Records records = 2;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 2;
  const ::org::yaorm::Records& records() const;
  ::org::yaorm::Records* mutable_records();
  ::org::yaorm::Records* release_records();
  void set_allocated_records(::org::yaorm::Records* records);

  // @@protoc_insertion_point(class_scope:org.yaorm.TableRecords)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::org::yaorm::TableDefinition* table_definition_;
  ::org::yaorm::Records* records_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllTableRecords : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.AllTableRecords) */ {
 public:
  AllTableRecords();
  virtual ~AllTableRecords();

  AllTableRecords(const AllTableRecords& from);

  inline AllTableRecords& operator=(const AllTableRecords& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllTableRecords(AllTableRecords&& from) noexcept
    : AllTableRecords() {
    *this = ::std::move(from);
  }

  inline AllTableRecords& operator=(AllTableRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllTableRecords& default_instance();

  static inline const AllTableRecords* internal_default_instance() {
    return reinterpret_cast<const AllTableRecords*>(
               &_AllTableRecords_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(AllTableRecords* other);
  friend void swap(AllTableRecords& a, AllTableRecords& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllTableRecords* New() const PROTOBUF_FINAL { return New(NULL); }

  AllTableRecords* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllTableRecords& from);
  void MergeFrom(const AllTableRecords& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllTableRecords* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.TableRecords table_records = 1;
  int table_records_size() const;
  void clear_table_records();
  static const int kTableRecordsFieldNumber = 1;
  const ::org::yaorm::TableRecords& table_records(int index) const;
  ::org::yaorm::TableRecords* mutable_table_records(int index);
  ::org::yaorm::TableRecords* add_table_records();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableRecords >*
      mutable_table_records();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableRecords >&
      table_records() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.AllTableRecords)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableRecords > table_records_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatabaseOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.DatabaseOperation) */ {
 public:
  DatabaseOperation();
  virtual ~DatabaseOperation();

  DatabaseOperation(const DatabaseOperation& from);

  inline DatabaseOperation& operator=(const DatabaseOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseOperation(DatabaseOperation&& from) noexcept
    : DatabaseOperation() {
    *this = ::std::move(from);
  }

  inline DatabaseOperation& operator=(DatabaseOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseOperation& default_instance();

  static inline const DatabaseOperation* internal_default_instance() {
    return reinterpret_cast<const DatabaseOperation*>(
               &_DatabaseOperation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DatabaseOperation* other);
  friend void swap(DatabaseOperation& a, DatabaseOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseOperation* New() const PROTOBUF_FINAL { return New(NULL); }

  DatabaseOperation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatabaseOperation& from);
  void MergeFrom(const DatabaseOperation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatabaseOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DatabaseOperation_DatabaseOperationType DatabaseOperationType;
  static const DatabaseOperationType CREATE_TABLE =
    DatabaseOperation_DatabaseOperationType_CREATE_TABLE;
  static const DatabaseOperationType DROP_TABLE =
    DatabaseOperation_DatabaseOperationType_DROP_TABLE;
  static const DatabaseOperationType CREATE_INDEX =
    DatabaseOperation_DatabaseOperationType_CREATE_INDEX;
  static const DatabaseOperationType DROP_INDEX =
    DatabaseOperation_DatabaseOperationType_DROP_INDEX;
  static const DatabaseOperationType CREATE_COLUMN =
    DatabaseOperation_DatabaseOperationType_CREATE_COLUMN;
  static const DatabaseOperationType DROP_COLUMN =
    DatabaseOperation_DatabaseOperationType_DROP_COLUMN;
  static const DatabaseOperationType GET_COUNT =
    DatabaseOperation_DatabaseOperationType_GET_COUNT;
  static const DatabaseOperationType GET_CUSTOM =
    DatabaseOperation_DatabaseOperationType_GET_CUSTOM;
  static const DatabaseOperationType GET =
    DatabaseOperation_DatabaseOperationType_GET;
  static const DatabaseOperationType GET_MANY =
    DatabaseOperation_DatabaseOperationType_GET_MANY;
  static const DatabaseOperationType GET_WHERE =
    DatabaseOperation_DatabaseOperationType_GET_WHERE;
  static const DatabaseOperationType BULK_INSERT =
    DatabaseOperation_DatabaseOperationType_BULK_INSERT;
  static const DatabaseOperationType CREATE_OR_UPDATE =
    DatabaseOperation_DatabaseOperationType_CREATE_OR_UPDATE;
  static const DatabaseOperationType CREATE =
    DatabaseOperation_DatabaseOperationType_CREATE;
  static const DatabaseOperationType UPDATE =
    DatabaseOperation_DatabaseOperationType_UPDATE;
  static const DatabaseOperationType UPDATE_WITH_CRITERIA =
    DatabaseOperation_DatabaseOperationType_UPDATE_WITH_CRITERIA;
  static const DatabaseOperationType UPDATE_CUSTOM =
    DatabaseOperation_DatabaseOperationType_UPDATE_CUSTOM;
  static const DatabaseOperationType DELETE =
    DatabaseOperation_DatabaseOperationType_DELETE;
  static const DatabaseOperationType DELETE_ALL =
    DatabaseOperation_DatabaseOperationType_DELETE_ALL;
  static inline bool DatabaseOperationType_IsValid(int value) {
    return DatabaseOperation_DatabaseOperationType_IsValid(value);
  }
  static const DatabaseOperationType DatabaseOperationType_MIN =
    DatabaseOperation_DatabaseOperationType_DatabaseOperationType_MIN;
  static const DatabaseOperationType DatabaseOperationType_MAX =
    DatabaseOperation_DatabaseOperationType_DatabaseOperationType_MAX;
  static const int DatabaseOperationType_ARRAYSIZE =
    DatabaseOperation_DatabaseOperationType_DatabaseOperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DatabaseOperationType_descriptor() {
    return DatabaseOperation_DatabaseOperationType_descriptor();
  }
  static inline const ::std::string& DatabaseOperationType_Name(DatabaseOperationType value) {
    return DatabaseOperation_DatabaseOperationType_Name(value);
  }
  static inline bool DatabaseOperationType_Parse(const ::std::string& name,
      DatabaseOperationType* value) {
    return DatabaseOperation_DatabaseOperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .org.yaorm.TableDefinition table_definition = 1;
  bool has_table_definition() const;
  void clear_table_definition();
  static const int kTableDefinitionFieldNumber = 1;
  const ::org::yaorm::TableDefinition& table_definition() const;
  ::org::yaorm::TableDefinition* mutable_table_definition();
  ::org::yaorm::TableDefinition* release_table_definition();
  void set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition);

  // .org.yaorm.Records records = 2;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 2;
  const ::org::yaorm::Records& records() const;
  ::org::yaorm::Records* mutable_records();
  ::org::yaorm::Records* release_records();
  void set_allocated_records(::org::yaorm::Records* records);

  // .org.yaorm.Index index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  const ::org::yaorm::Index& index() const;
  ::org::yaorm::Index* mutable_index();
  ::org::yaorm::Index* release_index();
  void set_allocated_index(::org::yaorm::Index* index);

  // .org.yaorm.ColumnDefinition column_definition = 4;
  bool has_column_definition() const;
  void clear_column_definition();
  static const int kColumnDefinitionFieldNumber = 4;
  const ::org::yaorm::ColumnDefinition& column_definition() const;
  ::org::yaorm::ColumnDefinition* mutable_column_definition();
  ::org::yaorm::ColumnDefinition* release_column_definition();
  void set_allocated_column_definition(::org::yaorm::ColumnDefinition* column_definition);

  // .org.yaorm.WhereClause where_clause = 5;
  bool has_where_clause() const;
  void clear_where_clause();
  static const int kWhereClauseFieldNumber = 5;
  const ::org::yaorm::WhereClause& where_clause() const;
  ::org::yaorm::WhereClause* mutable_where_clause();
  ::org::yaorm::WhereClause* release_where_clause();
  void set_allocated_where_clause(::org::yaorm::WhereClause* where_clause);

  // .org.yaorm.DatabaseOperation.DatabaseOperationType database_operation_type = 6;
  void clear_database_operation_type();
  static const int kDatabaseOperationTypeFieldNumber = 6;
  ::org::yaorm::DatabaseOperation_DatabaseOperationType database_operation_type() const;
  void set_database_operation_type(::org::yaorm::DatabaseOperation_DatabaseOperationType value);

  // @@protoc_insertion_point(class_scope:org.yaorm.DatabaseOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::yaorm::TableDefinition* table_definition_;
  ::org::yaorm::Records* records_;
  ::org::yaorm::Index* index_;
  ::org::yaorm::ColumnDefinition* column_definition_;
  ::org::yaorm::WhereClause* where_clause_;
  int database_operation_type_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatabaseOperationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.DatabaseOperationResult) */ {
 public:
  DatabaseOperationResult();
  virtual ~DatabaseOperationResult();

  DatabaseOperationResult(const DatabaseOperationResult& from);

  inline DatabaseOperationResult& operator=(const DatabaseOperationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseOperationResult(DatabaseOperationResult&& from) noexcept
    : DatabaseOperationResult() {
    *this = ::std::move(from);
  }

  inline DatabaseOperationResult& operator=(DatabaseOperationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseOperationResult& default_instance();

  static inline const DatabaseOperationResult* internal_default_instance() {
    return reinterpret_cast<const DatabaseOperationResult*>(
               &_DatabaseOperationResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(DatabaseOperationResult* other);
  friend void swap(DatabaseOperationResult& a, DatabaseOperationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseOperationResult* New() const PROTOBUF_FINAL { return New(NULL); }

  DatabaseOperationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatabaseOperationResult& from);
  void MergeFrom(const DatabaseOperationResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatabaseOperationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 5;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 5;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // .org.yaorm.Record record_result = 3;
  bool has_record_result() const;
  void clear_record_result();
  static const int kRecordResultFieldNumber = 3;
  const ::org::yaorm::Record& record_result() const;
  ::org::yaorm::Record* mutable_record_result();
  ::org::yaorm::Record* release_record_result();
  void set_allocated_record_result(::org::yaorm::Record* record_result);

  // .org.yaorm.Records records_result = 4;
  bool has_records_result() const;
  void clear_records_result();
  static const int kRecordsResultFieldNumber = 4;
  const ::org::yaorm::Records& records_result() const;
  ::org::yaorm::Records* mutable_records_result();
  ::org::yaorm::Records* release_records_result();
  void set_allocated_records_result(::org::yaorm::Records* records_result);

  // .org.yaorm.DatabaseOperation database_operation = 6;
  bool has_database_operation() const;
  void clear_database_operation();
  static const int kDatabaseOperationFieldNumber = 6;
  const ::org::yaorm::DatabaseOperation& database_operation() const;
  ::org::yaorm::DatabaseOperation* mutable_database_operation();
  ::org::yaorm::DatabaseOperation* release_database_operation();
  void set_allocated_database_operation(::org::yaorm::DatabaseOperation* database_operation);

  // int64 count_result = 2;
  void clear_count_result();
  static const int kCountResultFieldNumber = 2;
  ::google::protobuf::int64 count_result() const;
  void set_count_result(::google::protobuf::int64 value);

  // bool bool_result = 1;
  void clear_bool_result();
  static const int kBoolResultFieldNumber = 1;
  bool bool_result() const;
  void set_bool_result(bool value);

  // @@protoc_insertion_point(class_scope:org.yaorm.DatabaseOperationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::org::yaorm::Record* record_result_;
  ::org::yaorm::Records* records_result_;
  ::org::yaorm::DatabaseOperation* database_operation_;
  ::google::protobuf::int64 count_result_;
  bool bool_result_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatabaseDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.DatabaseDefinition) */ {
 public:
  DatabaseDefinition();
  virtual ~DatabaseDefinition();

  DatabaseDefinition(const DatabaseDefinition& from);

  inline DatabaseDefinition& operator=(const DatabaseDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseDefinition(DatabaseDefinition&& from) noexcept
    : DatabaseDefinition() {
    *this = ::std::move(from);
  }

  inline DatabaseDefinition& operator=(DatabaseDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseDefinition& default_instance();

  static inline const DatabaseDefinition* internal_default_instance() {
    return reinterpret_cast<const DatabaseDefinition*>(
               &_DatabaseDefinition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(DatabaseDefinition* other);
  friend void swap(DatabaseDefinition& a, DatabaseDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseDefinition* New() const PROTOBUF_FINAL { return New(NULL); }

  DatabaseDefinition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatabaseDefinition& from);
  void MergeFrom(const DatabaseDefinition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatabaseDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.TableDefinitionGraphs table_definition_graphs = 4;
  int table_definition_graphs_size() const;
  void clear_table_definition_graphs();
  static const int kTableDefinitionGraphsFieldNumber = 4;
  const ::org::yaorm::TableDefinitionGraphs& table_definition_graphs(int index) const;
  ::org::yaorm::TableDefinitionGraphs* mutable_table_definition_graphs(int index);
  ::org::yaorm::TableDefinitionGraphs* add_table_definition_graphs();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraphs >*
      mutable_table_definition_graphs();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraphs >&
      table_definition_graphs() const;

  // string schema = 1;
  void clear_schema();
  static const int kSchemaFieldNumber = 1;
  const ::std::string& schema() const;
  void set_schema(const ::std::string& value);
  #if LANG_CXX11
  void set_schema(::std::string&& value);
  #endif
  void set_schema(const char* value);
  void set_schema(const char* value, size_t size);
  ::std::string* mutable_schema();
  ::std::string* release_schema();
  void set_allocated_schema(::std::string* schema);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .org.yaorm.TableDefinitions table_definitions = 3;
  bool has_table_definitions() const;
  void clear_table_definitions();
  static const int kTableDefinitionsFieldNumber = 3;
  const ::org::yaorm::TableDefinitions& table_definitions() const;
  ::org::yaorm::TableDefinitions* mutable_table_definitions();
  ::org::yaorm::TableDefinitions* release_table_definitions();
  void set_allocated_table_definitions(::org::yaorm::TableDefinitions* table_definitions);

  // @@protoc_insertion_point(class_scope:org.yaorm.DatabaseDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraphs > table_definition_graphs_;
  ::google::protobuf::internal::ArenaStringPtr schema_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::org::yaorm::TableDefinitions* table_definitions_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableDefinitionGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.TableDefinitionGraph) */ {
 public:
  TableDefinitionGraph();
  virtual ~TableDefinitionGraph();

  TableDefinitionGraph(const TableDefinitionGraph& from);

  inline TableDefinitionGraph& operator=(const TableDefinitionGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableDefinitionGraph(TableDefinitionGraph&& from) noexcept
    : TableDefinitionGraph() {
    *this = ::std::move(from);
  }

  inline TableDefinitionGraph& operator=(TableDefinitionGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableDefinitionGraph& default_instance();

  static inline const TableDefinitionGraph* internal_default_instance() {
    return reinterpret_cast<const TableDefinitionGraph*>(
               &_TableDefinitionGraph_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(TableDefinitionGraph* other);
  friend void swap(TableDefinitionGraph& a, TableDefinitionGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableDefinitionGraph* New() const PROTOBUF_FINAL { return New(NULL); }

  TableDefinitionGraph* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableDefinitionGraph& from);
  void MergeFrom(const TableDefinitionGraph& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableDefinitionGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TableDefinitionGraph_TableDefinitionGraphType TableDefinitionGraphType;
  static const TableDefinitionGraphType ENUM_TYPE =
    TableDefinitionGraph_TableDefinitionGraphType_ENUM_TYPE;
  static const TableDefinitionGraphType MESSAGE_TYPE =
    TableDefinitionGraph_TableDefinitionGraphType_MESSAGE_TYPE;
  static inline bool TableDefinitionGraphType_IsValid(int value) {
    return TableDefinitionGraph_TableDefinitionGraphType_IsValid(value);
  }
  static const TableDefinitionGraphType TableDefinitionGraphType_MIN =
    TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraphType_MIN;
  static const TableDefinitionGraphType TableDefinitionGraphType_MAX =
    TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraphType_MAX;
  static const int TableDefinitionGraphType_ARRAYSIZE =
    TableDefinitionGraph_TableDefinitionGraphType_TableDefinitionGraphType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TableDefinitionGraphType_descriptor() {
    return TableDefinitionGraph_TableDefinitionGraphType_descriptor();
  }
  static inline const ::std::string& TableDefinitionGraphType_Name(TableDefinitionGraphType value) {
    return TableDefinitionGraph_TableDefinitionGraphType_Name(value);
  }
  static inline bool TableDefinitionGraphType_Parse(const ::std::string& name,
      TableDefinitionGraphType* value) {
    return TableDefinitionGraph_TableDefinitionGraphType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string main_name = 5;
  void clear_main_name();
  static const int kMainNameFieldNumber = 5;
  const ::std::string& main_name() const;
  void set_main_name(const ::std::string& value);
  #if LANG_CXX11
  void set_main_name(::std::string&& value);
  #endif
  void set_main_name(const char* value);
  void set_main_name(const char* value, size_t size);
  ::std::string* mutable_main_name();
  ::std::string* release_main_name();
  void set_allocated_main_name(::std::string* main_name);

  // string other_name = 6;
  void clear_other_name();
  static const int kOtherNameFieldNumber = 6;
  const ::std::string& other_name() const;
  void set_other_name(const ::std::string& value);
  #if LANG_CXX11
  void set_other_name(::std::string&& value);
  #endif
  void set_other_name(const char* value);
  void set_other_name(const char* value, size_t size);
  ::std::string* mutable_other_name();
  ::std::string* release_other_name();
  void set_allocated_other_name(::std::string* other_name);

  // string column_name = 7;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 7;
  const ::std::string& column_name() const;
  void set_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_column_name(::std::string&& value);
  #endif
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  ::std::string* mutable_column_name();
  ::std::string* release_column_name();
  void set_allocated_column_name(::std::string* column_name);

  // .org.yaorm.TableDefinition main_table_definition = 1;
  bool has_main_table_definition() const;
  void clear_main_table_definition();
  static const int kMainTableDefinitionFieldNumber = 1;
  const ::org::yaorm::TableDefinition& main_table_definition() const;
  ::org::yaorm::TableDefinition* mutable_main_table_definition();
  ::org::yaorm::TableDefinition* release_main_table_definition();
  void set_allocated_main_table_definition(::org::yaorm::TableDefinition* main_table_definition);

  // .org.yaorm.TableDefinition other_table_definition = 2;
  bool has_other_table_definition() const;
  void clear_other_table_definition();
  static const int kOtherTableDefinitionFieldNumber = 2;
  const ::org::yaorm::TableDefinition& other_table_definition() const;
  ::org::yaorm::TableDefinition* mutable_other_table_definition();
  ::org::yaorm::TableDefinition* release_other_table_definition();
  void set_allocated_other_table_definition(::org::yaorm::TableDefinition* other_table_definition);

  // .org.yaorm.TableDefinition linker_table_table = 3;
  bool has_linker_table_table() const;
  void clear_linker_table_table();
  static const int kLinkerTableTableFieldNumber = 3;
  const ::org::yaorm::TableDefinition& linker_table_table() const;
  ::org::yaorm::TableDefinition* mutable_linker_table_table();
  ::org::yaorm::TableDefinition* release_linker_table_table();
  void set_allocated_linker_table_table(::org::yaorm::TableDefinition* linker_table_table);

  // .org.yaorm.TableDefinitionGraph.TableDefinitionGraphType definition_graph_type = 4;
  void clear_definition_graph_type();
  static const int kDefinitionGraphTypeFieldNumber = 4;
  ::org::yaorm::TableDefinitionGraph_TableDefinitionGraphType definition_graph_type() const;
  void set_definition_graph_type(::org::yaorm::TableDefinitionGraph_TableDefinitionGraphType value);

  // @@protoc_insertion_point(class_scope:org.yaorm.TableDefinitionGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr main_name_;
  ::google::protobuf::internal::ArenaStringPtr other_name_;
  ::google::protobuf::internal::ArenaStringPtr column_name_;
  ::org::yaorm::TableDefinition* main_table_definition_;
  ::org::yaorm::TableDefinition* other_table_definition_;
  ::org::yaorm::TableDefinition* linker_table_table_;
  int definition_graph_type_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableDefinitionGraphs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.TableDefinitionGraphs) */ {
 public:
  TableDefinitionGraphs();
  virtual ~TableDefinitionGraphs();

  TableDefinitionGraphs(const TableDefinitionGraphs& from);

  inline TableDefinitionGraphs& operator=(const TableDefinitionGraphs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableDefinitionGraphs(TableDefinitionGraphs&& from) noexcept
    : TableDefinitionGraphs() {
    *this = ::std::move(from);
  }

  inline TableDefinitionGraphs& operator=(TableDefinitionGraphs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableDefinitionGraphs& default_instance();

  static inline const TableDefinitionGraphs* internal_default_instance() {
    return reinterpret_cast<const TableDefinitionGraphs*>(
               &_TableDefinitionGraphs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(TableDefinitionGraphs* other);
  friend void swap(TableDefinitionGraphs& a, TableDefinitionGraphs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableDefinitionGraphs* New() const PROTOBUF_FINAL { return New(NULL); }

  TableDefinitionGraphs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableDefinitionGraphs& from);
  void MergeFrom(const TableDefinitionGraphs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableDefinitionGraphs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.TableDefinitionGraph table_definition_graphs = 2;
  int table_definition_graphs_size() const;
  void clear_table_definition_graphs();
  static const int kTableDefinitionGraphsFieldNumber = 2;
  const ::org::yaorm::TableDefinitionGraph& table_definition_graphs(int index) const;
  ::org::yaorm::TableDefinitionGraph* mutable_table_definition_graphs(int index);
  ::org::yaorm::TableDefinitionGraph* add_table_definition_graphs();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraph >*
      mutable_table_definition_graphs();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraph >&
      table_definition_graphs() const;

  // .org.yaorm.TableDefinition main_table_definition = 1;
  bool has_main_table_definition() const;
  void clear_main_table_definition();
  static const int kMainTableDefinitionFieldNumber = 1;
  const ::org::yaorm::TableDefinition& main_table_definition() const;
  ::org::yaorm::TableDefinition* mutable_main_table_definition();
  ::org::yaorm::TableDefinition* release_main_table_definition();
  void set_allocated_main_table_definition(::org::yaorm::TableDefinition* main_table_definition);

  // @@protoc_insertion_point(class_scope:org.yaorm.TableDefinitionGraphs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraph > table_definition_graphs_;
  ::org::yaorm::TableDefinition* main_table_definition_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.ConnectionInfo) */ {
 public:
  ConnectionInfo();
  virtual ~ConnectionInfo();

  ConnectionInfo(const ConnectionInfo& from);

  inline ConnectionInfo& operator=(const ConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionInfo(ConnectionInfo&& from) noexcept
    : ConnectionInfo() {
    *this = ::std::move(from);
  }

  inline ConnectionInfo& operator=(ConnectionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionInfo& default_instance();

  static inline const ConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectionInfo*>(
               &_ConnectionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ConnectionInfo* other);
  friend void swap(ConnectionInfo& a, ConnectionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectionInfo& from);
  void MergeFrom(const ConnectionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string user = 2;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string schema = 4;
  void clear_schema();
  static const int kSchemaFieldNumber = 4;
  const ::std::string& schema() const;
  void set_schema(const ::std::string& value);
  #if LANG_CXX11
  void set_schema(::std::string&& value);
  #endif
  void set_schema(const char* value);
  void set_schema(const char* value, size_t size);
  ::std::string* mutable_schema();
  ::std::string* release_schema();
  void set_allocated_schema(::std::string* schema);

  // bool should_create_schema = 5;
  void clear_should_create_schema();
  static const int kShouldCreateSchemaFieldNumber = 5;
  bool should_create_schema() const;
  void set_should_create_schema(bool value);

  // int32 port = 6;
  void clear_port();
  static const int kPortFieldNumber = 6;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.yaorm.ConnectionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr schema_;
  bool should_create_schema_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Migration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.Migration) */ {
 public:
  Migration();
  virtual ~Migration();

  Migration(const Migration& from);

  inline Migration& operator=(const Migration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Migration(Migration&& from) noexcept
    : Migration() {
    *this = ::std::move(from);
  }

  inline Migration& operator=(Migration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Migration& default_instance();

  static inline const Migration* internal_default_instance() {
    return reinterpret_cast<const Migration*>(
               &_Migration_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Migration* other);
  friend void swap(Migration& a, Migration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Migration* New() const PROTOBUF_FINAL { return New(NULL); }

  Migration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Migration& from);
  void MergeFrom(const Migration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Migration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string context_name = 2;
  void clear_context_name();
  static const int kContextNameFieldNumber = 2;
  const ::std::string& context_name() const;
  void set_context_name(const ::std::string& value);
  #if LANG_CXX11
  void set_context_name(::std::string&& value);
  #endif
  void set_context_name(const char* value);
  void set_context_name(const char* value, size_t size);
  ::std::string* mutable_context_name();
  ::std::string* release_context_name();
  void set_allocated_context_name(::std::string* context_name);

  // string model_definition_base64 = 3;
  void clear_model_definition_base64();
  static const int kModelDefinitionBase64FieldNumber = 3;
  const ::std::string& model_definition_base64() const;
  void set_model_definition_base64(const ::std::string& value);
  #if LANG_CXX11
  void set_model_definition_base64(::std::string&& value);
  #endif
  void set_model_definition_base64(const char* value);
  void set_model_definition_base64(const char* value, size_t size);
  ::std::string* mutable_model_definition_base64();
  ::std::string* release_model_definition_base64();
  void set_allocated_model_definition_base64(::std::string* model_definition_base64);

  // int64 insert_date = 4;
  void clear_insert_date();
  static const int kInsertDateFieldNumber = 4;
  ::google::protobuf::int64 insert_date() const;
  void set_insert_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.yaorm.Migration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr context_name_;
  ::google::protobuf::internal::ArenaStringPtr model_definition_base64_;
  ::google::protobuf::int64 insert_date_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatabaseExecution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.DatabaseExecution) */ {
 public:
  DatabaseExecution();
  virtual ~DatabaseExecution();

  DatabaseExecution(const DatabaseExecution& from);

  inline DatabaseExecution& operator=(const DatabaseExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseExecution(DatabaseExecution&& from) noexcept
    : DatabaseExecution() {
    *this = ::std::move(from);
  }

  inline DatabaseExecution& operator=(DatabaseExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseExecution& default_instance();

  static inline const DatabaseExecution* internal_default_instance() {
    return reinterpret_cast<const DatabaseExecution*>(
               &_DatabaseExecution_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(DatabaseExecution* other);
  friend void swap(DatabaseExecution& a, DatabaseExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseExecution* New() const PROTOBUF_FINAL { return New(NULL); }

  DatabaseExecution* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatabaseExecution& from);
  void MergeFrom(const DatabaseExecution& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatabaseExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string raw_sql = 1;
  void clear_raw_sql();
  static const int kRawSqlFieldNumber = 1;
  const ::std::string& raw_sql() const;
  void set_raw_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_sql(::std::string&& value);
  #endif
  void set_raw_sql(const char* value);
  void set_raw_sql(const char* value, size_t size);
  ::std::string* mutable_raw_sql();
  ::std::string* release_raw_sql();
  void set_allocated_raw_sql(::std::string* raw_sql);

  // int64 time_called = 2;
  void clear_time_called();
  static const int kTimeCalledFieldNumber = 2;
  ::google::protobuf::int64 time_called() const;
  void set_time_called(::google::protobuf::int64 value);

  // int64 order_called = 4;
  void clear_order_called();
  static const int kOrderCalledFieldNumber = 4;
  ::google::protobuf::int64 order_called() const;
  void set_order_called(::google::protobuf::int64 value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:org.yaorm.DatabaseExecution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_sql_;
  ::google::protobuf::int64 time_called_;
  ::google::protobuf::int64 order_called_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatabaseExecutionReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.DatabaseExecutionReport) */ {
 public:
  DatabaseExecutionReport();
  virtual ~DatabaseExecutionReport();

  DatabaseExecutionReport(const DatabaseExecutionReport& from);

  inline DatabaseExecutionReport& operator=(const DatabaseExecutionReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseExecutionReport(DatabaseExecutionReport&& from) noexcept
    : DatabaseExecutionReport() {
    *this = ::std::move(from);
  }

  inline DatabaseExecutionReport& operator=(DatabaseExecutionReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseExecutionReport& default_instance();

  static inline const DatabaseExecutionReport* internal_default_instance() {
    return reinterpret_cast<const DatabaseExecutionReport*>(
               &_DatabaseExecutionReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(DatabaseExecutionReport* other);
  friend void swap(DatabaseExecutionReport& a, DatabaseExecutionReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseExecutionReport* New() const PROTOBUF_FINAL { return New(NULL); }

  DatabaseExecutionReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatabaseExecutionReport& from);
  void MergeFrom(const DatabaseExecutionReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatabaseExecutionReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.DatabaseExecution executions = 2;
  int executions_size() const;
  void clear_executions();
  static const int kExecutionsFieldNumber = 2;
  const ::org::yaorm::DatabaseExecution& executions(int index) const;
  ::org::yaorm::DatabaseExecution* mutable_executions(int index);
  ::org::yaorm::DatabaseExecution* add_executions();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::DatabaseExecution >*
      mutable_executions();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::DatabaseExecution >&
      executions() const;

  // int64 calls_to_database = 1;
  void clear_calls_to_database();
  static const int kCallsToDatabaseFieldNumber = 1;
  ::google::protobuf::int64 calls_to_database() const;
  void set_calls_to_database(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.yaorm.DatabaseExecutionReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::DatabaseExecution > executions_;
  ::google::protobuf::int64 calls_to_database_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.JoinTable) */ {
 public:
  JoinTable();
  virtual ~JoinTable();

  JoinTable(const JoinTable& from);

  inline JoinTable& operator=(const JoinTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinTable(JoinTable&& from) noexcept
    : JoinTable() {
    *this = ::std::move(from);
  }

  inline JoinTable& operator=(JoinTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinTable& default_instance();

  static inline const JoinTable* internal_default_instance() {
    return reinterpret_cast<const JoinTable*>(
               &_JoinTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(JoinTable* other);
  friend void swap(JoinTable& a, JoinTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinTable* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinTable& from);
  void MergeFrom(const JoinTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.yaorm.TableDefinition first_table = 1;
  bool has_first_table() const;
  void clear_first_table();
  static const int kFirstTableFieldNumber = 1;
  const ::org::yaorm::TableDefinition& first_table() const;
  ::org::yaorm::TableDefinition* mutable_first_table();
  ::org::yaorm::TableDefinition* release_first_table();
  void set_allocated_first_table(::org::yaorm::TableDefinition* first_table);

  // .org.yaorm.TableDefinition second_table = 2;
  bool has_second_table() const;
  void clear_second_table();
  static const int kSecondTableFieldNumber = 2;
  const ::org::yaorm::TableDefinition& second_table() const;
  ::org::yaorm::TableDefinition* mutable_second_table();
  ::org::yaorm::TableDefinition* release_second_table();
  void set_allocated_second_table(::org::yaorm::TableDefinition* second_table);

  // .org.yaorm.ColumnDefinition first_column = 7;
  bool has_first_column() const;
  void clear_first_column();
  static const int kFirstColumnFieldNumber = 7;
  const ::org::yaorm::ColumnDefinition& first_column() const;
  ::org::yaorm::ColumnDefinition* mutable_first_column();
  ::org::yaorm::ColumnDefinition* release_first_column();
  void set_allocated_first_column(::org::yaorm::ColumnDefinition* first_column);

  // .org.yaorm.ColumnDefinition second_column = 8;
  bool has_second_column() const;
  void clear_second_column();
  static const int kSecondColumnFieldNumber = 8;
  const ::org::yaorm::ColumnDefinition& second_column() const;
  ::org::yaorm::ColumnDefinition* mutable_second_column();
  ::org::yaorm::ColumnDefinition* release_second_column();
  void set_allocated_second_column(::org::yaorm::ColumnDefinition* second_column);

  // .org.yaorm.WhereClause where_clause = 9;
  bool has_where_clause() const;
  void clear_where_clause();
  static const int kWhereClauseFieldNumber = 9;
  const ::org::yaorm::WhereClause& where_clause() const;
  ::org::yaorm::WhereClause* mutable_where_clause();
  ::org::yaorm::WhereClause* release_where_clause();
  void set_allocated_where_clause(::org::yaorm::WhereClause* where_clause);

  // @@protoc_insertion_point(class_scope:org.yaorm.JoinTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::yaorm::TableDefinition* first_table_;
  ::org::yaorm::TableDefinition* second_table_;
  ::org::yaorm::ColumnDefinition* first_column_;
  ::org::yaorm::ColumnDefinition* second_column_;
  ::org::yaorm::WhereClause* where_clause_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinTableRecords : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.JoinTableRecords) */ {
 public:
  JoinTableRecords();
  virtual ~JoinTableRecords();

  JoinTableRecords(const JoinTableRecords& from);

  inline JoinTableRecords& operator=(const JoinTableRecords& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinTableRecords(JoinTableRecords&& from) noexcept
    : JoinTableRecords() {
    *this = ::std::move(from);
  }

  inline JoinTableRecords& operator=(JoinTableRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinTableRecords& default_instance();

  static inline const JoinTableRecords* internal_default_instance() {
    return reinterpret_cast<const JoinTableRecords*>(
               &_JoinTableRecords_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(JoinTableRecords* other);
  friend void swap(JoinTableRecords& a, JoinTableRecords& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinTableRecords* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinTableRecords* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinTableRecords& from);
  void MergeFrom(const JoinTableRecords& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinTableRecords* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.yaorm.JoinTable join_table = 1;
  bool has_join_table() const;
  void clear_join_table();
  static const int kJoinTableFieldNumber = 1;
  const ::org::yaorm::JoinTable& join_table() const;
  ::org::yaorm::JoinTable* mutable_join_table();
  ::org::yaorm::JoinTable* release_join_table();
  void set_allocated_join_table(::org::yaorm::JoinTable* join_table);

  // .org.yaorm.Records records = 2;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 2;
  const ::org::yaorm::Records& records() const;
  ::org::yaorm::Records* mutable_records();
  ::org::yaorm::Records* release_records();
  void set_allocated_records(::org::yaorm::Records* records);

  // @@protoc_insertion_point(class_scope:org.yaorm.JoinTableRecords)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::yaorm::JoinTable* join_table_;
  ::org::yaorm::Records* records_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupBy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.GroupBy) */ {
 public:
  GroupBy();
  virtual ~GroupBy();

  GroupBy(const GroupBy& from);

  inline GroupBy& operator=(const GroupBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupBy(GroupBy&& from) noexcept
    : GroupBy() {
    *this = ::std::move(from);
  }

  inline GroupBy& operator=(GroupBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupBy& default_instance();

  static inline const GroupBy* internal_default_instance() {
    return reinterpret_cast<const GroupBy*>(
               &_GroupBy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(GroupBy* other);
  friend void swap(GroupBy& a, GroupBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupBy* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupBy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupBy& from);
  void MergeFrom(const GroupBy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.ColumnDefinition columns = 1;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 1;
  const ::org::yaorm::ColumnDefinition& columns(int index) const;
  ::org::yaorm::ColumnDefinition* mutable_columns(int index);
  ::org::yaorm::ColumnDefinition* add_columns();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
      columns() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.GroupBy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition > columns_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OrderBy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.OrderBy) */ {
 public:
  OrderBy();
  virtual ~OrderBy();

  OrderBy(const OrderBy& from);

  inline OrderBy& operator=(const OrderBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBy(OrderBy&& from) noexcept
    : OrderBy() {
    *this = ::std::move(from);
  }

  inline OrderBy& operator=(OrderBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderBy& default_instance();

  static inline const OrderBy* internal_default_instance() {
    return reinterpret_cast<const OrderBy*>(
               &_OrderBy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(OrderBy* other);
  friend void swap(OrderBy& a, OrderBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBy* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderBy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderBy& from);
  void MergeFrom(const OrderBy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.yaorm.ColumnDefinition column = 1;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 1;
  const ::org::yaorm::ColumnDefinition& column() const;
  ::org::yaorm::ColumnDefinition* mutable_column();
  ::org::yaorm::ColumnDefinition* release_column();
  void set_allocated_column(::org::yaorm::ColumnDefinition* column);

  // .org.yaorm.OrderByType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::org::yaorm::OrderByType type() const;
  void set_type(::org::yaorm::OrderByType value);

  // @@protoc_insertion_point(class_scope:org.yaorm.OrderBy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::yaorm::ColumnDefinition* column_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Projection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.Projection) */ {
 public:
  Projection();
  virtual ~Projection();

  Projection(const Projection& from);

  inline Projection& operator=(const Projection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Projection(Projection&& from) noexcept
    : Projection() {
    *this = ::std::move(from);
  }

  inline Projection& operator=(Projection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Projection& default_instance();

  static inline const Projection* internal_default_instance() {
    return reinterpret_cast<const Projection*>(
               &_Projection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Projection* other);
  friend void swap(Projection& a, Projection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Projection* New() const PROTOBUF_FINAL { return New(NULL); }

  Projection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Projection& from);
  void MergeFrom(const Projection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Projection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.yaorm.ColumnDefinition labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  const ::org::yaorm::ColumnDefinition& labels(int index) const;
  ::org::yaorm::ColumnDefinition* mutable_labels(int index);
  ::org::yaorm::ColumnDefinition* add_labels();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
      mutable_labels();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
      labels() const;

  // repeated .org.yaorm.JoinTable joins = 3;
  int joins_size() const;
  void clear_joins();
  static const int kJoinsFieldNumber = 3;
  const ::org::yaorm::JoinTable& joins(int index) const;
  ::org::yaorm::JoinTable* mutable_joins(int index);
  ::org::yaorm::JoinTable* add_joins();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::JoinTable >*
      mutable_joins();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::JoinTable >&
      joins() const;

  // repeated .org.yaorm.OrderBy order_bys = 6;
  int order_bys_size() const;
  void clear_order_bys();
  static const int kOrderBysFieldNumber = 6;
  const ::org::yaorm::OrderBy& order_bys(int index) const;
  ::org::yaorm::OrderBy* mutable_order_bys(int index);
  ::org::yaorm::OrderBy* add_order_bys();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::OrderBy >*
      mutable_order_bys();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::OrderBy >&
      order_bys() const;

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .org.yaorm.TableDefinition main_table = 2;
  bool has_main_table() const;
  void clear_main_table();
  static const int kMainTableFieldNumber = 2;
  const ::org::yaorm::TableDefinition& main_table() const;
  ::org::yaorm::TableDefinition* mutable_main_table();
  ::org::yaorm::TableDefinition* release_main_table();
  void set_allocated_main_table(::org::yaorm::TableDefinition* main_table);

  // .org.yaorm.WhereClause where_clause = 4;
  bool has_where_clause() const;
  void clear_where_clause();
  static const int kWhereClauseFieldNumber = 4;
  const ::org::yaorm::WhereClause& where_clause() const;
  ::org::yaorm::WhereClause* mutable_where_clause();
  ::org::yaorm::WhereClause* release_where_clause();
  void set_allocated_where_clause(::org::yaorm::WhereClause* where_clause);

  // .org.yaorm.GroupBy group_by = 5;
  bool has_group_by() const;
  void clear_group_by();
  static const int kGroupByFieldNumber = 5;
  const ::org::yaorm::GroupBy& group_by() const;
  ::org::yaorm::GroupBy* mutable_group_by();
  ::org::yaorm::GroupBy* release_group_by();
  void set_allocated_group_by(::org::yaorm::GroupBy* group_by);

  // int64 limit = 8;
  void clear_limit();
  static const int kLimitFieldNumber = 8;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // int64 offset = 9;
  void clear_offset();
  static const int kOffsetFieldNumber = 9;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.yaorm.Projection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition > labels_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::JoinTable > joins_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::OrderBy > order_bys_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::org::yaorm::TableDefinition* main_table_;
  ::org::yaorm::WhereClause* where_clause_;
  ::org::yaorm::GroupBy* group_by_;
  ::google::protobuf::int64 limit_;
  ::google::protobuf::int64 offset_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UIYaormRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.UIYaormRequest) */ {
 public:
  UIYaormRequest();
  virtual ~UIYaormRequest();

  UIYaormRequest(const UIYaormRequest& from);

  inline UIYaormRequest& operator=(const UIYaormRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UIYaormRequest(UIYaormRequest&& from) noexcept
    : UIYaormRequest() {
    *this = ::std::move(from);
  }

  inline UIYaormRequest& operator=(UIYaormRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UIYaormRequest& default_instance();

  static inline const UIYaormRequest* internal_default_instance() {
    return reinterpret_cast<const UIYaormRequest*>(
               &_UIYaormRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(UIYaormRequest* other);
  friend void swap(UIYaormRequest& a, UIYaormRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UIYaormRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UIYaormRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UIYaormRequest& from);
  void MergeFrom(const UIYaormRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UIYaormRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ids = 14;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 14;
  const ::std::string& ids(int index) const;
  ::std::string* mutable_ids(int index);
  void set_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ids(int index, ::std::string&& value);
  #endif
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  ::std::string* add_ids();
  void add_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ids(::std::string&& value);
  #endif
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string schema_name = 9;
  void clear_schema_name();
  static const int kSchemaNameFieldNumber = 9;
  const ::std::string& schema_name() const;
  void set_schema_name(const ::std::string& value);
  #if LANG_CXX11
  void set_schema_name(::std::string&& value);
  #endif
  void set_schema_name(const char* value);
  void set_schema_name(const char* value, size_t size);
  ::std::string* mutable_schema_name();
  ::std::string* release_schema_name();
  void set_allocated_schema_name(::std::string* schema_name);

  // string table_name = 10;
  void clear_table_name();
  static const int kTableNameFieldNumber = 10;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // string custom_sql = 11;
  void clear_custom_sql();
  static const int kCustomSqlFieldNumber = 11;
  const ::std::string& custom_sql() const;
  void set_custom_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_sql(::std::string&& value);
  #endif
  void set_custom_sql(const char* value);
  void set_custom_sql(const char* value, size_t size);
  ::std::string* mutable_custom_sql();
  ::std::string* release_custom_sql();
  void set_allocated_custom_sql(::std::string* custom_sql);

  // string file_descriptor = 13;
  void clear_file_descriptor();
  static const int kFileDescriptorFieldNumber = 13;
  const ::std::string& file_descriptor() const;
  void set_file_descriptor(const ::std::string& value);
  #if LANG_CXX11
  void set_file_descriptor(::std::string&& value);
  #endif
  void set_file_descriptor(const char* value);
  void set_file_descriptor(const char* value, size_t size);
  ::std::string* mutable_file_descriptor();
  ::std::string* release_file_descriptor();
  void set_allocated_file_descriptor(::std::string* file_descriptor);

  // .org.yaorm.TableDefinition table_definition = 2;
  bool has_table_definition() const;
  void clear_table_definition();
  static const int kTableDefinitionFieldNumber = 2;
  const ::org::yaorm::TableDefinition& table_definition() const;
  ::org::yaorm::TableDefinition* mutable_table_definition();
  ::org::yaorm::TableDefinition* release_table_definition();
  void set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition);

  // .org.yaorm.Records records = 3;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 3;
  const ::org::yaorm::Records& records() const;
  ::org::yaorm::Records* mutable_records();
  ::org::yaorm::Records* release_records();
  void set_allocated_records(::org::yaorm::Records* records);

  // .org.yaorm.ConnectionInfo connection_info = 4;
  bool has_connection_info() const;
  void clear_connection_info();
  static const int kConnectionInfoFieldNumber = 4;
  const ::org::yaorm::ConnectionInfo& connection_info() const;
  ::org::yaorm::ConnectionInfo* mutable_connection_info();
  ::org::yaorm::ConnectionInfo* release_connection_info();
  void set_allocated_connection_info(::org::yaorm::ConnectionInfo* connection_info);

  // .org.yaorm.WhereClause where_clause = 5;
  bool has_where_clause() const;
  void clear_where_clause();
  static const int kWhereClauseFieldNumber = 5;
  const ::org::yaorm::WhereClause& where_clause() const;
  ::org::yaorm::WhereClause* mutable_where_clause();
  ::org::yaorm::WhereClause* release_where_clause();
  void set_allocated_where_clause(::org::yaorm::WhereClause* where_clause);

  // int64 limit = 6;
  void clear_limit();
  static const int kLimitFieldNumber = 6;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // int64 offset = 7;
  void clear_offset();
  static const int kOffsetFieldNumber = 7;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // bool insert_same_as_update = 8;
  void clear_insert_same_as_update();
  static const int kInsertSameAsUpdateFieldNumber = 8;
  bool insert_same_as_update() const;
  void set_insert_same_as_update(bool value);

  // @@protoc_insertion_point(class_scope:org.yaorm.UIYaormRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr schema_name_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr custom_sql_;
  ::google::protobuf::internal::ArenaStringPtr file_descriptor_;
  ::org::yaorm::TableDefinition* table_definition_;
  ::org::yaorm::Records* records_;
  ::org::yaorm::ConnectionInfo* connection_info_;
  ::org::yaorm::WhereClause* where_clause_;
  ::google::protobuf::int64 limit_;
  ::google::protobuf::int64 offset_;
  bool insert_same_as_update_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UIYaormResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.UIYaormResponse) */ {
 public:
  UIYaormResponse();
  virtual ~UIYaormResponse();

  UIYaormResponse(const UIYaormResponse& from);

  inline UIYaormResponse& operator=(const UIYaormResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UIYaormResponse(UIYaormResponse&& from) noexcept
    : UIYaormResponse() {
    *this = ::std::move(from);
  }

  inline UIYaormResponse& operator=(UIYaormResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UIYaormResponse& default_instance();

  static inline const UIYaormResponse* internal_default_instance() {
    return reinterpret_cast<const UIYaormResponse*>(
               &_UIYaormResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(UIYaormResponse* other);
  friend void swap(UIYaormResponse& a, UIYaormResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UIYaormResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UIYaormResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UIYaormResponse& from);
  void MergeFrom(const UIYaormResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UIYaormResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string schemas = 2;
  int schemas_size() const;
  void clear_schemas();
  static const int kSchemasFieldNumber = 2;
  const ::std::string& schemas(int index) const;
  ::std::string* mutable_schemas(int index);
  void set_schemas(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_schemas(int index, ::std::string&& value);
  #endif
  void set_schemas(int index, const char* value);
  void set_schemas(int index, const char* value, size_t size);
  ::std::string* add_schemas();
  void add_schemas(const ::std::string& value);
  #if LANG_CXX11
  void add_schemas(::std::string&& value);
  #endif
  void add_schemas(const char* value);
  void add_schemas(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& schemas() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_schemas();

  // repeated string tables = 3;
  int tables_size() const;
  void clear_tables();
  static const int kTablesFieldNumber = 3;
  const ::std::string& tables(int index) const;
  ::std::string* mutable_tables(int index);
  void set_tables(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tables(int index, ::std::string&& value);
  #endif
  void set_tables(int index, const char* value);
  void set_tables(int index, const char* value, size_t size);
  ::std::string* add_tables();
  void add_tables(const ::std::string& value);
  #if LANG_CXX11
  void add_tables(::std::string&& value);
  #endif
  void add_tables(const char* value);
  void add_tables(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tables() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tables();

  // repeated .org.yaorm.ProtoTypeToSqlType proto_type_to_sql_types = 8;
  int proto_type_to_sql_types_size() const;
  void clear_proto_type_to_sql_types();
  static const int kProtoTypeToSqlTypesFieldNumber = 8;
  const ::org::yaorm::ProtoTypeToSqlType& proto_type_to_sql_types(int index) const;
  ::org::yaorm::ProtoTypeToSqlType* mutable_proto_type_to_sql_types(int index);
  ::org::yaorm::ProtoTypeToSqlType* add_proto_type_to_sql_types();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType >*
      mutable_proto_type_to_sql_types();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType >&
      proto_type_to_sql_types() const;

  // string string_result = 9;
  void clear_string_result();
  static const int kStringResultFieldNumber = 9;
  const ::std::string& string_result() const;
  void set_string_result(const ::std::string& value);
  #if LANG_CXX11
  void set_string_result(::std::string&& value);
  #endif
  void set_string_result(const char* value);
  void set_string_result(const char* value, size_t size);
  ::std::string* mutable_string_result();
  ::std::string* release_string_result();
  void set_allocated_string_result(::std::string* string_result);

  // .org.yaorm.Records records = 1;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::org::yaorm::Records& records() const;
  ::org::yaorm::Records* mutable_records();
  ::org::yaorm::Records* release_records();
  void set_allocated_records(::org::yaorm::Records* records);

  // .org.yaorm.TableDefinition table_definition = 4;
  bool has_table_definition() const;
  void clear_table_definition();
  static const int kTableDefinitionFieldNumber = 4;
  const ::org::yaorm::TableDefinition& table_definition() const;
  ::org::yaorm::TableDefinition* mutable_table_definition();
  ::org::yaorm::TableDefinition* release_table_definition();
  void set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition);

  // .org.yaorm.TableDefinitions table_definitions = 5;
  bool has_table_definitions() const;
  void clear_table_definitions();
  static const int kTableDefinitionsFieldNumber = 5;
  const ::org::yaorm::TableDefinitions& table_definitions() const;
  ::org::yaorm::TableDefinitions* mutable_table_definitions();
  ::org::yaorm::TableDefinitions* release_table_definitions();
  void set_allocated_table_definitions(::org::yaorm::TableDefinitions* table_definitions);

  // int64 record_count = 6;
  void clear_record_count();
  static const int kRecordCountFieldNumber = 6;
  ::google::protobuf::int64 record_count() const;
  void set_record_count(::google::protobuf::int64 value);

  // bool result = 7;
  void clear_result();
  static const int kResultFieldNumber = 7;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:org.yaorm.UIYaormResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> schemas_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tables_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType > proto_type_to_sql_types_;
  ::google::protobuf::internal::ArenaStringPtr string_result_;
  ::org::yaorm::Records* records_;
  ::org::yaorm::TableDefinition* table_definition_;
  ::org::yaorm::TableDefinitions* table_definitions_;
  ::google::protobuf::int64 record_count_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SqlGeneratorRequestResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.SqlGeneratorRequestResponse) */ {
 public:
  SqlGeneratorRequestResponse();
  virtual ~SqlGeneratorRequestResponse();

  SqlGeneratorRequestResponse(const SqlGeneratorRequestResponse& from);

  inline SqlGeneratorRequestResponse& operator=(const SqlGeneratorRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlGeneratorRequestResponse(SqlGeneratorRequestResponse&& from) noexcept
    : SqlGeneratorRequestResponse() {
    *this = ::std::move(from);
  }

  inline SqlGeneratorRequestResponse& operator=(SqlGeneratorRequestResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SqlGeneratorRequestResponse& default_instance();

  static inline const SqlGeneratorRequestResponse* internal_default_instance() {
    return reinterpret_cast<const SqlGeneratorRequestResponse*>(
               &_SqlGeneratorRequestResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(SqlGeneratorRequestResponse* other);
  friend void swap(SqlGeneratorRequestResponse& a, SqlGeneratorRequestResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlGeneratorRequestResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SqlGeneratorRequestResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SqlGeneratorRequestResponse& from);
  void MergeFrom(const SqlGeneratorRequestResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SqlGeneratorRequestResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string schema_name = 9;
  void clear_schema_name();
  static const int kSchemaNameFieldNumber = 9;
  const ::std::string& schema_name() const;
  void set_schema_name(const ::std::string& value);
  #if LANG_CXX11
  void set_schema_name(::std::string&& value);
  #endif
  void set_schema_name(const char* value);
  void set_schema_name(const char* value, size_t size);
  ::std::string* mutable_schema_name();
  ::std::string* release_schema_name();
  void set_allocated_schema_name(::std::string* schema_name);

  // string table_name = 10;
  void clear_table_name();
  static const int kTableNameFieldNumber = 10;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // string response = 11;
  void clear_response();
  static const int kResponseFieldNumber = 11;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // .org.yaorm.TableDefinition definition = 1;
  bool has_definition() const;
  void clear_definition();
  static const int kDefinitionFieldNumber = 1;
  const ::org::yaorm::TableDefinition& definition() const;
  ::org::yaorm::TableDefinition* mutable_definition();
  ::org::yaorm::TableDefinition* release_definition();
  void set_allocated_definition(::org::yaorm::TableDefinition* definition);

  // .org.yaorm.ColumnDefinition column_definition = 2;
  bool has_column_definition() const;
  void clear_column_definition();
  static const int kColumnDefinitionFieldNumber = 2;
  const ::org::yaorm::ColumnDefinition& column_definition() const;
  ::org::yaorm::ColumnDefinition* mutable_column_definition();
  ::org::yaorm::ColumnDefinition* release_column_definition();
  void set_allocated_column_definition(::org::yaorm::ColumnDefinition* column_definition);

  // .org.yaorm.Index index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  const ::org::yaorm::Index& index() const;
  ::org::yaorm::Index* mutable_index();
  ::org::yaorm::Index* release_index();
  void set_allocated_index(::org::yaorm::Index* index);

  // .org.yaorm.Column column = 4;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 4;
  const ::org::yaorm::Column& column() const;
  ::org::yaorm::Column* mutable_column();
  ::org::yaorm::Column* release_column();
  void set_allocated_column(::org::yaorm::Column* column);

  // .org.yaorm.WhereClause where_clause = 5;
  bool has_where_clause() const;
  void clear_where_clause();
  static const int kWhereClauseFieldNumber = 5;
  const ::org::yaorm::WhereClause& where_clause() const;
  ::org::yaorm::WhereClause* mutable_where_clause();
  ::org::yaorm::WhereClause* release_where_clause();
  void set_allocated_where_clause(::org::yaorm::WhereClause* where_clause);

  // .org.yaorm.Records records = 6;
  bool has_records() const;
  void clear_records();
  static const int kRecordsFieldNumber = 6;
  const ::org::yaorm::Records& records() const;
  ::org::yaorm::Records* mutable_records();
  ::org::yaorm::Records* release_records();
  void set_allocated_records(::org::yaorm::Records* records);

  // .org.yaorm.ProtoTypeToSqlTypes proto_type_to_sql_types = 12;
  bool has_proto_type_to_sql_types() const;
  void clear_proto_type_to_sql_types();
  static const int kProtoTypeToSqlTypesFieldNumber = 12;
  const ::org::yaorm::ProtoTypeToSqlTypes& proto_type_to_sql_types() const;
  ::org::yaorm::ProtoTypeToSqlTypes* mutable_proto_type_to_sql_types();
  ::org::yaorm::ProtoTypeToSqlTypes* release_proto_type_to_sql_types();
  void set_allocated_proto_type_to_sql_types(::org::yaorm::ProtoTypeToSqlTypes* proto_type_to_sql_types);

  // int64 limit = 7;
  void clear_limit();
  static const int kLimitFieldNumber = 7;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // int64 offset = 8;
  void clear_offset();
  static const int kOffsetFieldNumber = 8;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.yaorm.SqlGeneratorRequestResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr schema_name_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  ::org::yaorm::TableDefinition* definition_;
  ::org::yaorm::ColumnDefinition* column_definition_;
  ::org::yaorm::Index* index_;
  ::org::yaorm::Column* column_;
  ::org::yaorm::WhereClause* where_clause_;
  ::org::yaorm::Records* records_;
  ::org::yaorm::ProtoTypeToSqlTypes* proto_type_to_sql_types_;
  ::google::protobuf::int64 limit_;
  ::google::protobuf::int64 offset_;
  mutable int _cached_size_;
  friend struct protobuf_yaorm_5fmodels_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoTypeToSqlType

// .org.yaorm.ProtobufType proto_type = 1;
inline void ProtoTypeToSqlType::clear_proto_type() {
  proto_type_ = 0;
}
inline ::org::yaorm::ProtobufType ProtoTypeToSqlType::proto_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ProtoTypeToSqlType.proto_type)
  return static_cast< ::org::yaorm::ProtobufType >(proto_type_);
}
inline void ProtoTypeToSqlType::set_proto_type(::org::yaorm::ProtobufType value) {
  
  proto_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ProtoTypeToSqlType.proto_type)
}

// string sql_type = 2;
inline void ProtoTypeToSqlType::clear_sql_type() {
  sql_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoTypeToSqlType::sql_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ProtoTypeToSqlType.sql_type)
  return sql_type_.GetNoArena();
}
inline void ProtoTypeToSqlType::set_sql_type(const ::std::string& value) {
  
  sql_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ProtoTypeToSqlType.sql_type)
}
#if LANG_CXX11
inline void ProtoTypeToSqlType::set_sql_type(::std::string&& value) {
  
  sql_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ProtoTypeToSqlType.sql_type)
}
#endif
inline void ProtoTypeToSqlType::set_sql_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sql_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ProtoTypeToSqlType.sql_type)
}
inline void ProtoTypeToSqlType::set_sql_type(const char* value, size_t size) {
  
  sql_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ProtoTypeToSqlType.sql_type)
}
inline ::std::string* ProtoTypeToSqlType::mutable_sql_type() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ProtoTypeToSqlType.sql_type)
  return sql_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoTypeToSqlType::release_sql_type() {
  // @@protoc_insertion_point(field_release:org.yaorm.ProtoTypeToSqlType.sql_type)
  
  return sql_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoTypeToSqlType::set_allocated_sql_type(::std::string* sql_type) {
  if (sql_type != NULL) {
    
  } else {
    
  }
  sql_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql_type);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ProtoTypeToSqlType.sql_type)
}

// -------------------------------------------------------------------

// ProtoTypeToSqlTypes

// repeated .org.yaorm.ProtoTypeToSqlType results = 1;
inline int ProtoTypeToSqlTypes::results_size() const {
  return results_.size();
}
inline void ProtoTypeToSqlTypes::clear_results() {
  results_.Clear();
}
inline const ::org::yaorm::ProtoTypeToSqlType& ProtoTypeToSqlTypes::results(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.ProtoTypeToSqlTypes.results)
  return results_.Get(index);
}
inline ::org::yaorm::ProtoTypeToSqlType* ProtoTypeToSqlTypes::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.ProtoTypeToSqlTypes.results)
  return results_.Mutable(index);
}
inline ::org::yaorm::ProtoTypeToSqlType* ProtoTypeToSqlTypes::add_results() {
  // @@protoc_insertion_point(field_add:org.yaorm.ProtoTypeToSqlTypes.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType >*
ProtoTypeToSqlTypes::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.ProtoTypeToSqlTypes.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType >&
ProtoTypeToSqlTypes::results() const {
  // @@protoc_insertion_point(field_list:org.yaorm.ProtoTypeToSqlTypes.results)
  return results_;
}

// -------------------------------------------------------------------

// WhereClause

// .org.yaorm.Column name_and_property = 1;
inline bool WhereClause::has_name_and_property() const {
  return this != internal_default_instance() && name_and_property_ != NULL;
}
inline void WhereClause::clear_name_and_property() {
  if (GetArenaNoVirtual() == NULL && name_and_property_ != NULL) delete name_and_property_;
  name_and_property_ = NULL;
}
inline const ::org::yaorm::Column& WhereClause::name_and_property() const {
  const ::org::yaorm::Column* p = name_and_property_;
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClause.name_and_property)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Column*>(
      &::org::yaorm::_Column_default_instance_);
}
inline ::org::yaorm::Column* WhereClause::mutable_name_and_property() {
  
  if (name_and_property_ == NULL) {
    name_and_property_ = new ::org::yaorm::Column;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.WhereClause.name_and_property)
  return name_and_property_;
}
inline ::org::yaorm::Column* WhereClause::release_name_and_property() {
  // @@protoc_insertion_point(field_release:org.yaorm.WhereClause.name_and_property)
  
  ::org::yaorm::Column* temp = name_and_property_;
  name_and_property_ = NULL;
  return temp;
}
inline void WhereClause::set_allocated_name_and_property(::org::yaorm::Column* name_and_property) {
  delete name_and_property_;
  name_and_property_ = name_and_property;
  if (name_and_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.WhereClause.name_and_property)
}

// .org.yaorm.WhereClause.OperatorType operator_type = 2;
inline void WhereClause::clear_operator_type() {
  operator_type_ = 0;
}
inline ::org::yaorm::WhereClause_OperatorType WhereClause::operator_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClause.operator_type)
  return static_cast< ::org::yaorm::WhereClause_OperatorType >(operator_type_);
}
inline void WhereClause::set_operator_type(::org::yaorm::WhereClause_OperatorType value) {
  
  operator_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.WhereClause.operator_type)
}

// .org.yaorm.WhereClause.ConnectingAndOr connecting_and_or = 3;
inline void WhereClause::clear_connecting_and_or() {
  connecting_and_or_ = 0;
}
inline ::org::yaorm::WhereClause_ConnectingAndOr WhereClause::connecting_and_or() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClause.connecting_and_or)
  return static_cast< ::org::yaorm::WhereClause_ConnectingAndOr >(connecting_and_or_);
}
inline void WhereClause::set_connecting_and_or(::org::yaorm::WhereClause_ConnectingAndOr value) {
  
  connecting_and_or_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.WhereClause.connecting_and_or)
}

// .org.yaorm.WhereClause connecting_where_clause = 4;
inline bool WhereClause::has_connecting_where_clause() const {
  return this != internal_default_instance() && connecting_where_clause_ != NULL;
}
inline void WhereClause::clear_connecting_where_clause() {
  if (GetArenaNoVirtual() == NULL && connecting_where_clause_ != NULL) delete connecting_where_clause_;
  connecting_where_clause_ = NULL;
}
inline const ::org::yaorm::WhereClause& WhereClause::connecting_where_clause() const {
  const ::org::yaorm::WhereClause* p = connecting_where_clause_;
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClause.connecting_where_clause)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::WhereClause*>(
      &::org::yaorm::_WhereClause_default_instance_);
}
inline ::org::yaorm::WhereClause* WhereClause::mutable_connecting_where_clause() {
  
  if (connecting_where_clause_ == NULL) {
    connecting_where_clause_ = new ::org::yaorm::WhereClause;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.WhereClause.connecting_where_clause)
  return connecting_where_clause_;
}
inline ::org::yaorm::WhereClause* WhereClause::release_connecting_where_clause() {
  // @@protoc_insertion_point(field_release:org.yaorm.WhereClause.connecting_where_clause)
  
  ::org::yaorm::WhereClause* temp = connecting_where_clause_;
  connecting_where_clause_ = NULL;
  return temp;
}
inline void WhereClause::set_allocated_connecting_where_clause(::org::yaorm::WhereClause* connecting_where_clause) {
  delete connecting_where_clause_;
  connecting_where_clause_ = connecting_where_clause;
  if (connecting_where_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.WhereClause.connecting_where_clause)
}

// repeated string in_items = 5;
inline int WhereClause::in_items_size() const {
  return in_items_.size();
}
inline void WhereClause::clear_in_items() {
  in_items_.Clear();
}
inline const ::std::string& WhereClause::in_items(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClause.in_items)
  return in_items_.Get(index);
}
inline ::std::string* WhereClause::mutable_in_items(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.WhereClause.in_items)
  return in_items_.Mutable(index);
}
inline void WhereClause::set_in_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.WhereClause.in_items)
  in_items_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WhereClause::set_in_items(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.WhereClause.in_items)
  in_items_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WhereClause::set_in_items(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.yaorm.WhereClause.in_items)
}
inline void WhereClause::set_in_items(int index, const char* value, size_t size) {
  in_items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.WhereClause.in_items)
}
inline ::std::string* WhereClause::add_in_items() {
  // @@protoc_insertion_point(field_add_mutable:org.yaorm.WhereClause.in_items)
  return in_items_.Add();
}
inline void WhereClause::add_in_items(const ::std::string& value) {
  in_items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.yaorm.WhereClause.in_items)
}
#if LANG_CXX11
inline void WhereClause::add_in_items(::std::string&& value) {
  in_items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.yaorm.WhereClause.in_items)
}
#endif
inline void WhereClause::add_in_items(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.yaorm.WhereClause.in_items)
}
inline void WhereClause::add_in_items(const char* value, size_t size) {
  in_items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.yaorm.WhereClause.in_items)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WhereClause::in_items() const {
  // @@protoc_insertion_point(field_list:org.yaorm.WhereClause.in_items)
  return in_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WhereClause::mutable_in_items() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.WhereClause.in_items)
  return &in_items_;
}

// -------------------------------------------------------------------

// ColumnDefinition

// string name = 1;
inline void ColumnDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnDefinition::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.name)
  return name_.GetNoArena();
}
inline void ColumnDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.name)
}
#if LANG_CXX11
inline void ColumnDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ColumnDefinition.name)
}
#endif
inline void ColumnDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ColumnDefinition.name)
}
inline void ColumnDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ColumnDefinition.name)
}
inline ::std::string* ColumnDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ColumnDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnDefinition::release_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.ColumnDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ColumnDefinition.name)
}

// .org.yaorm.ProtobufType type = 2;
inline void ColumnDefinition::clear_type() {
  type_ = 0;
}
inline ::org::yaorm::ProtobufType ColumnDefinition::type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.type)
  return static_cast< ::org::yaorm::ProtobufType >(type_);
}
inline void ColumnDefinition::set_type(::org::yaorm::ProtobufType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.type)
}

// bool is_key = 3;
inline void ColumnDefinition::clear_is_key() {
  is_key_ = false;
}
inline bool ColumnDefinition::is_key() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.is_key)
  return is_key_;
}
inline void ColumnDefinition::set_is_key(bool value) {
  
  is_key_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.is_key)
}

// .org.yaorm.ColumnDefinition.ColumnType column_type = 4;
inline void ColumnDefinition::clear_column_type() {
  column_type_ = 0;
}
inline ::org::yaorm::ColumnDefinition_ColumnType ColumnDefinition::column_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.column_type)
  return static_cast< ::org::yaorm::ColumnDefinition_ColumnType >(column_type_);
}
inline void ColumnDefinition::set_column_type(::org::yaorm::ColumnDefinition_ColumnType value) {
  
  column_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.column_type)
}

// .org.yaorm.ColumnDefinition.LinkerType linker_type = 5;
inline void ColumnDefinition::clear_linker_type() {
  linker_type_ = 0;
}
inline ::org::yaorm::ColumnDefinition_LinkerType ColumnDefinition::linker_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.linker_type)
  return static_cast< ::org::yaorm::ColumnDefinition_LinkerType >(linker_type_);
}
inline void ColumnDefinition::set_linker_type(::org::yaorm::ColumnDefinition_LinkerType value) {
  
  linker_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.linker_type)
}

// int32 order = 6;
inline void ColumnDefinition::clear_order() {
  order_ = 0;
}
inline ::google::protobuf::int32 ColumnDefinition::order() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.order)
  return order_;
}
inline void ColumnDefinition::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.order)
}

// string alias = 7;
inline void ColumnDefinition::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnDefinition::alias() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.alias)
  return alias_.GetNoArena();
}
inline void ColumnDefinition::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.alias)
}
#if LANG_CXX11
inline void ColumnDefinition::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ColumnDefinition.alias)
}
#endif
inline void ColumnDefinition::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ColumnDefinition.alias)
}
inline void ColumnDefinition::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ColumnDefinition.alias)
}
inline ::std::string* ColumnDefinition::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ColumnDefinition.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnDefinition::release_alias() {
  // @@protoc_insertion_point(field_release:org.yaorm.ColumnDefinition.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnDefinition::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ColumnDefinition.alias)
}

// string table_alias = 8;
inline void ColumnDefinition::clear_table_alias() {
  table_alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnDefinition::table_alias() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.table_alias)
  return table_alias_.GetNoArena();
}
inline void ColumnDefinition::set_table_alias(const ::std::string& value) {
  
  table_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.table_alias)
}
#if LANG_CXX11
inline void ColumnDefinition::set_table_alias(::std::string&& value) {
  
  table_alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ColumnDefinition.table_alias)
}
#endif
inline void ColumnDefinition::set_table_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ColumnDefinition.table_alias)
}
inline void ColumnDefinition::set_table_alias(const char* value, size_t size) {
  
  table_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ColumnDefinition.table_alias)
}
inline ::std::string* ColumnDefinition::mutable_table_alias() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ColumnDefinition.table_alias)
  return table_alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnDefinition::release_table_alias() {
  // @@protoc_insertion_point(field_release:org.yaorm.ColumnDefinition.table_alias)
  
  return table_alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnDefinition::set_allocated_table_alias(::std::string* table_alias) {
  if (table_alias != NULL) {
    
  } else {
    
  }
  table_alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_alias);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ColumnDefinition.table_alias)
}

// .org.yaorm.SelectFunctionType function_type = 9;
inline void ColumnDefinition::clear_function_type() {
  function_type_ = 0;
}
inline ::org::yaorm::SelectFunctionType ColumnDefinition::function_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.function_type)
  return static_cast< ::org::yaorm::SelectFunctionType >(function_type_);
}
inline void ColumnDefinition::set_function_type(::org::yaorm::SelectFunctionType value) {
  
  function_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.function_type)
}

// string function_text = 10;
inline void ColumnDefinition::clear_function_text() {
  function_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnDefinition::function_text() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ColumnDefinition.function_text)
  return function_text_.GetNoArena();
}
inline void ColumnDefinition::set_function_text(const ::std::string& value) {
  
  function_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ColumnDefinition.function_text)
}
#if LANG_CXX11
inline void ColumnDefinition::set_function_text(::std::string&& value) {
  
  function_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ColumnDefinition.function_text)
}
#endif
inline void ColumnDefinition::set_function_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ColumnDefinition.function_text)
}
inline void ColumnDefinition::set_function_text(const char* value, size_t size) {
  
  function_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ColumnDefinition.function_text)
}
inline ::std::string* ColumnDefinition::mutable_function_text() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ColumnDefinition.function_text)
  return function_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnDefinition::release_function_text() {
  // @@protoc_insertion_point(field_release:org.yaorm.ColumnDefinition.function_text)
  
  return function_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnDefinition::set_allocated_function_text(::std::string* function_text) {
  if (function_text != NULL) {
    
  } else {
    
  }
  function_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_text);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ColumnDefinition.function_text)
}

// -------------------------------------------------------------------

// Index

// repeated .org.yaorm.ColumnDefinition column_names = 1;
inline int Index::column_names_size() const {
  return column_names_.size();
}
inline void Index::clear_column_names() {
  column_names_.Clear();
}
inline const ::org::yaorm::ColumnDefinition& Index::column_names(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Index.column_names)
  return column_names_.Get(index);
}
inline ::org::yaorm::ColumnDefinition* Index::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Index.column_names)
  return column_names_.Mutable(index);
}
inline ::org::yaorm::ColumnDefinition* Index::add_column_names() {
  // @@protoc_insertion_point(field_add:org.yaorm.Index.column_names)
  return column_names_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
Index::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Index.column_names)
  return &column_names_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
Index::column_names() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Index.column_names)
  return column_names_;
}

// repeated .org.yaorm.ColumnDefinition include_names = 2;
inline int Index::include_names_size() const {
  return include_names_.size();
}
inline void Index::clear_include_names() {
  include_names_.Clear();
}
inline const ::org::yaorm::ColumnDefinition& Index::include_names(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Index.include_names)
  return include_names_.Get(index);
}
inline ::org::yaorm::ColumnDefinition* Index::mutable_include_names(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Index.include_names)
  return include_names_.Mutable(index);
}
inline ::org::yaorm::ColumnDefinition* Index::add_include_names() {
  // @@protoc_insertion_point(field_add:org.yaorm.Index.include_names)
  return include_names_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
Index::mutable_include_names() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Index.include_names)
  return &include_names_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
Index::include_names() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Index.include_names)
  return include_names_;
}

// -------------------------------------------------------------------

// Difference

// .org.yaorm.Difference.EntityType entity_type = 1;
inline void Difference::clear_entity_type() {
  entity_type_ = 0;
}
inline ::org::yaorm::Difference_EntityType Difference::entity_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.entity_type)
  return static_cast< ::org::yaorm::Difference_EntityType >(entity_type_);
}
inline void Difference::set_entity_type(::org::yaorm::Difference_EntityType value) {
  
  entity_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.entity_type)
}

// .org.yaorm.Difference.Operation operation = 2;
inline void Difference::clear_operation() {
  operation_ = 0;
}
inline ::org::yaorm::Difference_Operation Difference::operation() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.operation)
  return static_cast< ::org::yaorm::Difference_Operation >(operation_);
}
inline void Difference::set_operation(::org::yaorm::Difference_Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.operation)
}

// string name = 3;
inline void Difference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Difference::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.name)
  return name_.GetNoArena();
}
inline void Difference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.name)
}
#if LANG_CXX11
inline void Difference::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.Difference.name)
}
#endif
inline void Difference::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Difference.name)
}
inline void Difference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Difference.name)
}
inline ::std::string* Difference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Difference::release_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.Difference.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Difference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.name)
}

// .org.yaorm.Index index = 4;
inline bool Difference::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline void Difference::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
inline const ::org::yaorm::Index& Difference::index() const {
  const ::org::yaorm::Index* p = index_;
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.index)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Index*>(
      &::org::yaorm::_Index_default_instance_);
}
inline ::org::yaorm::Index* Difference::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::org::yaorm::Index;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.index)
  return index_;
}
inline ::org::yaorm::Index* Difference::release_index() {
  // @@protoc_insertion_point(field_release:org.yaorm.Difference.index)
  
  ::org::yaorm::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline void Difference::set_allocated_index(::org::yaorm::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.index)
}

// .org.yaorm.ColumnDefinition property_definition = 5;
inline bool Difference::has_property_definition() const {
  return this != internal_default_instance() && property_definition_ != NULL;
}
inline void Difference::clear_property_definition() {
  if (GetArenaNoVirtual() == NULL && property_definition_ != NULL) delete property_definition_;
  property_definition_ = NULL;
}
inline const ::org::yaorm::ColumnDefinition& Difference::property_definition() const {
  const ::org::yaorm::ColumnDefinition* p = property_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.property_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ColumnDefinition*>(
      &::org::yaorm::_ColumnDefinition_default_instance_);
}
inline ::org::yaorm::ColumnDefinition* Difference::mutable_property_definition() {
  
  if (property_definition_ == NULL) {
    property_definition_ = new ::org::yaorm::ColumnDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.property_definition)
  return property_definition_;
}
inline ::org::yaorm::ColumnDefinition* Difference::release_property_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.Difference.property_definition)
  
  ::org::yaorm::ColumnDefinition* temp = property_definition_;
  property_definition_ = NULL;
  return temp;
}
inline void Difference::set_allocated_property_definition(::org::yaorm::ColumnDefinition* property_definition) {
  delete property_definition_;
  property_definition_ = property_definition;
  if (property_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.property_definition)
}

// .org.yaorm.TableDefinition table_definition = 6;
inline bool Difference::has_table_definition() const {
  return this != internal_default_instance() && table_definition_ != NULL;
}
inline void Difference::clear_table_definition() {
  if (GetArenaNoVirtual() == NULL && table_definition_ != NULL) delete table_definition_;
  table_definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& Difference::table_definition() const {
  const ::org::yaorm::TableDefinition* p = table_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.table_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* Difference::mutable_table_definition() {
  
  if (table_definition_ == NULL) {
    table_definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.table_definition)
  return table_definition_;
}
inline ::org::yaorm::TableDefinition* Difference::release_table_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.Difference.table_definition)
  
  ::org::yaorm::TableDefinition* temp = table_definition_;
  table_definition_ = NULL;
  return temp;
}
inline void Difference::set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition) {
  delete table_definition_;
  table_definition_ = table_definition;
  if (table_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.table_definition)
}

// -------------------------------------------------------------------

// TableDefinition

// string name = 1;
inline void TableDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableDefinition::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinition.name)
  return name_.GetNoArena();
}
inline void TableDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.TableDefinition.name)
}
#if LANG_CXX11
inline void TableDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.TableDefinition.name)
}
#endif
inline void TableDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.TableDefinition.name)
}
inline void TableDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.TableDefinition.name)
}
inline ::std::string* TableDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableDefinition::release_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinition.name)
}

// repeated .org.yaorm.ColumnDefinition column_definitions = 2;
inline int TableDefinition::column_definitions_size() const {
  return column_definitions_.size();
}
inline void TableDefinition::clear_column_definitions() {
  column_definitions_.Clear();
}
inline const ::org::yaorm::ColumnDefinition& TableDefinition::column_definitions(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinition.column_definitions)
  return column_definitions_.Get(index);
}
inline ::org::yaorm::ColumnDefinition* TableDefinition::mutable_column_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinition.column_definitions)
  return column_definitions_.Mutable(index);
}
inline ::org::yaorm::ColumnDefinition* TableDefinition::add_column_definitions() {
  // @@protoc_insertion_point(field_add:org.yaorm.TableDefinition.column_definitions)
  return column_definitions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
TableDefinition::mutable_column_definitions() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.TableDefinition.column_definitions)
  return &column_definitions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
TableDefinition::column_definitions() const {
  // @@protoc_insertion_point(field_list:org.yaorm.TableDefinition.column_definitions)
  return column_definitions_;
}

// .org.yaorm.Index index = 3;
inline bool TableDefinition::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline void TableDefinition::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
inline const ::org::yaorm::Index& TableDefinition::index() const {
  const ::org::yaorm::Index* p = index_;
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinition.index)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Index*>(
      &::org::yaorm::_Index_default_instance_);
}
inline ::org::yaorm::Index* TableDefinition::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::org::yaorm::Index;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinition.index)
  return index_;
}
inline ::org::yaorm::Index* TableDefinition::release_index() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinition.index)
  
  ::org::yaorm::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline void TableDefinition::set_allocated_index(::org::yaorm::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinition.index)
}

// .org.yaorm.TableDefinition.TableType table_type = 4;
inline void TableDefinition::clear_table_type() {
  table_type_ = 0;
}
inline ::org::yaorm::TableDefinition_TableType TableDefinition::table_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinition.table_type)
  return static_cast< ::org::yaorm::TableDefinition_TableType >(table_type_);
}
inline void TableDefinition::set_table_type(::org::yaorm::TableDefinition_TableType value) {
  
  table_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.TableDefinition.table_type)
}

// string alias = 5;
inline void TableDefinition::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableDefinition::alias() const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinition.alias)
  return alias_.GetNoArena();
}
inline void TableDefinition::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.TableDefinition.alias)
}
#if LANG_CXX11
inline void TableDefinition::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.TableDefinition.alias)
}
#endif
inline void TableDefinition::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.TableDefinition.alias)
}
inline void TableDefinition::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.TableDefinition.alias)
}
inline ::std::string* TableDefinition::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinition.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableDefinition::release_alias() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinition.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDefinition::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinition.alias)
}

// -------------------------------------------------------------------

// TableDefinitions

// repeated .org.yaorm.TableDefinition table_definitions = 1;
inline int TableDefinitions::table_definitions_size() const {
  return table_definitions_.size();
}
inline void TableDefinitions::clear_table_definitions() {
  table_definitions_.Clear();
}
inline const ::org::yaorm::TableDefinition& TableDefinitions::table_definitions(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitions.table_definitions)
  return table_definitions_.Get(index);
}
inline ::org::yaorm::TableDefinition* TableDefinitions::mutable_table_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitions.table_definitions)
  return table_definitions_.Mutable(index);
}
inline ::org::yaorm::TableDefinition* TableDefinitions::add_table_definitions() {
  // @@protoc_insertion_point(field_add:org.yaorm.TableDefinitions.table_definitions)
  return table_definitions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinition >*
TableDefinitions::mutable_table_definitions() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.TableDefinitions.table_definitions)
  return &table_definitions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinition >&
TableDefinitions::table_definitions() const {
  // @@protoc_insertion_point(field_list:org.yaorm.TableDefinitions.table_definitions)
  return table_definitions_;
}

// -------------------------------------------------------------------

// DifferenceReport

// bool migration_exists = 1;
inline void DifferenceReport::clear_migration_exists() {
  migration_exists_ = false;
}
inline bool DifferenceReport::migration_exists() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DifferenceReport.migration_exists)
  return migration_exists_;
}
inline void DifferenceReport::set_migration_exists(bool value) {
  
  migration_exists_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DifferenceReport.migration_exists)
}

// repeated .org.yaorm.Difference differences = 2;
inline int DifferenceReport::differences_size() const {
  return differences_.size();
}
inline void DifferenceReport::clear_differences() {
  differences_.Clear();
}
inline const ::org::yaorm::Difference& DifferenceReport::differences(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.DifferenceReport.differences)
  return differences_.Get(index);
}
inline ::org::yaorm::Difference* DifferenceReport::mutable_differences(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.DifferenceReport.differences)
  return differences_.Mutable(index);
}
inline ::org::yaorm::Difference* DifferenceReport::add_differences() {
  // @@protoc_insertion_point(field_add:org.yaorm.DifferenceReport.differences)
  return differences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >*
DifferenceReport::mutable_differences() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.DifferenceReport.differences)
  return &differences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >&
DifferenceReport::differences() const {
  // @@protoc_insertion_point(field_list:org.yaorm.DifferenceReport.differences)
  return differences_;
}

// -------------------------------------------------------------------

// Column

// .org.yaorm.ColumnDefinition definition = 1;
inline bool Column::has_definition() const {
  return this != internal_default_instance() && definition_ != NULL;
}
inline void Column::clear_definition() {
  if (GetArenaNoVirtual() == NULL && definition_ != NULL) delete definition_;
  definition_ = NULL;
}
inline const ::org::yaorm::ColumnDefinition& Column::definition() const {
  const ::org::yaorm::ColumnDefinition* p = definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.Column.definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ColumnDefinition*>(
      &::org::yaorm::_ColumnDefinition_default_instance_);
}
inline ::org::yaorm::ColumnDefinition* Column::mutable_definition() {
  
  if (definition_ == NULL) {
    definition_ = new ::org::yaorm::ColumnDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Column.definition)
  return definition_;
}
inline ::org::yaorm::ColumnDefinition* Column::release_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.Column.definition)
  
  ::org::yaorm::ColumnDefinition* temp = definition_;
  definition_ = NULL;
  return temp;
}
inline void Column::set_allocated_definition(::org::yaorm::ColumnDefinition* definition) {
  delete definition_;
  definition_ = definition;
  if (definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Column.definition)
}

// double double_holder = 2;
inline void Column::clear_double_holder() {
  double_holder_ = 0;
}
inline double Column::double_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.double_holder)
  return double_holder_;
}
inline void Column::set_double_holder(double value) {
  
  double_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.double_holder)
}

// float float_holder = 3;
inline void Column::clear_float_holder() {
  float_holder_ = 0;
}
inline float Column::float_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.float_holder)
  return float_holder_;
}
inline void Column::set_float_holder(float value) {
  
  float_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.float_holder)
}

// int32 int32_holder = 4;
inline void Column::clear_int32_holder() {
  int32_holder_ = 0;
}
inline ::google::protobuf::int32 Column::int32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.int32_holder)
  return int32_holder_;
}
inline void Column::set_int32_holder(::google::protobuf::int32 value) {
  
  int32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.int32_holder)
}

// int64 int64_holder = 5;
inline void Column::clear_int64_holder() {
  int64_holder_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Column::int64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.int64_holder)
  return int64_holder_;
}
inline void Column::set_int64_holder(::google::protobuf::int64 value) {
  
  int64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.int64_holder)
}

// uint32 uint32_holder = 6;
inline void Column::clear_uint32_holder() {
  uint32_holder_ = 0u;
}
inline ::google::protobuf::uint32 Column::uint32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.uint32_holder)
  return uint32_holder_;
}
inline void Column::set_uint32_holder(::google::protobuf::uint32 value) {
  
  uint32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.uint32_holder)
}

// uint64 uint64_holder = 7;
inline void Column::clear_uint64_holder() {
  uint64_holder_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Column::uint64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.uint64_holder)
  return uint64_holder_;
}
inline void Column::set_uint64_holder(::google::protobuf::uint64 value) {
  
  uint64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.uint64_holder)
}

// sint32 sint32_holder = 8;
inline void Column::clear_sint32_holder() {
  sint32_holder_ = 0;
}
inline ::google::protobuf::int32 Column::sint32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.sint32_holder)
  return sint32_holder_;
}
inline void Column::set_sint32_holder(::google::protobuf::int32 value) {
  
  sint32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.sint32_holder)
}

// sint64 sint64_holder = 9;
inline void Column::clear_sint64_holder() {
  sint64_holder_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Column::sint64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.sint64_holder)
  return sint64_holder_;
}
inline void Column::set_sint64_holder(::google::protobuf::int64 value) {
  
  sint64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.sint64_holder)
}

// fixed32 fixed32_holder = 10;
inline void Column::clear_fixed32_holder() {
  fixed32_holder_ = 0u;
}
inline ::google::protobuf::uint32 Column::fixed32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.fixed32_holder)
  return fixed32_holder_;
}
inline void Column::set_fixed32_holder(::google::protobuf::uint32 value) {
  
  fixed32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.fixed32_holder)
}

// fixed64 fixed64_holder = 11;
inline void Column::clear_fixed64_holder() {
  fixed64_holder_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Column::fixed64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.fixed64_holder)
  return fixed64_holder_;
}
inline void Column::set_fixed64_holder(::google::protobuf::uint64 value) {
  
  fixed64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.fixed64_holder)
}

// sfixed32 sfixed32_holder = 12;
inline void Column::clear_sfixed32_holder() {
  sfixed32_holder_ = 0;
}
inline ::google::protobuf::int32 Column::sfixed32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.sfixed32_holder)
  return sfixed32_holder_;
}
inline void Column::set_sfixed32_holder(::google::protobuf::int32 value) {
  
  sfixed32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.sfixed32_holder)
}

// sfixed64 sfixed64_holder = 13;
inline void Column::clear_sfixed64_holder() {
  sfixed64_holder_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Column::sfixed64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.sfixed64_holder)
  return sfixed64_holder_;
}
inline void Column::set_sfixed64_holder(::google::protobuf::int64 value) {
  
  sfixed64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.sfixed64_holder)
}

// bool bool_holder = 14;
inline void Column::clear_bool_holder() {
  bool_holder_ = false;
}
inline bool Column::bool_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.bool_holder)
  return bool_holder_;
}
inline void Column::set_bool_holder(bool value) {
  
  bool_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Column.bool_holder)
}

// string string_holder = 15;
inline void Column::clear_string_holder() {
  string_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::string_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.string_holder)
  return string_holder_.GetNoArena();
}
inline void Column::set_string_holder(const ::std::string& value) {
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Column.string_holder)
}
#if LANG_CXX11
inline void Column::set_string_holder(::std::string&& value) {
  
  string_holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.Column.string_holder)
}
#endif
inline void Column::set_string_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Column.string_holder)
}
inline void Column::set_string_holder(const char* value, size_t size) {
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Column.string_holder)
}
inline ::std::string* Column::mutable_string_holder() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Column.string_holder)
  return string_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_string_holder() {
  // @@protoc_insertion_point(field_release:org.yaorm.Column.string_holder)
  
  return string_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_string_holder(::std::string* string_holder) {
  if (string_holder != NULL) {
    
  } else {
    
  }
  string_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_holder);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Column.string_holder)
}

// bytes bytes_holder = 16;
inline void Column::clear_bytes_holder() {
  bytes_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::bytes_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Column.bytes_holder)
  return bytes_holder_.GetNoArena();
}
inline void Column::set_bytes_holder(const ::std::string& value) {
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Column.bytes_holder)
}
#if LANG_CXX11
inline void Column::set_bytes_holder(::std::string&& value) {
  
  bytes_holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.Column.bytes_holder)
}
#endif
inline void Column::set_bytes_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Column.bytes_holder)
}
inline void Column::set_bytes_holder(const void* value, size_t size) {
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Column.bytes_holder)
}
inline ::std::string* Column::mutable_bytes_holder() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Column.bytes_holder)
  return bytes_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_bytes_holder() {
  // @@protoc_insertion_point(field_release:org.yaorm.Column.bytes_holder)
  
  return bytes_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_bytes_holder(::std::string* bytes_holder) {
  if (bytes_holder != NULL) {
    
  } else {
    
  }
  bytes_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_holder);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Column.bytes_holder)
}

// -------------------------------------------------------------------

// Record

// repeated .org.yaorm.Column columns = 1;
inline int Record::columns_size() const {
  return columns_.size();
}
inline void Record::clear_columns() {
  columns_.Clear();
}
inline const ::org::yaorm::Column& Record::columns(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Record.columns)
  return columns_.Get(index);
}
inline ::org::yaorm::Column* Record::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Record.columns)
  return columns_.Mutable(index);
}
inline ::org::yaorm::Column* Record::add_columns() {
  // @@protoc_insertion_point(field_add:org.yaorm.Record.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::Column >*
Record::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Record.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Column >&
Record::columns() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Record.columns)
  return columns_;
}

// -------------------------------------------------------------------

// Records

// repeated .org.yaorm.Record records = 1;
inline int Records::records_size() const {
  return records_.size();
}
inline void Records::clear_records() {
  records_.Clear();
}
inline const ::org::yaorm::Record& Records::records(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Records.records)
  return records_.Get(index);
}
inline ::org::yaorm::Record* Records::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Records.records)
  return records_.Mutable(index);
}
inline ::org::yaorm::Record* Records::add_records() {
  // @@protoc_insertion_point(field_add:org.yaorm.Records.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >*
Records::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Records.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >&
Records::records() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Records.records)
  return records_;
}

// -------------------------------------------------------------------

// TableRecords

// .org.yaorm.TableDefinition table_definition = 1;
inline bool TableRecords::has_table_definition() const {
  return this != internal_default_instance() && table_definition_ != NULL;
}
inline void TableRecords::clear_table_definition() {
  if (GetArenaNoVirtual() == NULL && table_definition_ != NULL) delete table_definition_;
  table_definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& TableRecords::table_definition() const {
  const ::org::yaorm::TableDefinition* p = table_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.TableRecords.table_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* TableRecords::mutable_table_definition() {
  
  if (table_definition_ == NULL) {
    table_definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableRecords.table_definition)
  return table_definition_;
}
inline ::org::yaorm::TableDefinition* TableRecords::release_table_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableRecords.table_definition)
  
  ::org::yaorm::TableDefinition* temp = table_definition_;
  table_definition_ = NULL;
  return temp;
}
inline void TableRecords::set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition) {
  delete table_definition_;
  table_definition_ = table_definition;
  if (table_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableRecords.table_definition)
}

// .org.yaorm.Records records = 2;
inline bool TableRecords::has_records() const {
  return this != internal_default_instance() && records_ != NULL;
}
inline void TableRecords::clear_records() {
  if (GetArenaNoVirtual() == NULL && records_ != NULL) delete records_;
  records_ = NULL;
}
inline const ::org::yaorm::Records& TableRecords::records() const {
  const ::org::yaorm::Records* p = records_;
  // @@protoc_insertion_point(field_get:org.yaorm.TableRecords.records)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Records*>(
      &::org::yaorm::_Records_default_instance_);
}
inline ::org::yaorm::Records* TableRecords::mutable_records() {
  
  if (records_ == NULL) {
    records_ = new ::org::yaorm::Records;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableRecords.records)
  return records_;
}
inline ::org::yaorm::Records* TableRecords::release_records() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableRecords.records)
  
  ::org::yaorm::Records* temp = records_;
  records_ = NULL;
  return temp;
}
inline void TableRecords::set_allocated_records(::org::yaorm::Records* records) {
  delete records_;
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableRecords.records)
}

// string table_name = 3;
inline void TableRecords::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableRecords::table_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableRecords.table_name)
  return table_name_.GetNoArena();
}
inline void TableRecords::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.TableRecords.table_name)
}
#if LANG_CXX11
inline void TableRecords::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.TableRecords.table_name)
}
#endif
inline void TableRecords::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.TableRecords.table_name)
}
inline void TableRecords::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.TableRecords.table_name)
}
inline ::std::string* TableRecords::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableRecords.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableRecords::release_table_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableRecords.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableRecords::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableRecords.table_name)
}

// -------------------------------------------------------------------

// AllTableRecords

// repeated .org.yaorm.TableRecords table_records = 1;
inline int AllTableRecords::table_records_size() const {
  return table_records_.size();
}
inline void AllTableRecords::clear_table_records() {
  table_records_.Clear();
}
inline const ::org::yaorm::TableRecords& AllTableRecords::table_records(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.AllTableRecords.table_records)
  return table_records_.Get(index);
}
inline ::org::yaorm::TableRecords* AllTableRecords::mutable_table_records(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.AllTableRecords.table_records)
  return table_records_.Mutable(index);
}
inline ::org::yaorm::TableRecords* AllTableRecords::add_table_records() {
  // @@protoc_insertion_point(field_add:org.yaorm.AllTableRecords.table_records)
  return table_records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableRecords >*
AllTableRecords::mutable_table_records() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.AllTableRecords.table_records)
  return &table_records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableRecords >&
AllTableRecords::table_records() const {
  // @@protoc_insertion_point(field_list:org.yaorm.AllTableRecords.table_records)
  return table_records_;
}

// -------------------------------------------------------------------

// DatabaseOperation

// .org.yaorm.TableDefinition table_definition = 1;
inline bool DatabaseOperation::has_table_definition() const {
  return this != internal_default_instance() && table_definition_ != NULL;
}
inline void DatabaseOperation::clear_table_definition() {
  if (GetArenaNoVirtual() == NULL && table_definition_ != NULL) delete table_definition_;
  table_definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& DatabaseOperation::table_definition() const {
  const ::org::yaorm::TableDefinition* p = table_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperation.table_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* DatabaseOperation::mutable_table_definition() {
  
  if (table_definition_ == NULL) {
    table_definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperation.table_definition)
  return table_definition_;
}
inline ::org::yaorm::TableDefinition* DatabaseOperation::release_table_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperation.table_definition)
  
  ::org::yaorm::TableDefinition* temp = table_definition_;
  table_definition_ = NULL;
  return temp;
}
inline void DatabaseOperation::set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition) {
  delete table_definition_;
  table_definition_ = table_definition;
  if (table_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperation.table_definition)
}

// .org.yaorm.Records records = 2;
inline bool DatabaseOperation::has_records() const {
  return this != internal_default_instance() && records_ != NULL;
}
inline void DatabaseOperation::clear_records() {
  if (GetArenaNoVirtual() == NULL && records_ != NULL) delete records_;
  records_ = NULL;
}
inline const ::org::yaorm::Records& DatabaseOperation::records() const {
  const ::org::yaorm::Records* p = records_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperation.records)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Records*>(
      &::org::yaorm::_Records_default_instance_);
}
inline ::org::yaorm::Records* DatabaseOperation::mutable_records() {
  
  if (records_ == NULL) {
    records_ = new ::org::yaorm::Records;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperation.records)
  return records_;
}
inline ::org::yaorm::Records* DatabaseOperation::release_records() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperation.records)
  
  ::org::yaorm::Records* temp = records_;
  records_ = NULL;
  return temp;
}
inline void DatabaseOperation::set_allocated_records(::org::yaorm::Records* records) {
  delete records_;
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperation.records)
}

// .org.yaorm.Index index = 3;
inline bool DatabaseOperation::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline void DatabaseOperation::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
inline const ::org::yaorm::Index& DatabaseOperation::index() const {
  const ::org::yaorm::Index* p = index_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperation.index)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Index*>(
      &::org::yaorm::_Index_default_instance_);
}
inline ::org::yaorm::Index* DatabaseOperation::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::org::yaorm::Index;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperation.index)
  return index_;
}
inline ::org::yaorm::Index* DatabaseOperation::release_index() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperation.index)
  
  ::org::yaorm::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline void DatabaseOperation::set_allocated_index(::org::yaorm::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperation.index)
}

// .org.yaorm.ColumnDefinition column_definition = 4;
inline bool DatabaseOperation::has_column_definition() const {
  return this != internal_default_instance() && column_definition_ != NULL;
}
inline void DatabaseOperation::clear_column_definition() {
  if (GetArenaNoVirtual() == NULL && column_definition_ != NULL) delete column_definition_;
  column_definition_ = NULL;
}
inline const ::org::yaorm::ColumnDefinition& DatabaseOperation::column_definition() const {
  const ::org::yaorm::ColumnDefinition* p = column_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperation.column_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ColumnDefinition*>(
      &::org::yaorm::_ColumnDefinition_default_instance_);
}
inline ::org::yaorm::ColumnDefinition* DatabaseOperation::mutable_column_definition() {
  
  if (column_definition_ == NULL) {
    column_definition_ = new ::org::yaorm::ColumnDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperation.column_definition)
  return column_definition_;
}
inline ::org::yaorm::ColumnDefinition* DatabaseOperation::release_column_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperation.column_definition)
  
  ::org::yaorm::ColumnDefinition* temp = column_definition_;
  column_definition_ = NULL;
  return temp;
}
inline void DatabaseOperation::set_allocated_column_definition(::org::yaorm::ColumnDefinition* column_definition) {
  delete column_definition_;
  column_definition_ = column_definition;
  if (column_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperation.column_definition)
}

// .org.yaorm.WhereClause where_clause = 5;
inline bool DatabaseOperation::has_where_clause() const {
  return this != internal_default_instance() && where_clause_ != NULL;
}
inline void DatabaseOperation::clear_where_clause() {
  if (GetArenaNoVirtual() == NULL && where_clause_ != NULL) delete where_clause_;
  where_clause_ = NULL;
}
inline const ::org::yaorm::WhereClause& DatabaseOperation::where_clause() const {
  const ::org::yaorm::WhereClause* p = where_clause_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperation.where_clause)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::WhereClause*>(
      &::org::yaorm::_WhereClause_default_instance_);
}
inline ::org::yaorm::WhereClause* DatabaseOperation::mutable_where_clause() {
  
  if (where_clause_ == NULL) {
    where_clause_ = new ::org::yaorm::WhereClause;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperation.where_clause)
  return where_clause_;
}
inline ::org::yaorm::WhereClause* DatabaseOperation::release_where_clause() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperation.where_clause)
  
  ::org::yaorm::WhereClause* temp = where_clause_;
  where_clause_ = NULL;
  return temp;
}
inline void DatabaseOperation::set_allocated_where_clause(::org::yaorm::WhereClause* where_clause) {
  delete where_clause_;
  where_clause_ = where_clause;
  if (where_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperation.where_clause)
}

// .org.yaorm.DatabaseOperation.DatabaseOperationType database_operation_type = 6;
inline void DatabaseOperation::clear_database_operation_type() {
  database_operation_type_ = 0;
}
inline ::org::yaorm::DatabaseOperation_DatabaseOperationType DatabaseOperation::database_operation_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperation.database_operation_type)
  return static_cast< ::org::yaorm::DatabaseOperation_DatabaseOperationType >(database_operation_type_);
}
inline void DatabaseOperation::set_database_operation_type(::org::yaorm::DatabaseOperation_DatabaseOperationType value) {
  
  database_operation_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseOperation.database_operation_type)
}

// -------------------------------------------------------------------

// DatabaseOperationResult

// bool bool_result = 1;
inline void DatabaseOperationResult::clear_bool_result() {
  bool_result_ = false;
}
inline bool DatabaseOperationResult::bool_result() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperationResult.bool_result)
  return bool_result_;
}
inline void DatabaseOperationResult::set_bool_result(bool value) {
  
  bool_result_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseOperationResult.bool_result)
}

// int64 count_result = 2;
inline void DatabaseOperationResult::clear_count_result() {
  count_result_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DatabaseOperationResult::count_result() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperationResult.count_result)
  return count_result_;
}
inline void DatabaseOperationResult::set_count_result(::google::protobuf::int64 value) {
  
  count_result_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseOperationResult.count_result)
}

// .org.yaorm.Record record_result = 3;
inline bool DatabaseOperationResult::has_record_result() const {
  return this != internal_default_instance() && record_result_ != NULL;
}
inline void DatabaseOperationResult::clear_record_result() {
  if (GetArenaNoVirtual() == NULL && record_result_ != NULL) delete record_result_;
  record_result_ = NULL;
}
inline const ::org::yaorm::Record& DatabaseOperationResult::record_result() const {
  const ::org::yaorm::Record* p = record_result_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperationResult.record_result)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Record*>(
      &::org::yaorm::_Record_default_instance_);
}
inline ::org::yaorm::Record* DatabaseOperationResult::mutable_record_result() {
  
  if (record_result_ == NULL) {
    record_result_ = new ::org::yaorm::Record;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperationResult.record_result)
  return record_result_;
}
inline ::org::yaorm::Record* DatabaseOperationResult::release_record_result() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperationResult.record_result)
  
  ::org::yaorm::Record* temp = record_result_;
  record_result_ = NULL;
  return temp;
}
inline void DatabaseOperationResult::set_allocated_record_result(::org::yaorm::Record* record_result) {
  delete record_result_;
  record_result_ = record_result;
  if (record_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperationResult.record_result)
}

// .org.yaorm.Records records_result = 4;
inline bool DatabaseOperationResult::has_records_result() const {
  return this != internal_default_instance() && records_result_ != NULL;
}
inline void DatabaseOperationResult::clear_records_result() {
  if (GetArenaNoVirtual() == NULL && records_result_ != NULL) delete records_result_;
  records_result_ = NULL;
}
inline const ::org::yaorm::Records& DatabaseOperationResult::records_result() const {
  const ::org::yaorm::Records* p = records_result_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperationResult.records_result)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Records*>(
      &::org::yaorm::_Records_default_instance_);
}
inline ::org::yaorm::Records* DatabaseOperationResult::mutable_records_result() {
  
  if (records_result_ == NULL) {
    records_result_ = new ::org::yaorm::Records;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperationResult.records_result)
  return records_result_;
}
inline ::org::yaorm::Records* DatabaseOperationResult::release_records_result() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperationResult.records_result)
  
  ::org::yaorm::Records* temp = records_result_;
  records_result_ = NULL;
  return temp;
}
inline void DatabaseOperationResult::set_allocated_records_result(::org::yaorm::Records* records_result) {
  delete records_result_;
  records_result_ = records_result;
  if (records_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperationResult.records_result)
}

// string error_message = 5;
inline void DatabaseOperationResult::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatabaseOperationResult::error_message() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperationResult.error_message)
  return error_message_.GetNoArena();
}
inline void DatabaseOperationResult::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseOperationResult.error_message)
}
#if LANG_CXX11
inline void DatabaseOperationResult::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.DatabaseOperationResult.error_message)
}
#endif
inline void DatabaseOperationResult::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.DatabaseOperationResult.error_message)
}
inline void DatabaseOperationResult::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.DatabaseOperationResult.error_message)
}
inline ::std::string* DatabaseOperationResult::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperationResult.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatabaseOperationResult::release_error_message() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperationResult.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseOperationResult::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperationResult.error_message)
}

// .org.yaorm.DatabaseOperation database_operation = 6;
inline bool DatabaseOperationResult::has_database_operation() const {
  return this != internal_default_instance() && database_operation_ != NULL;
}
inline void DatabaseOperationResult::clear_database_operation() {
  if (GetArenaNoVirtual() == NULL && database_operation_ != NULL) delete database_operation_;
  database_operation_ = NULL;
}
inline const ::org::yaorm::DatabaseOperation& DatabaseOperationResult::database_operation() const {
  const ::org::yaorm::DatabaseOperation* p = database_operation_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseOperationResult.database_operation)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::DatabaseOperation*>(
      &::org::yaorm::_DatabaseOperation_default_instance_);
}
inline ::org::yaorm::DatabaseOperation* DatabaseOperationResult::mutable_database_operation() {
  
  if (database_operation_ == NULL) {
    database_operation_ = new ::org::yaorm::DatabaseOperation;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseOperationResult.database_operation)
  return database_operation_;
}
inline ::org::yaorm::DatabaseOperation* DatabaseOperationResult::release_database_operation() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseOperationResult.database_operation)
  
  ::org::yaorm::DatabaseOperation* temp = database_operation_;
  database_operation_ = NULL;
  return temp;
}
inline void DatabaseOperationResult::set_allocated_database_operation(::org::yaorm::DatabaseOperation* database_operation) {
  delete database_operation_;
  database_operation_ = database_operation;
  if (database_operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseOperationResult.database_operation)
}

// -------------------------------------------------------------------

// DatabaseDefinition

// string schema = 1;
inline void DatabaseDefinition::clear_schema() {
  schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatabaseDefinition::schema() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseDefinition.schema)
  return schema_.GetNoArena();
}
inline void DatabaseDefinition::set_schema(const ::std::string& value) {
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseDefinition.schema)
}
#if LANG_CXX11
inline void DatabaseDefinition::set_schema(::std::string&& value) {
  
  schema_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.DatabaseDefinition.schema)
}
#endif
inline void DatabaseDefinition::set_schema(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.DatabaseDefinition.schema)
}
inline void DatabaseDefinition::set_schema(const char* value, size_t size) {
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.DatabaseDefinition.schema)
}
inline ::std::string* DatabaseDefinition::mutable_schema() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseDefinition.schema)
  return schema_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatabaseDefinition::release_schema() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseDefinition.schema)
  
  return schema_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseDefinition::set_allocated_schema(::std::string* schema) {
  if (schema != NULL) {
    
  } else {
    
  }
  schema_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseDefinition.schema)
}

// string name = 2;
inline void DatabaseDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatabaseDefinition::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseDefinition.name)
  return name_.GetNoArena();
}
inline void DatabaseDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseDefinition.name)
}
#if LANG_CXX11
inline void DatabaseDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.DatabaseDefinition.name)
}
#endif
inline void DatabaseDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.DatabaseDefinition.name)
}
inline void DatabaseDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.DatabaseDefinition.name)
}
inline ::std::string* DatabaseDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatabaseDefinition::release_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseDefinition.name)
}

// .org.yaorm.TableDefinitions table_definitions = 3;
inline bool DatabaseDefinition::has_table_definitions() const {
  return this != internal_default_instance() && table_definitions_ != NULL;
}
inline void DatabaseDefinition::clear_table_definitions() {
  if (GetArenaNoVirtual() == NULL && table_definitions_ != NULL) delete table_definitions_;
  table_definitions_ = NULL;
}
inline const ::org::yaorm::TableDefinitions& DatabaseDefinition::table_definitions() const {
  const ::org::yaorm::TableDefinitions* p = table_definitions_;
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseDefinition.table_definitions)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinitions*>(
      &::org::yaorm::_TableDefinitions_default_instance_);
}
inline ::org::yaorm::TableDefinitions* DatabaseDefinition::mutable_table_definitions() {
  
  if (table_definitions_ == NULL) {
    table_definitions_ = new ::org::yaorm::TableDefinitions;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseDefinition.table_definitions)
  return table_definitions_;
}
inline ::org::yaorm::TableDefinitions* DatabaseDefinition::release_table_definitions() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseDefinition.table_definitions)
  
  ::org::yaorm::TableDefinitions* temp = table_definitions_;
  table_definitions_ = NULL;
  return temp;
}
inline void DatabaseDefinition::set_allocated_table_definitions(::org::yaorm::TableDefinitions* table_definitions) {
  delete table_definitions_;
  table_definitions_ = table_definitions;
  if (table_definitions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseDefinition.table_definitions)
}

// repeated .org.yaorm.TableDefinitionGraphs table_definition_graphs = 4;
inline int DatabaseDefinition::table_definition_graphs_size() const {
  return table_definition_graphs_.size();
}
inline void DatabaseDefinition::clear_table_definition_graphs() {
  table_definition_graphs_.Clear();
}
inline const ::org::yaorm::TableDefinitionGraphs& DatabaseDefinition::table_definition_graphs(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseDefinition.table_definition_graphs)
  return table_definition_graphs_.Get(index);
}
inline ::org::yaorm::TableDefinitionGraphs* DatabaseDefinition::mutable_table_definition_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseDefinition.table_definition_graphs)
  return table_definition_graphs_.Mutable(index);
}
inline ::org::yaorm::TableDefinitionGraphs* DatabaseDefinition::add_table_definition_graphs() {
  // @@protoc_insertion_point(field_add:org.yaorm.DatabaseDefinition.table_definition_graphs)
  return table_definition_graphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraphs >*
DatabaseDefinition::mutable_table_definition_graphs() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.DatabaseDefinition.table_definition_graphs)
  return &table_definition_graphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraphs >&
DatabaseDefinition::table_definition_graphs() const {
  // @@protoc_insertion_point(field_list:org.yaorm.DatabaseDefinition.table_definition_graphs)
  return table_definition_graphs_;
}

// -------------------------------------------------------------------

// TableDefinitionGraph

// .org.yaorm.TableDefinition main_table_definition = 1;
inline bool TableDefinitionGraph::has_main_table_definition() const {
  return this != internal_default_instance() && main_table_definition_ != NULL;
}
inline void TableDefinitionGraph::clear_main_table_definition() {
  if (GetArenaNoVirtual() == NULL && main_table_definition_ != NULL) delete main_table_definition_;
  main_table_definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& TableDefinitionGraph::main_table_definition() const {
  const ::org::yaorm::TableDefinition* p = main_table_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraph.main_table_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* TableDefinitionGraph::mutable_main_table_definition() {
  
  if (main_table_definition_ == NULL) {
    main_table_definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitionGraph.main_table_definition)
  return main_table_definition_;
}
inline ::org::yaorm::TableDefinition* TableDefinitionGraph::release_main_table_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinitionGraph.main_table_definition)
  
  ::org::yaorm::TableDefinition* temp = main_table_definition_;
  main_table_definition_ = NULL;
  return temp;
}
inline void TableDefinitionGraph::set_allocated_main_table_definition(::org::yaorm::TableDefinition* main_table_definition) {
  delete main_table_definition_;
  main_table_definition_ = main_table_definition;
  if (main_table_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinitionGraph.main_table_definition)
}

// .org.yaorm.TableDefinition other_table_definition = 2;
inline bool TableDefinitionGraph::has_other_table_definition() const {
  return this != internal_default_instance() && other_table_definition_ != NULL;
}
inline void TableDefinitionGraph::clear_other_table_definition() {
  if (GetArenaNoVirtual() == NULL && other_table_definition_ != NULL) delete other_table_definition_;
  other_table_definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& TableDefinitionGraph::other_table_definition() const {
  const ::org::yaorm::TableDefinition* p = other_table_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraph.other_table_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* TableDefinitionGraph::mutable_other_table_definition() {
  
  if (other_table_definition_ == NULL) {
    other_table_definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitionGraph.other_table_definition)
  return other_table_definition_;
}
inline ::org::yaorm::TableDefinition* TableDefinitionGraph::release_other_table_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinitionGraph.other_table_definition)
  
  ::org::yaorm::TableDefinition* temp = other_table_definition_;
  other_table_definition_ = NULL;
  return temp;
}
inline void TableDefinitionGraph::set_allocated_other_table_definition(::org::yaorm::TableDefinition* other_table_definition) {
  delete other_table_definition_;
  other_table_definition_ = other_table_definition;
  if (other_table_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinitionGraph.other_table_definition)
}

// .org.yaorm.TableDefinition linker_table_table = 3;
inline bool TableDefinitionGraph::has_linker_table_table() const {
  return this != internal_default_instance() && linker_table_table_ != NULL;
}
inline void TableDefinitionGraph::clear_linker_table_table() {
  if (GetArenaNoVirtual() == NULL && linker_table_table_ != NULL) delete linker_table_table_;
  linker_table_table_ = NULL;
}
inline const ::org::yaorm::TableDefinition& TableDefinitionGraph::linker_table_table() const {
  const ::org::yaorm::TableDefinition* p = linker_table_table_;
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraph.linker_table_table)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* TableDefinitionGraph::mutable_linker_table_table() {
  
  if (linker_table_table_ == NULL) {
    linker_table_table_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitionGraph.linker_table_table)
  return linker_table_table_;
}
inline ::org::yaorm::TableDefinition* TableDefinitionGraph::release_linker_table_table() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinitionGraph.linker_table_table)
  
  ::org::yaorm::TableDefinition* temp = linker_table_table_;
  linker_table_table_ = NULL;
  return temp;
}
inline void TableDefinitionGraph::set_allocated_linker_table_table(::org::yaorm::TableDefinition* linker_table_table) {
  delete linker_table_table_;
  linker_table_table_ = linker_table_table;
  if (linker_table_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinitionGraph.linker_table_table)
}

// .org.yaorm.TableDefinitionGraph.TableDefinitionGraphType definition_graph_type = 4;
inline void TableDefinitionGraph::clear_definition_graph_type() {
  definition_graph_type_ = 0;
}
inline ::org::yaorm::TableDefinitionGraph_TableDefinitionGraphType TableDefinitionGraph::definition_graph_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraph.definition_graph_type)
  return static_cast< ::org::yaorm::TableDefinitionGraph_TableDefinitionGraphType >(definition_graph_type_);
}
inline void TableDefinitionGraph::set_definition_graph_type(::org::yaorm::TableDefinitionGraph_TableDefinitionGraphType value) {
  
  definition_graph_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.TableDefinitionGraph.definition_graph_type)
}

// string main_name = 5;
inline void TableDefinitionGraph::clear_main_name() {
  main_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableDefinitionGraph::main_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraph.main_name)
  return main_name_.GetNoArena();
}
inline void TableDefinitionGraph::set_main_name(const ::std::string& value) {
  
  main_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.TableDefinitionGraph.main_name)
}
#if LANG_CXX11
inline void TableDefinitionGraph::set_main_name(::std::string&& value) {
  
  main_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.TableDefinitionGraph.main_name)
}
#endif
inline void TableDefinitionGraph::set_main_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  main_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.TableDefinitionGraph.main_name)
}
inline void TableDefinitionGraph::set_main_name(const char* value, size_t size) {
  
  main_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.TableDefinitionGraph.main_name)
}
inline ::std::string* TableDefinitionGraph::mutable_main_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitionGraph.main_name)
  return main_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableDefinitionGraph::release_main_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinitionGraph.main_name)
  
  return main_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDefinitionGraph::set_allocated_main_name(::std::string* main_name) {
  if (main_name != NULL) {
    
  } else {
    
  }
  main_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinitionGraph.main_name)
}

// string other_name = 6;
inline void TableDefinitionGraph::clear_other_name() {
  other_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableDefinitionGraph::other_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraph.other_name)
  return other_name_.GetNoArena();
}
inline void TableDefinitionGraph::set_other_name(const ::std::string& value) {
  
  other_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.TableDefinitionGraph.other_name)
}
#if LANG_CXX11
inline void TableDefinitionGraph::set_other_name(::std::string&& value) {
  
  other_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.TableDefinitionGraph.other_name)
}
#endif
inline void TableDefinitionGraph::set_other_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  other_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.TableDefinitionGraph.other_name)
}
inline void TableDefinitionGraph::set_other_name(const char* value, size_t size) {
  
  other_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.TableDefinitionGraph.other_name)
}
inline ::std::string* TableDefinitionGraph::mutable_other_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitionGraph.other_name)
  return other_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableDefinitionGraph::release_other_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinitionGraph.other_name)
  
  return other_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDefinitionGraph::set_allocated_other_name(::std::string* other_name) {
  if (other_name != NULL) {
    
  } else {
    
  }
  other_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinitionGraph.other_name)
}

// string column_name = 7;
inline void TableDefinitionGraph::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableDefinitionGraph::column_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraph.column_name)
  return column_name_.GetNoArena();
}
inline void TableDefinitionGraph::set_column_name(const ::std::string& value) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.TableDefinitionGraph.column_name)
}
#if LANG_CXX11
inline void TableDefinitionGraph::set_column_name(::std::string&& value) {
  
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.TableDefinitionGraph.column_name)
}
#endif
inline void TableDefinitionGraph::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.TableDefinitionGraph.column_name)
}
inline void TableDefinitionGraph::set_column_name(const char* value, size_t size) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.TableDefinitionGraph.column_name)
}
inline ::std::string* TableDefinitionGraph::mutable_column_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitionGraph.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableDefinitionGraph::release_column_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinitionGraph.column_name)
  
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDefinitionGraph::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    
  } else {
    
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinitionGraph.column_name)
}

// -------------------------------------------------------------------

// TableDefinitionGraphs

// .org.yaorm.TableDefinition main_table_definition = 1;
inline bool TableDefinitionGraphs::has_main_table_definition() const {
  return this != internal_default_instance() && main_table_definition_ != NULL;
}
inline void TableDefinitionGraphs::clear_main_table_definition() {
  if (GetArenaNoVirtual() == NULL && main_table_definition_ != NULL) delete main_table_definition_;
  main_table_definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& TableDefinitionGraphs::main_table_definition() const {
  const ::org::yaorm::TableDefinition* p = main_table_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraphs.main_table_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* TableDefinitionGraphs::mutable_main_table_definition() {
  
  if (main_table_definition_ == NULL) {
    main_table_definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitionGraphs.main_table_definition)
  return main_table_definition_;
}
inline ::org::yaorm::TableDefinition* TableDefinitionGraphs::release_main_table_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.TableDefinitionGraphs.main_table_definition)
  
  ::org::yaorm::TableDefinition* temp = main_table_definition_;
  main_table_definition_ = NULL;
  return temp;
}
inline void TableDefinitionGraphs::set_allocated_main_table_definition(::org::yaorm::TableDefinition* main_table_definition) {
  delete main_table_definition_;
  main_table_definition_ = main_table_definition;
  if (main_table_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.TableDefinitionGraphs.main_table_definition)
}

// repeated .org.yaorm.TableDefinitionGraph table_definition_graphs = 2;
inline int TableDefinitionGraphs::table_definition_graphs_size() const {
  return table_definition_graphs_.size();
}
inline void TableDefinitionGraphs::clear_table_definition_graphs() {
  table_definition_graphs_.Clear();
}
inline const ::org::yaorm::TableDefinitionGraph& TableDefinitionGraphs::table_definition_graphs(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.TableDefinitionGraphs.table_definition_graphs)
  return table_definition_graphs_.Get(index);
}
inline ::org::yaorm::TableDefinitionGraph* TableDefinitionGraphs::mutable_table_definition_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.TableDefinitionGraphs.table_definition_graphs)
  return table_definition_graphs_.Mutable(index);
}
inline ::org::yaorm::TableDefinitionGraph* TableDefinitionGraphs::add_table_definition_graphs() {
  // @@protoc_insertion_point(field_add:org.yaorm.TableDefinitionGraphs.table_definition_graphs)
  return table_definition_graphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraph >*
TableDefinitionGraphs::mutable_table_definition_graphs() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.TableDefinitionGraphs.table_definition_graphs)
  return &table_definition_graphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::TableDefinitionGraph >&
TableDefinitionGraphs::table_definition_graphs() const {
  // @@protoc_insertion_point(field_list:org.yaorm.TableDefinitionGraphs.table_definition_graphs)
  return table_definition_graphs_;
}

// -------------------------------------------------------------------

// ConnectionInfo

// string host = 1;
inline void ConnectionInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::host() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ConnectionInfo.host)
  return host_.GetNoArena();
}
inline void ConnectionInfo::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ConnectionInfo.host)
}
#if LANG_CXX11
inline void ConnectionInfo::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ConnectionInfo.host)
}
#endif
inline void ConnectionInfo::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ConnectionInfo.host)
}
inline void ConnectionInfo::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ConnectionInfo.host)
}
inline ::std::string* ConnectionInfo::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ConnectionInfo.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_host() {
  // @@protoc_insertion_point(field_release:org.yaorm.ConnectionInfo.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ConnectionInfo.host)
}

// string user = 2;
inline void ConnectionInfo::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::user() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ConnectionInfo.user)
  return user_.GetNoArena();
}
inline void ConnectionInfo::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ConnectionInfo.user)
}
#if LANG_CXX11
inline void ConnectionInfo::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ConnectionInfo.user)
}
#endif
inline void ConnectionInfo::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ConnectionInfo.user)
}
inline void ConnectionInfo::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ConnectionInfo.user)
}
inline ::std::string* ConnectionInfo::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ConnectionInfo.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_user() {
  // @@protoc_insertion_point(field_release:org.yaorm.ConnectionInfo.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ConnectionInfo.user)
}

// string password = 3;
inline void ConnectionInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::password() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ConnectionInfo.password)
  return password_.GetNoArena();
}
inline void ConnectionInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ConnectionInfo.password)
}
#if LANG_CXX11
inline void ConnectionInfo::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ConnectionInfo.password)
}
#endif
inline void ConnectionInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ConnectionInfo.password)
}
inline void ConnectionInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ConnectionInfo.password)
}
inline ::std::string* ConnectionInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ConnectionInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_password() {
  // @@protoc_insertion_point(field_release:org.yaorm.ConnectionInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ConnectionInfo.password)
}

// string schema = 4;
inline void ConnectionInfo::clear_schema() {
  schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::schema() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ConnectionInfo.schema)
  return schema_.GetNoArena();
}
inline void ConnectionInfo::set_schema(const ::std::string& value) {
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.ConnectionInfo.schema)
}
#if LANG_CXX11
inline void ConnectionInfo::set_schema(::std::string&& value) {
  
  schema_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.ConnectionInfo.schema)
}
#endif
inline void ConnectionInfo::set_schema(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.ConnectionInfo.schema)
}
inline void ConnectionInfo::set_schema(const char* value, size_t size) {
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.ConnectionInfo.schema)
}
inline ::std::string* ConnectionInfo::mutable_schema() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.ConnectionInfo.schema)
  return schema_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_schema() {
  // @@protoc_insertion_point(field_release:org.yaorm.ConnectionInfo.schema)
  
  return schema_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_schema(::std::string* schema) {
  if (schema != NULL) {
    
  } else {
    
  }
  schema_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.ConnectionInfo.schema)
}

// bool should_create_schema = 5;
inline void ConnectionInfo::clear_should_create_schema() {
  should_create_schema_ = false;
}
inline bool ConnectionInfo::should_create_schema() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ConnectionInfo.should_create_schema)
  return should_create_schema_;
}
inline void ConnectionInfo::set_should_create_schema(bool value) {
  
  should_create_schema_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ConnectionInfo.should_create_schema)
}

// int32 port = 6;
inline void ConnectionInfo::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ConnectionInfo::port() const {
  // @@protoc_insertion_point(field_get:org.yaorm.ConnectionInfo.port)
  return port_;
}
inline void ConnectionInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.ConnectionInfo.port)
}

// -------------------------------------------------------------------

// Migration

// string id = 1;
inline void Migration::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Migration::id() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Migration.id)
  return id_.GetNoArena();
}
inline void Migration::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Migration.id)
}
#if LANG_CXX11
inline void Migration::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.Migration.id)
}
#endif
inline void Migration::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Migration.id)
}
inline void Migration::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Migration.id)
}
inline ::std::string* Migration::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Migration.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Migration::release_id() {
  // @@protoc_insertion_point(field_release:org.yaorm.Migration.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Migration::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Migration.id)
}

// string context_name = 2;
inline void Migration::clear_context_name() {
  context_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Migration::context_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Migration.context_name)
  return context_name_.GetNoArena();
}
inline void Migration::set_context_name(const ::std::string& value) {
  
  context_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Migration.context_name)
}
#if LANG_CXX11
inline void Migration::set_context_name(::std::string&& value) {
  
  context_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.Migration.context_name)
}
#endif
inline void Migration::set_context_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Migration.context_name)
}
inline void Migration::set_context_name(const char* value, size_t size) {
  
  context_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Migration.context_name)
}
inline ::std::string* Migration::mutable_context_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Migration.context_name)
  return context_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Migration::release_context_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.Migration.context_name)
  
  return context_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Migration::set_allocated_context_name(::std::string* context_name) {
  if (context_name != NULL) {
    
  } else {
    
  }
  context_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Migration.context_name)
}

// string model_definition_base64 = 3;
inline void Migration::clear_model_definition_base64() {
  model_definition_base64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Migration::model_definition_base64() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Migration.model_definition_base64)
  return model_definition_base64_.GetNoArena();
}
inline void Migration::set_model_definition_base64(const ::std::string& value) {
  
  model_definition_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Migration.model_definition_base64)
}
#if LANG_CXX11
inline void Migration::set_model_definition_base64(::std::string&& value) {
  
  model_definition_base64_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.Migration.model_definition_base64)
}
#endif
inline void Migration::set_model_definition_base64(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_definition_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Migration.model_definition_base64)
}
inline void Migration::set_model_definition_base64(const char* value, size_t size) {
  
  model_definition_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Migration.model_definition_base64)
}
inline ::std::string* Migration::mutable_model_definition_base64() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Migration.model_definition_base64)
  return model_definition_base64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Migration::release_model_definition_base64() {
  // @@protoc_insertion_point(field_release:org.yaorm.Migration.model_definition_base64)
  
  return model_definition_base64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Migration::set_allocated_model_definition_base64(::std::string* model_definition_base64) {
  if (model_definition_base64 != NULL) {
    
  } else {
    
  }
  model_definition_base64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_definition_base64);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Migration.model_definition_base64)
}

// int64 insert_date = 4;
inline void Migration::clear_insert_date() {
  insert_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Migration::insert_date() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Migration.insert_date)
  return insert_date_;
}
inline void Migration::set_insert_date(::google::protobuf::int64 value) {
  
  insert_date_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Migration.insert_date)
}

// -------------------------------------------------------------------

// DatabaseExecution

// string raw_sql = 1;
inline void DatabaseExecution::clear_raw_sql() {
  raw_sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatabaseExecution::raw_sql() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseExecution.raw_sql)
  return raw_sql_.GetNoArena();
}
inline void DatabaseExecution::set_raw_sql(const ::std::string& value) {
  
  raw_sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseExecution.raw_sql)
}
#if LANG_CXX11
inline void DatabaseExecution::set_raw_sql(::std::string&& value) {
  
  raw_sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.DatabaseExecution.raw_sql)
}
#endif
inline void DatabaseExecution::set_raw_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.DatabaseExecution.raw_sql)
}
inline void DatabaseExecution::set_raw_sql(const char* value, size_t size) {
  
  raw_sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.DatabaseExecution.raw_sql)
}
inline ::std::string* DatabaseExecution::mutable_raw_sql() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseExecution.raw_sql)
  return raw_sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatabaseExecution::release_raw_sql() {
  // @@protoc_insertion_point(field_release:org.yaorm.DatabaseExecution.raw_sql)
  
  return raw_sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseExecution::set_allocated_raw_sql(::std::string* raw_sql) {
  if (raw_sql != NULL) {
    
  } else {
    
  }
  raw_sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_sql);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.DatabaseExecution.raw_sql)
}

// int64 time_called = 2;
inline void DatabaseExecution::clear_time_called() {
  time_called_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DatabaseExecution::time_called() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseExecution.time_called)
  return time_called_;
}
inline void DatabaseExecution::set_time_called(::google::protobuf::int64 value) {
  
  time_called_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseExecution.time_called)
}

// bool result = 3;
inline void DatabaseExecution::clear_result() {
  result_ = false;
}
inline bool DatabaseExecution::result() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseExecution.result)
  return result_;
}
inline void DatabaseExecution::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseExecution.result)
}

// int64 order_called = 4;
inline void DatabaseExecution::clear_order_called() {
  order_called_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DatabaseExecution::order_called() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseExecution.order_called)
  return order_called_;
}
inline void DatabaseExecution::set_order_called(::google::protobuf::int64 value) {
  
  order_called_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseExecution.order_called)
}

// -------------------------------------------------------------------

// DatabaseExecutionReport

// int64 calls_to_database = 1;
inline void DatabaseExecutionReport::clear_calls_to_database() {
  calls_to_database_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DatabaseExecutionReport::calls_to_database() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseExecutionReport.calls_to_database)
  return calls_to_database_;
}
inline void DatabaseExecutionReport::set_calls_to_database(::google::protobuf::int64 value) {
  
  calls_to_database_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DatabaseExecutionReport.calls_to_database)
}

// repeated .org.yaorm.DatabaseExecution executions = 2;
inline int DatabaseExecutionReport::executions_size() const {
  return executions_.size();
}
inline void DatabaseExecutionReport::clear_executions() {
  executions_.Clear();
}
inline const ::org::yaorm::DatabaseExecution& DatabaseExecutionReport::executions(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.DatabaseExecutionReport.executions)
  return executions_.Get(index);
}
inline ::org::yaorm::DatabaseExecution* DatabaseExecutionReport::mutable_executions(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.DatabaseExecutionReport.executions)
  return executions_.Mutable(index);
}
inline ::org::yaorm::DatabaseExecution* DatabaseExecutionReport::add_executions() {
  // @@protoc_insertion_point(field_add:org.yaorm.DatabaseExecutionReport.executions)
  return executions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::DatabaseExecution >*
DatabaseExecutionReport::mutable_executions() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.DatabaseExecutionReport.executions)
  return &executions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::DatabaseExecution >&
DatabaseExecutionReport::executions() const {
  // @@protoc_insertion_point(field_list:org.yaorm.DatabaseExecutionReport.executions)
  return executions_;
}

// -------------------------------------------------------------------

// JoinTable

// .org.yaorm.TableDefinition first_table = 1;
inline bool JoinTable::has_first_table() const {
  return this != internal_default_instance() && first_table_ != NULL;
}
inline void JoinTable::clear_first_table() {
  if (GetArenaNoVirtual() == NULL && first_table_ != NULL) delete first_table_;
  first_table_ = NULL;
}
inline const ::org::yaorm::TableDefinition& JoinTable::first_table() const {
  const ::org::yaorm::TableDefinition* p = first_table_;
  // @@protoc_insertion_point(field_get:org.yaorm.JoinTable.first_table)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* JoinTable::mutable_first_table() {
  
  if (first_table_ == NULL) {
    first_table_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.JoinTable.first_table)
  return first_table_;
}
inline ::org::yaorm::TableDefinition* JoinTable::release_first_table() {
  // @@protoc_insertion_point(field_release:org.yaorm.JoinTable.first_table)
  
  ::org::yaorm::TableDefinition* temp = first_table_;
  first_table_ = NULL;
  return temp;
}
inline void JoinTable::set_allocated_first_table(::org::yaorm::TableDefinition* first_table) {
  delete first_table_;
  first_table_ = first_table;
  if (first_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.JoinTable.first_table)
}

// .org.yaorm.TableDefinition second_table = 2;
inline bool JoinTable::has_second_table() const {
  return this != internal_default_instance() && second_table_ != NULL;
}
inline void JoinTable::clear_second_table() {
  if (GetArenaNoVirtual() == NULL && second_table_ != NULL) delete second_table_;
  second_table_ = NULL;
}
inline const ::org::yaorm::TableDefinition& JoinTable::second_table() const {
  const ::org::yaorm::TableDefinition* p = second_table_;
  // @@protoc_insertion_point(field_get:org.yaorm.JoinTable.second_table)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* JoinTable::mutable_second_table() {
  
  if (second_table_ == NULL) {
    second_table_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.JoinTable.second_table)
  return second_table_;
}
inline ::org::yaorm::TableDefinition* JoinTable::release_second_table() {
  // @@protoc_insertion_point(field_release:org.yaorm.JoinTable.second_table)
  
  ::org::yaorm::TableDefinition* temp = second_table_;
  second_table_ = NULL;
  return temp;
}
inline void JoinTable::set_allocated_second_table(::org::yaorm::TableDefinition* second_table) {
  delete second_table_;
  second_table_ = second_table;
  if (second_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.JoinTable.second_table)
}

// .org.yaorm.ColumnDefinition first_column = 7;
inline bool JoinTable::has_first_column() const {
  return this != internal_default_instance() && first_column_ != NULL;
}
inline void JoinTable::clear_first_column() {
  if (GetArenaNoVirtual() == NULL && first_column_ != NULL) delete first_column_;
  first_column_ = NULL;
}
inline const ::org::yaorm::ColumnDefinition& JoinTable::first_column() const {
  const ::org::yaorm::ColumnDefinition* p = first_column_;
  // @@protoc_insertion_point(field_get:org.yaorm.JoinTable.first_column)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ColumnDefinition*>(
      &::org::yaorm::_ColumnDefinition_default_instance_);
}
inline ::org::yaorm::ColumnDefinition* JoinTable::mutable_first_column() {
  
  if (first_column_ == NULL) {
    first_column_ = new ::org::yaorm::ColumnDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.JoinTable.first_column)
  return first_column_;
}
inline ::org::yaorm::ColumnDefinition* JoinTable::release_first_column() {
  // @@protoc_insertion_point(field_release:org.yaorm.JoinTable.first_column)
  
  ::org::yaorm::ColumnDefinition* temp = first_column_;
  first_column_ = NULL;
  return temp;
}
inline void JoinTable::set_allocated_first_column(::org::yaorm::ColumnDefinition* first_column) {
  delete first_column_;
  first_column_ = first_column;
  if (first_column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.JoinTable.first_column)
}

// .org.yaorm.ColumnDefinition second_column = 8;
inline bool JoinTable::has_second_column() const {
  return this != internal_default_instance() && second_column_ != NULL;
}
inline void JoinTable::clear_second_column() {
  if (GetArenaNoVirtual() == NULL && second_column_ != NULL) delete second_column_;
  second_column_ = NULL;
}
inline const ::org::yaorm::ColumnDefinition& JoinTable::second_column() const {
  const ::org::yaorm::ColumnDefinition* p = second_column_;
  // @@protoc_insertion_point(field_get:org.yaorm.JoinTable.second_column)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ColumnDefinition*>(
      &::org::yaorm::_ColumnDefinition_default_instance_);
}
inline ::org::yaorm::ColumnDefinition* JoinTable::mutable_second_column() {
  
  if (second_column_ == NULL) {
    second_column_ = new ::org::yaorm::ColumnDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.JoinTable.second_column)
  return second_column_;
}
inline ::org::yaorm::ColumnDefinition* JoinTable::release_second_column() {
  // @@protoc_insertion_point(field_release:org.yaorm.JoinTable.second_column)
  
  ::org::yaorm::ColumnDefinition* temp = second_column_;
  second_column_ = NULL;
  return temp;
}
inline void JoinTable::set_allocated_second_column(::org::yaorm::ColumnDefinition* second_column) {
  delete second_column_;
  second_column_ = second_column;
  if (second_column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.JoinTable.second_column)
}

// .org.yaorm.WhereClause where_clause = 9;
inline bool JoinTable::has_where_clause() const {
  return this != internal_default_instance() && where_clause_ != NULL;
}
inline void JoinTable::clear_where_clause() {
  if (GetArenaNoVirtual() == NULL && where_clause_ != NULL) delete where_clause_;
  where_clause_ = NULL;
}
inline const ::org::yaorm::WhereClause& JoinTable::where_clause() const {
  const ::org::yaorm::WhereClause* p = where_clause_;
  // @@protoc_insertion_point(field_get:org.yaorm.JoinTable.where_clause)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::WhereClause*>(
      &::org::yaorm::_WhereClause_default_instance_);
}
inline ::org::yaorm::WhereClause* JoinTable::mutable_where_clause() {
  
  if (where_clause_ == NULL) {
    where_clause_ = new ::org::yaorm::WhereClause;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.JoinTable.where_clause)
  return where_clause_;
}
inline ::org::yaorm::WhereClause* JoinTable::release_where_clause() {
  // @@protoc_insertion_point(field_release:org.yaorm.JoinTable.where_clause)
  
  ::org::yaorm::WhereClause* temp = where_clause_;
  where_clause_ = NULL;
  return temp;
}
inline void JoinTable::set_allocated_where_clause(::org::yaorm::WhereClause* where_clause) {
  delete where_clause_;
  where_clause_ = where_clause;
  if (where_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.JoinTable.where_clause)
}

// -------------------------------------------------------------------

// JoinTableRecords

// .org.yaorm.JoinTable join_table = 1;
inline bool JoinTableRecords::has_join_table() const {
  return this != internal_default_instance() && join_table_ != NULL;
}
inline void JoinTableRecords::clear_join_table() {
  if (GetArenaNoVirtual() == NULL && join_table_ != NULL) delete join_table_;
  join_table_ = NULL;
}
inline const ::org::yaorm::JoinTable& JoinTableRecords::join_table() const {
  const ::org::yaorm::JoinTable* p = join_table_;
  // @@protoc_insertion_point(field_get:org.yaorm.JoinTableRecords.join_table)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::JoinTable*>(
      &::org::yaorm::_JoinTable_default_instance_);
}
inline ::org::yaorm::JoinTable* JoinTableRecords::mutable_join_table() {
  
  if (join_table_ == NULL) {
    join_table_ = new ::org::yaorm::JoinTable;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.JoinTableRecords.join_table)
  return join_table_;
}
inline ::org::yaorm::JoinTable* JoinTableRecords::release_join_table() {
  // @@protoc_insertion_point(field_release:org.yaorm.JoinTableRecords.join_table)
  
  ::org::yaorm::JoinTable* temp = join_table_;
  join_table_ = NULL;
  return temp;
}
inline void JoinTableRecords::set_allocated_join_table(::org::yaorm::JoinTable* join_table) {
  delete join_table_;
  join_table_ = join_table;
  if (join_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.JoinTableRecords.join_table)
}

// .org.yaorm.Records records = 2;
inline bool JoinTableRecords::has_records() const {
  return this != internal_default_instance() && records_ != NULL;
}
inline void JoinTableRecords::clear_records() {
  if (GetArenaNoVirtual() == NULL && records_ != NULL) delete records_;
  records_ = NULL;
}
inline const ::org::yaorm::Records& JoinTableRecords::records() const {
  const ::org::yaorm::Records* p = records_;
  // @@protoc_insertion_point(field_get:org.yaorm.JoinTableRecords.records)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Records*>(
      &::org::yaorm::_Records_default_instance_);
}
inline ::org::yaorm::Records* JoinTableRecords::mutable_records() {
  
  if (records_ == NULL) {
    records_ = new ::org::yaorm::Records;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.JoinTableRecords.records)
  return records_;
}
inline ::org::yaorm::Records* JoinTableRecords::release_records() {
  // @@protoc_insertion_point(field_release:org.yaorm.JoinTableRecords.records)
  
  ::org::yaorm::Records* temp = records_;
  records_ = NULL;
  return temp;
}
inline void JoinTableRecords::set_allocated_records(::org::yaorm::Records* records) {
  delete records_;
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.JoinTableRecords.records)
}

// -------------------------------------------------------------------

// GroupBy

// repeated .org.yaorm.ColumnDefinition columns = 1;
inline int GroupBy::columns_size() const {
  return columns_.size();
}
inline void GroupBy::clear_columns() {
  columns_.Clear();
}
inline const ::org::yaorm::ColumnDefinition& GroupBy::columns(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.GroupBy.columns)
  return columns_.Get(index);
}
inline ::org::yaorm::ColumnDefinition* GroupBy::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.GroupBy.columns)
  return columns_.Mutable(index);
}
inline ::org::yaorm::ColumnDefinition* GroupBy::add_columns() {
  // @@protoc_insertion_point(field_add:org.yaorm.GroupBy.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
GroupBy::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.GroupBy.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
GroupBy::columns() const {
  // @@protoc_insertion_point(field_list:org.yaorm.GroupBy.columns)
  return columns_;
}

// -------------------------------------------------------------------

// OrderBy

// .org.yaorm.ColumnDefinition column = 1;
inline bool OrderBy::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
inline void OrderBy::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
inline const ::org::yaorm::ColumnDefinition& OrderBy::column() const {
  const ::org::yaorm::ColumnDefinition* p = column_;
  // @@protoc_insertion_point(field_get:org.yaorm.OrderBy.column)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ColumnDefinition*>(
      &::org::yaorm::_ColumnDefinition_default_instance_);
}
inline ::org::yaorm::ColumnDefinition* OrderBy::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::org::yaorm::ColumnDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.OrderBy.column)
  return column_;
}
inline ::org::yaorm::ColumnDefinition* OrderBy::release_column() {
  // @@protoc_insertion_point(field_release:org.yaorm.OrderBy.column)
  
  ::org::yaorm::ColumnDefinition* temp = column_;
  column_ = NULL;
  return temp;
}
inline void OrderBy::set_allocated_column(::org::yaorm::ColumnDefinition* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.OrderBy.column)
}

// .org.yaorm.OrderByType type = 2;
inline void OrderBy::clear_type() {
  type_ = 0;
}
inline ::org::yaorm::OrderByType OrderBy::type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.OrderBy.type)
  return static_cast< ::org::yaorm::OrderByType >(type_);
}
inline void OrderBy::set_type(::org::yaorm::OrderByType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.OrderBy.type)
}

// -------------------------------------------------------------------

// Projection

// repeated .org.yaorm.ColumnDefinition labels = 1;
inline int Projection::labels_size() const {
  return labels_.size();
}
inline void Projection::clear_labels() {
  labels_.Clear();
}
inline const ::org::yaorm::ColumnDefinition& Projection::labels(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.labels)
  return labels_.Get(index);
}
inline ::org::yaorm::ColumnDefinition* Projection::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Projection.labels)
  return labels_.Mutable(index);
}
inline ::org::yaorm::ColumnDefinition* Projection::add_labels() {
  // @@protoc_insertion_point(field_add:org.yaorm.Projection.labels)
  return labels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >*
Projection::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Projection.labels)
  return &labels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ColumnDefinition >&
Projection::labels() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Projection.labels)
  return labels_;
}

// .org.yaorm.TableDefinition main_table = 2;
inline bool Projection::has_main_table() const {
  return this != internal_default_instance() && main_table_ != NULL;
}
inline void Projection::clear_main_table() {
  if (GetArenaNoVirtual() == NULL && main_table_ != NULL) delete main_table_;
  main_table_ = NULL;
}
inline const ::org::yaorm::TableDefinition& Projection::main_table() const {
  const ::org::yaorm::TableDefinition* p = main_table_;
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.main_table)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* Projection::mutable_main_table() {
  
  if (main_table_ == NULL) {
    main_table_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Projection.main_table)
  return main_table_;
}
inline ::org::yaorm::TableDefinition* Projection::release_main_table() {
  // @@protoc_insertion_point(field_release:org.yaorm.Projection.main_table)
  
  ::org::yaorm::TableDefinition* temp = main_table_;
  main_table_ = NULL;
  return temp;
}
inline void Projection::set_allocated_main_table(::org::yaorm::TableDefinition* main_table) {
  delete main_table_;
  main_table_ = main_table;
  if (main_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Projection.main_table)
}

// repeated .org.yaorm.JoinTable joins = 3;
inline int Projection::joins_size() const {
  return joins_.size();
}
inline void Projection::clear_joins() {
  joins_.Clear();
}
inline const ::org::yaorm::JoinTable& Projection::joins(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.joins)
  return joins_.Get(index);
}
inline ::org::yaorm::JoinTable* Projection::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Projection.joins)
  return joins_.Mutable(index);
}
inline ::org::yaorm::JoinTable* Projection::add_joins() {
  // @@protoc_insertion_point(field_add:org.yaorm.Projection.joins)
  return joins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::JoinTable >*
Projection::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Projection.joins)
  return &joins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::JoinTable >&
Projection::joins() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Projection.joins)
  return joins_;
}

// .org.yaorm.WhereClause where_clause = 4;
inline bool Projection::has_where_clause() const {
  return this != internal_default_instance() && where_clause_ != NULL;
}
inline void Projection::clear_where_clause() {
  if (GetArenaNoVirtual() == NULL && where_clause_ != NULL) delete where_clause_;
  where_clause_ = NULL;
}
inline const ::org::yaorm::WhereClause& Projection::where_clause() const {
  const ::org::yaorm::WhereClause* p = where_clause_;
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.where_clause)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::WhereClause*>(
      &::org::yaorm::_WhereClause_default_instance_);
}
inline ::org::yaorm::WhereClause* Projection::mutable_where_clause() {
  
  if (where_clause_ == NULL) {
    where_clause_ = new ::org::yaorm::WhereClause;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Projection.where_clause)
  return where_clause_;
}
inline ::org::yaorm::WhereClause* Projection::release_where_clause() {
  // @@protoc_insertion_point(field_release:org.yaorm.Projection.where_clause)
  
  ::org::yaorm::WhereClause* temp = where_clause_;
  where_clause_ = NULL;
  return temp;
}
inline void Projection::set_allocated_where_clause(::org::yaorm::WhereClause* where_clause) {
  delete where_clause_;
  where_clause_ = where_clause;
  if (where_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Projection.where_clause)
}

// .org.yaorm.GroupBy group_by = 5;
inline bool Projection::has_group_by() const {
  return this != internal_default_instance() && group_by_ != NULL;
}
inline void Projection::clear_group_by() {
  if (GetArenaNoVirtual() == NULL && group_by_ != NULL) delete group_by_;
  group_by_ = NULL;
}
inline const ::org::yaorm::GroupBy& Projection::group_by() const {
  const ::org::yaorm::GroupBy* p = group_by_;
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.group_by)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::GroupBy*>(
      &::org::yaorm::_GroupBy_default_instance_);
}
inline ::org::yaorm::GroupBy* Projection::mutable_group_by() {
  
  if (group_by_ == NULL) {
    group_by_ = new ::org::yaorm::GroupBy;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Projection.group_by)
  return group_by_;
}
inline ::org::yaorm::GroupBy* Projection::release_group_by() {
  // @@protoc_insertion_point(field_release:org.yaorm.Projection.group_by)
  
  ::org::yaorm::GroupBy* temp = group_by_;
  group_by_ = NULL;
  return temp;
}
inline void Projection::set_allocated_group_by(::org::yaorm::GroupBy* group_by) {
  delete group_by_;
  group_by_ = group_by;
  if (group_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Projection.group_by)
}

// repeated .org.yaorm.OrderBy order_bys = 6;
inline int Projection::order_bys_size() const {
  return order_bys_.size();
}
inline void Projection::clear_order_bys() {
  order_bys_.Clear();
}
inline const ::org::yaorm::OrderBy& Projection::order_bys(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.order_bys)
  return order_bys_.Get(index);
}
inline ::org::yaorm::OrderBy* Projection::mutable_order_bys(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Projection.order_bys)
  return order_bys_.Mutable(index);
}
inline ::org::yaorm::OrderBy* Projection::add_order_bys() {
  // @@protoc_insertion_point(field_add:org.yaorm.Projection.order_bys)
  return order_bys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::OrderBy >*
Projection::mutable_order_bys() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Projection.order_bys)
  return &order_bys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::OrderBy >&
Projection::order_bys() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Projection.order_bys)
  return order_bys_;
}

// string name = 7;
inline void Projection::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Projection::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.name)
  return name_.GetNoArena();
}
inline void Projection::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Projection.name)
}
#if LANG_CXX11
inline void Projection::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.Projection.name)
}
#endif
inline void Projection::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Projection.name)
}
inline void Projection::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Projection.name)
}
inline ::std::string* Projection::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Projection.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Projection::release_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.Projection.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Projection::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Projection.name)
}

// int64 limit = 8;
inline void Projection::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Projection::limit() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.limit)
  return limit_;
}
inline void Projection::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Projection.limit)
}

// int64 offset = 9;
inline void Projection::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Projection::offset() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Projection.offset)
  return offset_;
}
inline void Projection::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Projection.offset)
}

// -------------------------------------------------------------------

// UIYaormRequest

// string token = 1;
inline void UIYaormRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UIYaormRequest::token() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.token)
  return token_.GetNoArena();
}
inline void UIYaormRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.token)
}
#if LANG_CXX11
inline void UIYaormRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.UIYaormRequest.token)
}
#endif
inline void UIYaormRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormRequest.token)
}
inline void UIYaormRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormRequest.token)
}
inline ::std::string* UIYaormRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UIYaormRequest::release_token() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UIYaormRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.token)
}

// .org.yaorm.TableDefinition table_definition = 2;
inline bool UIYaormRequest::has_table_definition() const {
  return this != internal_default_instance() && table_definition_ != NULL;
}
inline void UIYaormRequest::clear_table_definition() {
  if (GetArenaNoVirtual() == NULL && table_definition_ != NULL) delete table_definition_;
  table_definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& UIYaormRequest::table_definition() const {
  const ::org::yaorm::TableDefinition* p = table_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.table_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* UIYaormRequest::mutable_table_definition() {
  
  if (table_definition_ == NULL) {
    table_definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.table_definition)
  return table_definition_;
}
inline ::org::yaorm::TableDefinition* UIYaormRequest::release_table_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.table_definition)
  
  ::org::yaorm::TableDefinition* temp = table_definition_;
  table_definition_ = NULL;
  return temp;
}
inline void UIYaormRequest::set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition) {
  delete table_definition_;
  table_definition_ = table_definition;
  if (table_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.table_definition)
}

// .org.yaorm.Records records = 3;
inline bool UIYaormRequest::has_records() const {
  return this != internal_default_instance() && records_ != NULL;
}
inline void UIYaormRequest::clear_records() {
  if (GetArenaNoVirtual() == NULL && records_ != NULL) delete records_;
  records_ = NULL;
}
inline const ::org::yaorm::Records& UIYaormRequest::records() const {
  const ::org::yaorm::Records* p = records_;
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.records)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Records*>(
      &::org::yaorm::_Records_default_instance_);
}
inline ::org::yaorm::Records* UIYaormRequest::mutable_records() {
  
  if (records_ == NULL) {
    records_ = new ::org::yaorm::Records;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.records)
  return records_;
}
inline ::org::yaorm::Records* UIYaormRequest::release_records() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.records)
  
  ::org::yaorm::Records* temp = records_;
  records_ = NULL;
  return temp;
}
inline void UIYaormRequest::set_allocated_records(::org::yaorm::Records* records) {
  delete records_;
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.records)
}

// .org.yaorm.ConnectionInfo connection_info = 4;
inline bool UIYaormRequest::has_connection_info() const {
  return this != internal_default_instance() && connection_info_ != NULL;
}
inline void UIYaormRequest::clear_connection_info() {
  if (GetArenaNoVirtual() == NULL && connection_info_ != NULL) delete connection_info_;
  connection_info_ = NULL;
}
inline const ::org::yaorm::ConnectionInfo& UIYaormRequest::connection_info() const {
  const ::org::yaorm::ConnectionInfo* p = connection_info_;
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.connection_info)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ConnectionInfo*>(
      &::org::yaorm::_ConnectionInfo_default_instance_);
}
inline ::org::yaorm::ConnectionInfo* UIYaormRequest::mutable_connection_info() {
  
  if (connection_info_ == NULL) {
    connection_info_ = new ::org::yaorm::ConnectionInfo;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.connection_info)
  return connection_info_;
}
inline ::org::yaorm::ConnectionInfo* UIYaormRequest::release_connection_info() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.connection_info)
  
  ::org::yaorm::ConnectionInfo* temp = connection_info_;
  connection_info_ = NULL;
  return temp;
}
inline void UIYaormRequest::set_allocated_connection_info(::org::yaorm::ConnectionInfo* connection_info) {
  delete connection_info_;
  connection_info_ = connection_info;
  if (connection_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.connection_info)
}

// .org.yaorm.WhereClause where_clause = 5;
inline bool UIYaormRequest::has_where_clause() const {
  return this != internal_default_instance() && where_clause_ != NULL;
}
inline void UIYaormRequest::clear_where_clause() {
  if (GetArenaNoVirtual() == NULL && where_clause_ != NULL) delete where_clause_;
  where_clause_ = NULL;
}
inline const ::org::yaorm::WhereClause& UIYaormRequest::where_clause() const {
  const ::org::yaorm::WhereClause* p = where_clause_;
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.where_clause)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::WhereClause*>(
      &::org::yaorm::_WhereClause_default_instance_);
}
inline ::org::yaorm::WhereClause* UIYaormRequest::mutable_where_clause() {
  
  if (where_clause_ == NULL) {
    where_clause_ = new ::org::yaorm::WhereClause;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.where_clause)
  return where_clause_;
}
inline ::org::yaorm::WhereClause* UIYaormRequest::release_where_clause() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.where_clause)
  
  ::org::yaorm::WhereClause* temp = where_clause_;
  where_clause_ = NULL;
  return temp;
}
inline void UIYaormRequest::set_allocated_where_clause(::org::yaorm::WhereClause* where_clause) {
  delete where_clause_;
  where_clause_ = where_clause;
  if (where_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.where_clause)
}

// int64 limit = 6;
inline void UIYaormRequest::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UIYaormRequest::limit() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.limit)
  return limit_;
}
inline void UIYaormRequest::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.limit)
}

// int64 offset = 7;
inline void UIYaormRequest::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UIYaormRequest::offset() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.offset)
  return offset_;
}
inline void UIYaormRequest::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.offset)
}

// bool insert_same_as_update = 8;
inline void UIYaormRequest::clear_insert_same_as_update() {
  insert_same_as_update_ = false;
}
inline bool UIYaormRequest::insert_same_as_update() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.insert_same_as_update)
  return insert_same_as_update_;
}
inline void UIYaormRequest::set_insert_same_as_update(bool value) {
  
  insert_same_as_update_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.insert_same_as_update)
}

// string schema_name = 9;
inline void UIYaormRequest::clear_schema_name() {
  schema_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UIYaormRequest::schema_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.schema_name)
  return schema_name_.GetNoArena();
}
inline void UIYaormRequest::set_schema_name(const ::std::string& value) {
  
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.schema_name)
}
#if LANG_CXX11
inline void UIYaormRequest::set_schema_name(::std::string&& value) {
  
  schema_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.UIYaormRequest.schema_name)
}
#endif
inline void UIYaormRequest::set_schema_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormRequest.schema_name)
}
inline void UIYaormRequest::set_schema_name(const char* value, size_t size) {
  
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormRequest.schema_name)
}
inline ::std::string* UIYaormRequest::mutable_schema_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.schema_name)
  return schema_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UIYaormRequest::release_schema_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.schema_name)
  
  return schema_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UIYaormRequest::set_allocated_schema_name(::std::string* schema_name) {
  if (schema_name != NULL) {
    
  } else {
    
  }
  schema_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.schema_name)
}

// string table_name = 10;
inline void UIYaormRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UIYaormRequest::table_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.table_name)
  return table_name_.GetNoArena();
}
inline void UIYaormRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.table_name)
}
#if LANG_CXX11
inline void UIYaormRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.UIYaormRequest.table_name)
}
#endif
inline void UIYaormRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormRequest.table_name)
}
inline void UIYaormRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormRequest.table_name)
}
inline ::std::string* UIYaormRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UIYaormRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UIYaormRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.table_name)
}

// string custom_sql = 11;
inline void UIYaormRequest::clear_custom_sql() {
  custom_sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UIYaormRequest::custom_sql() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.custom_sql)
  return custom_sql_.GetNoArena();
}
inline void UIYaormRequest::set_custom_sql(const ::std::string& value) {
  
  custom_sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.custom_sql)
}
#if LANG_CXX11
inline void UIYaormRequest::set_custom_sql(::std::string&& value) {
  
  custom_sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.UIYaormRequest.custom_sql)
}
#endif
inline void UIYaormRequest::set_custom_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormRequest.custom_sql)
}
inline void UIYaormRequest::set_custom_sql(const char* value, size_t size) {
  
  custom_sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormRequest.custom_sql)
}
inline ::std::string* UIYaormRequest::mutable_custom_sql() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.custom_sql)
  return custom_sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UIYaormRequest::release_custom_sql() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.custom_sql)
  
  return custom_sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UIYaormRequest::set_allocated_custom_sql(::std::string* custom_sql) {
  if (custom_sql != NULL) {
    
  } else {
    
  }
  custom_sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_sql);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.custom_sql)
}

// string file_descriptor = 13;
inline void UIYaormRequest::clear_file_descriptor() {
  file_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UIYaormRequest::file_descriptor() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.file_descriptor)
  return file_descriptor_.GetNoArena();
}
inline void UIYaormRequest::set_file_descriptor(const ::std::string& value) {
  
  file_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.file_descriptor)
}
#if LANG_CXX11
inline void UIYaormRequest::set_file_descriptor(::std::string&& value) {
  
  file_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.UIYaormRequest.file_descriptor)
}
#endif
inline void UIYaormRequest::set_file_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormRequest.file_descriptor)
}
inline void UIYaormRequest::set_file_descriptor(const char* value, size_t size) {
  
  file_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormRequest.file_descriptor)
}
inline ::std::string* UIYaormRequest::mutable_file_descriptor() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.file_descriptor)
  return file_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UIYaormRequest::release_file_descriptor() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormRequest.file_descriptor)
  
  return file_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UIYaormRequest::set_allocated_file_descriptor(::std::string* file_descriptor) {
  if (file_descriptor != NULL) {
    
  } else {
    
  }
  file_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_descriptor);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormRequest.file_descriptor)
}

// repeated string ids = 14;
inline int UIYaormRequest::ids_size() const {
  return ids_.size();
}
inline void UIYaormRequest::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& UIYaormRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormRequest.ids)
  return ids_.Get(index);
}
inline ::std::string* UIYaormRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormRequest.ids)
  return ids_.Mutable(index);
}
inline void UIYaormRequest::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.ids)
  ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UIYaormRequest::set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UIYaormRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormRequest.ids)
}
inline void UIYaormRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormRequest.ids)
}
inline ::std::string* UIYaormRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:org.yaorm.UIYaormRequest.ids)
  return ids_.Add();
}
inline void UIYaormRequest::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.yaorm.UIYaormRequest.ids)
}
#if LANG_CXX11
inline void UIYaormRequest::add_ids(::std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.yaorm.UIYaormRequest.ids)
}
#endif
inline void UIYaormRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.yaorm.UIYaormRequest.ids)
}
inline void UIYaormRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.yaorm.UIYaormRequest.ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UIYaormRequest::ids() const {
  // @@protoc_insertion_point(field_list:org.yaorm.UIYaormRequest.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UIYaormRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.UIYaormRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// UIYaormResponse

// .org.yaorm.Records records = 1;
inline bool UIYaormResponse::has_records() const {
  return this != internal_default_instance() && records_ != NULL;
}
inline void UIYaormResponse::clear_records() {
  if (GetArenaNoVirtual() == NULL && records_ != NULL) delete records_;
  records_ = NULL;
}
inline const ::org::yaorm::Records& UIYaormResponse::records() const {
  const ::org::yaorm::Records* p = records_;
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.records)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Records*>(
      &::org::yaorm::_Records_default_instance_);
}
inline ::org::yaorm::Records* UIYaormResponse::mutable_records() {
  
  if (records_ == NULL) {
    records_ = new ::org::yaorm::Records;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormResponse.records)
  return records_;
}
inline ::org::yaorm::Records* UIYaormResponse::release_records() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormResponse.records)
  
  ::org::yaorm::Records* temp = records_;
  records_ = NULL;
  return temp;
}
inline void UIYaormResponse::set_allocated_records(::org::yaorm::Records* records) {
  delete records_;
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormResponse.records)
}

// repeated string schemas = 2;
inline int UIYaormResponse::schemas_size() const {
  return schemas_.size();
}
inline void UIYaormResponse::clear_schemas() {
  schemas_.Clear();
}
inline const ::std::string& UIYaormResponse::schemas(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.schemas)
  return schemas_.Get(index);
}
inline ::std::string* UIYaormResponse::mutable_schemas(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormResponse.schemas)
  return schemas_.Mutable(index);
}
inline void UIYaormResponse::set_schemas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormResponse.schemas)
  schemas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UIYaormResponse::set_schemas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormResponse.schemas)
  schemas_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UIYaormResponse::set_schemas(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  schemas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormResponse.schemas)
}
inline void UIYaormResponse::set_schemas(int index, const char* value, size_t size) {
  schemas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormResponse.schemas)
}
inline ::std::string* UIYaormResponse::add_schemas() {
  // @@protoc_insertion_point(field_add_mutable:org.yaorm.UIYaormResponse.schemas)
  return schemas_.Add();
}
inline void UIYaormResponse::add_schemas(const ::std::string& value) {
  schemas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.yaorm.UIYaormResponse.schemas)
}
#if LANG_CXX11
inline void UIYaormResponse::add_schemas(::std::string&& value) {
  schemas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.yaorm.UIYaormResponse.schemas)
}
#endif
inline void UIYaormResponse::add_schemas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  schemas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.yaorm.UIYaormResponse.schemas)
}
inline void UIYaormResponse::add_schemas(const char* value, size_t size) {
  schemas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.yaorm.UIYaormResponse.schemas)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UIYaormResponse::schemas() const {
  // @@protoc_insertion_point(field_list:org.yaorm.UIYaormResponse.schemas)
  return schemas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UIYaormResponse::mutable_schemas() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.UIYaormResponse.schemas)
  return &schemas_;
}

// repeated string tables = 3;
inline int UIYaormResponse::tables_size() const {
  return tables_.size();
}
inline void UIYaormResponse::clear_tables() {
  tables_.Clear();
}
inline const ::std::string& UIYaormResponse::tables(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.tables)
  return tables_.Get(index);
}
inline ::std::string* UIYaormResponse::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormResponse.tables)
  return tables_.Mutable(index);
}
inline void UIYaormResponse::set_tables(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormResponse.tables)
  tables_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UIYaormResponse::set_tables(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormResponse.tables)
  tables_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UIYaormResponse::set_tables(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormResponse.tables)
}
inline void UIYaormResponse::set_tables(int index, const char* value, size_t size) {
  tables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormResponse.tables)
}
inline ::std::string* UIYaormResponse::add_tables() {
  // @@protoc_insertion_point(field_add_mutable:org.yaorm.UIYaormResponse.tables)
  return tables_.Add();
}
inline void UIYaormResponse::add_tables(const ::std::string& value) {
  tables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.yaorm.UIYaormResponse.tables)
}
#if LANG_CXX11
inline void UIYaormResponse::add_tables(::std::string&& value) {
  tables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.yaorm.UIYaormResponse.tables)
}
#endif
inline void UIYaormResponse::add_tables(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.yaorm.UIYaormResponse.tables)
}
inline void UIYaormResponse::add_tables(const char* value, size_t size) {
  tables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.yaorm.UIYaormResponse.tables)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UIYaormResponse::tables() const {
  // @@protoc_insertion_point(field_list:org.yaorm.UIYaormResponse.tables)
  return tables_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UIYaormResponse::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.UIYaormResponse.tables)
  return &tables_;
}

// .org.yaorm.TableDefinition table_definition = 4;
inline bool UIYaormResponse::has_table_definition() const {
  return this != internal_default_instance() && table_definition_ != NULL;
}
inline void UIYaormResponse::clear_table_definition() {
  if (GetArenaNoVirtual() == NULL && table_definition_ != NULL) delete table_definition_;
  table_definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& UIYaormResponse::table_definition() const {
  const ::org::yaorm::TableDefinition* p = table_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.table_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* UIYaormResponse::mutable_table_definition() {
  
  if (table_definition_ == NULL) {
    table_definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormResponse.table_definition)
  return table_definition_;
}
inline ::org::yaorm::TableDefinition* UIYaormResponse::release_table_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormResponse.table_definition)
  
  ::org::yaorm::TableDefinition* temp = table_definition_;
  table_definition_ = NULL;
  return temp;
}
inline void UIYaormResponse::set_allocated_table_definition(::org::yaorm::TableDefinition* table_definition) {
  delete table_definition_;
  table_definition_ = table_definition;
  if (table_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormResponse.table_definition)
}

// .org.yaorm.TableDefinitions table_definitions = 5;
inline bool UIYaormResponse::has_table_definitions() const {
  return this != internal_default_instance() && table_definitions_ != NULL;
}
inline void UIYaormResponse::clear_table_definitions() {
  if (GetArenaNoVirtual() == NULL && table_definitions_ != NULL) delete table_definitions_;
  table_definitions_ = NULL;
}
inline const ::org::yaorm::TableDefinitions& UIYaormResponse::table_definitions() const {
  const ::org::yaorm::TableDefinitions* p = table_definitions_;
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.table_definitions)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinitions*>(
      &::org::yaorm::_TableDefinitions_default_instance_);
}
inline ::org::yaorm::TableDefinitions* UIYaormResponse::mutable_table_definitions() {
  
  if (table_definitions_ == NULL) {
    table_definitions_ = new ::org::yaorm::TableDefinitions;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormResponse.table_definitions)
  return table_definitions_;
}
inline ::org::yaorm::TableDefinitions* UIYaormResponse::release_table_definitions() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormResponse.table_definitions)
  
  ::org::yaorm::TableDefinitions* temp = table_definitions_;
  table_definitions_ = NULL;
  return temp;
}
inline void UIYaormResponse::set_allocated_table_definitions(::org::yaorm::TableDefinitions* table_definitions) {
  delete table_definitions_;
  table_definitions_ = table_definitions;
  if (table_definitions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormResponse.table_definitions)
}

// int64 record_count = 6;
inline void UIYaormResponse::clear_record_count() {
  record_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UIYaormResponse::record_count() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.record_count)
  return record_count_;
}
inline void UIYaormResponse::set_record_count(::google::protobuf::int64 value) {
  
  record_count_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormResponse.record_count)
}

// bool result = 7;
inline void UIYaormResponse::clear_result() {
  result_ = false;
}
inline bool UIYaormResponse::result() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.result)
  return result_;
}
inline void UIYaormResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormResponse.result)
}

// repeated .org.yaorm.ProtoTypeToSqlType proto_type_to_sql_types = 8;
inline int UIYaormResponse::proto_type_to_sql_types_size() const {
  return proto_type_to_sql_types_.size();
}
inline void UIYaormResponse::clear_proto_type_to_sql_types() {
  proto_type_to_sql_types_.Clear();
}
inline const ::org::yaorm::ProtoTypeToSqlType& UIYaormResponse::proto_type_to_sql_types(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.proto_type_to_sql_types)
  return proto_type_to_sql_types_.Get(index);
}
inline ::org::yaorm::ProtoTypeToSqlType* UIYaormResponse::mutable_proto_type_to_sql_types(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormResponse.proto_type_to_sql_types)
  return proto_type_to_sql_types_.Mutable(index);
}
inline ::org::yaorm::ProtoTypeToSqlType* UIYaormResponse::add_proto_type_to_sql_types() {
  // @@protoc_insertion_point(field_add:org.yaorm.UIYaormResponse.proto_type_to_sql_types)
  return proto_type_to_sql_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType >*
UIYaormResponse::mutable_proto_type_to_sql_types() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.UIYaormResponse.proto_type_to_sql_types)
  return &proto_type_to_sql_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::ProtoTypeToSqlType >&
UIYaormResponse::proto_type_to_sql_types() const {
  // @@protoc_insertion_point(field_list:org.yaorm.UIYaormResponse.proto_type_to_sql_types)
  return proto_type_to_sql_types_;
}

// string string_result = 9;
inline void UIYaormResponse::clear_string_result() {
  string_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UIYaormResponse::string_result() const {
  // @@protoc_insertion_point(field_get:org.yaorm.UIYaormResponse.string_result)
  return string_result_.GetNoArena();
}
inline void UIYaormResponse::set_string_result(const ::std::string& value) {
  
  string_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.UIYaormResponse.string_result)
}
#if LANG_CXX11
inline void UIYaormResponse::set_string_result(::std::string&& value) {
  
  string_result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.UIYaormResponse.string_result)
}
#endif
inline void UIYaormResponse::set_string_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  string_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.UIYaormResponse.string_result)
}
inline void UIYaormResponse::set_string_result(const char* value, size_t size) {
  
  string_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.UIYaormResponse.string_result)
}
inline ::std::string* UIYaormResponse::mutable_string_result() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.UIYaormResponse.string_result)
  return string_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UIYaormResponse::release_string_result() {
  // @@protoc_insertion_point(field_release:org.yaorm.UIYaormResponse.string_result)
  
  return string_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UIYaormResponse::set_allocated_string_result(::std::string* string_result) {
  if (string_result != NULL) {
    
  } else {
    
  }
  string_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_result);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.UIYaormResponse.string_result)
}

// -------------------------------------------------------------------

// SqlGeneratorRequestResponse

// .org.yaorm.TableDefinition definition = 1;
inline bool SqlGeneratorRequestResponse::has_definition() const {
  return this != internal_default_instance() && definition_ != NULL;
}
inline void SqlGeneratorRequestResponse::clear_definition() {
  if (GetArenaNoVirtual() == NULL && definition_ != NULL) delete definition_;
  definition_ = NULL;
}
inline const ::org::yaorm::TableDefinition& SqlGeneratorRequestResponse::definition() const {
  const ::org::yaorm::TableDefinition* p = definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::TableDefinition*>(
      &::org::yaorm::_TableDefinition_default_instance_);
}
inline ::org::yaorm::TableDefinition* SqlGeneratorRequestResponse::mutable_definition() {
  
  if (definition_ == NULL) {
    definition_ = new ::org::yaorm::TableDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.definition)
  return definition_;
}
inline ::org::yaorm::TableDefinition* SqlGeneratorRequestResponse::release_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.definition)
  
  ::org::yaorm::TableDefinition* temp = definition_;
  definition_ = NULL;
  return temp;
}
inline void SqlGeneratorRequestResponse::set_allocated_definition(::org::yaorm::TableDefinition* definition) {
  delete definition_;
  definition_ = definition;
  if (definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.definition)
}

// .org.yaorm.ColumnDefinition column_definition = 2;
inline bool SqlGeneratorRequestResponse::has_column_definition() const {
  return this != internal_default_instance() && column_definition_ != NULL;
}
inline void SqlGeneratorRequestResponse::clear_column_definition() {
  if (GetArenaNoVirtual() == NULL && column_definition_ != NULL) delete column_definition_;
  column_definition_ = NULL;
}
inline const ::org::yaorm::ColumnDefinition& SqlGeneratorRequestResponse::column_definition() const {
  const ::org::yaorm::ColumnDefinition* p = column_definition_;
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.column_definition)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ColumnDefinition*>(
      &::org::yaorm::_ColumnDefinition_default_instance_);
}
inline ::org::yaorm::ColumnDefinition* SqlGeneratorRequestResponse::mutable_column_definition() {
  
  if (column_definition_ == NULL) {
    column_definition_ = new ::org::yaorm::ColumnDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.column_definition)
  return column_definition_;
}
inline ::org::yaorm::ColumnDefinition* SqlGeneratorRequestResponse::release_column_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.column_definition)
  
  ::org::yaorm::ColumnDefinition* temp = column_definition_;
  column_definition_ = NULL;
  return temp;
}
inline void SqlGeneratorRequestResponse::set_allocated_column_definition(::org::yaorm::ColumnDefinition* column_definition) {
  delete column_definition_;
  column_definition_ = column_definition;
  if (column_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.column_definition)
}

// .org.yaorm.Index index = 3;
inline bool SqlGeneratorRequestResponse::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline void SqlGeneratorRequestResponse::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
inline const ::org::yaorm::Index& SqlGeneratorRequestResponse::index() const {
  const ::org::yaorm::Index* p = index_;
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.index)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Index*>(
      &::org::yaorm::_Index_default_instance_);
}
inline ::org::yaorm::Index* SqlGeneratorRequestResponse::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::org::yaorm::Index;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.index)
  return index_;
}
inline ::org::yaorm::Index* SqlGeneratorRequestResponse::release_index() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.index)
  
  ::org::yaorm::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline void SqlGeneratorRequestResponse::set_allocated_index(::org::yaorm::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.index)
}

// .org.yaorm.Column column = 4;
inline bool SqlGeneratorRequestResponse::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
inline void SqlGeneratorRequestResponse::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
inline const ::org::yaorm::Column& SqlGeneratorRequestResponse::column() const {
  const ::org::yaorm::Column* p = column_;
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.column)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Column*>(
      &::org::yaorm::_Column_default_instance_);
}
inline ::org::yaorm::Column* SqlGeneratorRequestResponse::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::org::yaorm::Column;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.column)
  return column_;
}
inline ::org::yaorm::Column* SqlGeneratorRequestResponse::release_column() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.column)
  
  ::org::yaorm::Column* temp = column_;
  column_ = NULL;
  return temp;
}
inline void SqlGeneratorRequestResponse::set_allocated_column(::org::yaorm::Column* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.column)
}

// .org.yaorm.WhereClause where_clause = 5;
inline bool SqlGeneratorRequestResponse::has_where_clause() const {
  return this != internal_default_instance() && where_clause_ != NULL;
}
inline void SqlGeneratorRequestResponse::clear_where_clause() {
  if (GetArenaNoVirtual() == NULL && where_clause_ != NULL) delete where_clause_;
  where_clause_ = NULL;
}
inline const ::org::yaorm::WhereClause& SqlGeneratorRequestResponse::where_clause() const {
  const ::org::yaorm::WhereClause* p = where_clause_;
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.where_clause)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::WhereClause*>(
      &::org::yaorm::_WhereClause_default_instance_);
}
inline ::org::yaorm::WhereClause* SqlGeneratorRequestResponse::mutable_where_clause() {
  
  if (where_clause_ == NULL) {
    where_clause_ = new ::org::yaorm::WhereClause;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.where_clause)
  return where_clause_;
}
inline ::org::yaorm::WhereClause* SqlGeneratorRequestResponse::release_where_clause() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.where_clause)
  
  ::org::yaorm::WhereClause* temp = where_clause_;
  where_clause_ = NULL;
  return temp;
}
inline void SqlGeneratorRequestResponse::set_allocated_where_clause(::org::yaorm::WhereClause* where_clause) {
  delete where_clause_;
  where_clause_ = where_clause;
  if (where_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.where_clause)
}

// .org.yaorm.Records records = 6;
inline bool SqlGeneratorRequestResponse::has_records() const {
  return this != internal_default_instance() && records_ != NULL;
}
inline void SqlGeneratorRequestResponse::clear_records() {
  if (GetArenaNoVirtual() == NULL && records_ != NULL) delete records_;
  records_ = NULL;
}
inline const ::org::yaorm::Records& SqlGeneratorRequestResponse::records() const {
  const ::org::yaorm::Records* p = records_;
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.records)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::Records*>(
      &::org::yaorm::_Records_default_instance_);
}
inline ::org::yaorm::Records* SqlGeneratorRequestResponse::mutable_records() {
  
  if (records_ == NULL) {
    records_ = new ::org::yaorm::Records;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.records)
  return records_;
}
inline ::org::yaorm::Records* SqlGeneratorRequestResponse::release_records() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.records)
  
  ::org::yaorm::Records* temp = records_;
  records_ = NULL;
  return temp;
}
inline void SqlGeneratorRequestResponse::set_allocated_records(::org::yaorm::Records* records) {
  delete records_;
  records_ = records;
  if (records) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.records)
}

// int64 limit = 7;
inline void SqlGeneratorRequestResponse::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlGeneratorRequestResponse::limit() const {
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.limit)
  return limit_;
}
inline void SqlGeneratorRequestResponse::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.SqlGeneratorRequestResponse.limit)
}

// int64 offset = 8;
inline void SqlGeneratorRequestResponse::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlGeneratorRequestResponse::offset() const {
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.offset)
  return offset_;
}
inline void SqlGeneratorRequestResponse::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.SqlGeneratorRequestResponse.offset)
}

// string schema_name = 9;
inline void SqlGeneratorRequestResponse::clear_schema_name() {
  schema_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlGeneratorRequestResponse::schema_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.schema_name)
  return schema_name_.GetNoArena();
}
inline void SqlGeneratorRequestResponse::set_schema_name(const ::std::string& value) {
  
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.SqlGeneratorRequestResponse.schema_name)
}
#if LANG_CXX11
inline void SqlGeneratorRequestResponse::set_schema_name(::std::string&& value) {
  
  schema_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.SqlGeneratorRequestResponse.schema_name)
}
#endif
inline void SqlGeneratorRequestResponse::set_schema_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.SqlGeneratorRequestResponse.schema_name)
}
inline void SqlGeneratorRequestResponse::set_schema_name(const char* value, size_t size) {
  
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.SqlGeneratorRequestResponse.schema_name)
}
inline ::std::string* SqlGeneratorRequestResponse::mutable_schema_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.schema_name)
  return schema_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlGeneratorRequestResponse::release_schema_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.schema_name)
  
  return schema_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlGeneratorRequestResponse::set_allocated_schema_name(::std::string* schema_name) {
  if (schema_name != NULL) {
    
  } else {
    
  }
  schema_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.schema_name)
}

// string table_name = 10;
inline void SqlGeneratorRequestResponse::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlGeneratorRequestResponse::table_name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.table_name)
  return table_name_.GetNoArena();
}
inline void SqlGeneratorRequestResponse::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.SqlGeneratorRequestResponse.table_name)
}
#if LANG_CXX11
inline void SqlGeneratorRequestResponse::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.SqlGeneratorRequestResponse.table_name)
}
#endif
inline void SqlGeneratorRequestResponse::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.SqlGeneratorRequestResponse.table_name)
}
inline void SqlGeneratorRequestResponse::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.SqlGeneratorRequestResponse.table_name)
}
inline ::std::string* SqlGeneratorRequestResponse::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlGeneratorRequestResponse::release_table_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlGeneratorRequestResponse::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.table_name)
}

// string response = 11;
inline void SqlGeneratorRequestResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlGeneratorRequestResponse::response() const {
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.response)
  return response_.GetNoArena();
}
inline void SqlGeneratorRequestResponse::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.SqlGeneratorRequestResponse.response)
}
#if LANG_CXX11
inline void SqlGeneratorRequestResponse::set_response(::std::string&& value) {
  
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.yaorm.SqlGeneratorRequestResponse.response)
}
#endif
inline void SqlGeneratorRequestResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.SqlGeneratorRequestResponse.response)
}
inline void SqlGeneratorRequestResponse::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.SqlGeneratorRequestResponse.response)
}
inline ::std::string* SqlGeneratorRequestResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlGeneratorRequestResponse::release_response() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlGeneratorRequestResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.response)
}

// .org.yaorm.ProtoTypeToSqlTypes proto_type_to_sql_types = 12;
inline bool SqlGeneratorRequestResponse::has_proto_type_to_sql_types() const {
  return this != internal_default_instance() && proto_type_to_sql_types_ != NULL;
}
inline void SqlGeneratorRequestResponse::clear_proto_type_to_sql_types() {
  if (GetArenaNoVirtual() == NULL && proto_type_to_sql_types_ != NULL) delete proto_type_to_sql_types_;
  proto_type_to_sql_types_ = NULL;
}
inline const ::org::yaorm::ProtoTypeToSqlTypes& SqlGeneratorRequestResponse::proto_type_to_sql_types() const {
  const ::org::yaorm::ProtoTypeToSqlTypes* p = proto_type_to_sql_types_;
  // @@protoc_insertion_point(field_get:org.yaorm.SqlGeneratorRequestResponse.proto_type_to_sql_types)
  return p != NULL ? *p : *reinterpret_cast<const ::org::yaorm::ProtoTypeToSqlTypes*>(
      &::org::yaorm::_ProtoTypeToSqlTypes_default_instance_);
}
inline ::org::yaorm::ProtoTypeToSqlTypes* SqlGeneratorRequestResponse::mutable_proto_type_to_sql_types() {
  
  if (proto_type_to_sql_types_ == NULL) {
    proto_type_to_sql_types_ = new ::org::yaorm::ProtoTypeToSqlTypes;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.SqlGeneratorRequestResponse.proto_type_to_sql_types)
  return proto_type_to_sql_types_;
}
inline ::org::yaorm::ProtoTypeToSqlTypes* SqlGeneratorRequestResponse::release_proto_type_to_sql_types() {
  // @@protoc_insertion_point(field_release:org.yaorm.SqlGeneratorRequestResponse.proto_type_to_sql_types)
  
  ::org::yaorm::ProtoTypeToSqlTypes* temp = proto_type_to_sql_types_;
  proto_type_to_sql_types_ = NULL;
  return temp;
}
inline void SqlGeneratorRequestResponse::set_allocated_proto_type_to_sql_types(::org::yaorm::ProtoTypeToSqlTypes* proto_type_to_sql_types) {
  delete proto_type_to_sql_types_;
  proto_type_to_sql_types_ = proto_type_to_sql_types;
  if (proto_type_to_sql_types) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.SqlGeneratorRequestResponse.proto_type_to_sql_types)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace yaorm
}  // namespace org

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::org::yaorm::WhereClause_OperatorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::WhereClause_OperatorType>() {
  return ::org::yaorm::WhereClause_OperatorType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::WhereClause_ConnectingAndOr> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::WhereClause_ConnectingAndOr>() {
  return ::org::yaorm::WhereClause_ConnectingAndOr_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::ColumnDefinition_ColumnType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::ColumnDefinition_ColumnType>() {
  return ::org::yaorm::ColumnDefinition_ColumnType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::ColumnDefinition_LinkerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::ColumnDefinition_LinkerType>() {
  return ::org::yaorm::ColumnDefinition_LinkerType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::Difference_EntityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::Difference_EntityType>() {
  return ::org::yaorm::Difference_EntityType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::Difference_Operation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::Difference_Operation>() {
  return ::org::yaorm::Difference_Operation_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::TableDefinition_TableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::TableDefinition_TableType>() {
  return ::org::yaorm::TableDefinition_TableType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::DatabaseOperation_DatabaseOperationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::DatabaseOperation_DatabaseOperationType>() {
  return ::org::yaorm::DatabaseOperation_DatabaseOperationType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::TableDefinitionGraph_TableDefinitionGraphType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::TableDefinitionGraph_TableDefinitionGraphType>() {
  return ::org::yaorm::TableDefinitionGraph_TableDefinitionGraphType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::ProtobufType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::ProtobufType>() {
  return ::org::yaorm::ProtobufType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::SelectFunctionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::SelectFunctionType>() {
  return ::org::yaorm::SelectFunctionType_descriptor();
}
template <> struct is_proto_enum< ::org::yaorm::OrderByType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::yaorm::OrderByType>() {
  return ::org::yaorm::OrderByType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_yaorm_5fmodels_2eproto__INCLUDED
