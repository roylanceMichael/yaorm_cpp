// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yaorm_models.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yaorm_models.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace yaorm {

namespace {

const ::google::protobuf::Descriptor* WhereClauseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhereClauseItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WhereClauseItem_OperatorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WhereClauseItem_ConnectingAndOr_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PropertyDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyDefinition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Index_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Index_reflection_ = NULL;
const ::google::protobuf::Descriptor* Difference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Difference_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Difference_EntityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Difference_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Definition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Definition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Definitions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Definitions_reflection_ = NULL;
const ::google::protobuf::Descriptor* DifferenceReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DifferenceReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyHolder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyHolder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* Records_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Records_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtobufType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_yaorm_5fmodels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_yaorm_5fmodels_2eproto() {
  protobuf_AddDesc_yaorm_5fmodels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "yaorm_models.proto");
  GOOGLE_CHECK(file != NULL);
  WhereClauseItem_descriptor_ = file->message_type(0);
  static const int WhereClauseItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhereClauseItem, name_and_property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhereClauseItem, operator_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhereClauseItem, connecting_and_or_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhereClauseItem, connecting_where_clause_),
  };
  WhereClauseItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WhereClauseItem_descriptor_,
      WhereClauseItem::default_instance_,
      WhereClauseItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(WhereClauseItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhereClauseItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhereClauseItem, _is_default_instance_));
  WhereClauseItem_OperatorType_descriptor_ = WhereClauseItem_descriptor_->enum_type(0);
  WhereClauseItem_ConnectingAndOr_descriptor_ = WhereClauseItem_descriptor_->enum_type(1);
  PropertyDefinition_descriptor_ = file->message_type(1);
  static const int PropertyDefinition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyDefinition, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyDefinition, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyDefinition, foreign_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyDefinition, is_key_),
  };
  PropertyDefinition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PropertyDefinition_descriptor_,
      PropertyDefinition::default_instance_,
      PropertyDefinition_offsets_,
      -1,
      -1,
      -1,
      sizeof(PropertyDefinition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyDefinition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyDefinition, _is_default_instance_));
  Index_descriptor_ = file->message_type(2);
  static const int Index_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, column_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, include_names_),
  };
  Index_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Index_descriptor_,
      Index::default_instance_,
      Index_offsets_,
      -1,
      -1,
      -1,
      sizeof(Index),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _is_default_instance_));
  Difference_descriptor_ = file->message_type(3);
  static const int Difference_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Difference, entity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Difference, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Difference, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Difference, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Difference, property_definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Difference, definition_),
  };
  Difference_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Difference_descriptor_,
      Difference::default_instance_,
      Difference_offsets_,
      -1,
      -1,
      -1,
      sizeof(Difference),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Difference, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Difference, _is_default_instance_));
  Difference_EntityType_descriptor_ = Difference_descriptor_->enum_type(0);
  Difference_Operation_descriptor_ = Difference_descriptor_->enum_type(1);
  Definition_descriptor_ = file->message_type(4);
  static const int Definition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Definition, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Definition, property_definitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Definition, index_),
  };
  Definition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Definition_descriptor_,
      Definition::default_instance_,
      Definition_offsets_,
      -1,
      -1,
      -1,
      sizeof(Definition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Definition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Definition, _is_default_instance_));
  Definitions_descriptor_ = file->message_type(5);
  static const int Definitions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Definitions, definitions_),
  };
  Definitions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Definitions_descriptor_,
      Definitions::default_instance_,
      Definitions_offsets_,
      -1,
      -1,
      -1,
      sizeof(Definitions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Definitions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Definitions, _is_default_instance_));
  DifferenceReport_descriptor_ = file->message_type(6);
  static const int DifferenceReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferenceReport, migration_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferenceReport, differences_),
  };
  DifferenceReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DifferenceReport_descriptor_,
      DifferenceReport::default_instance_,
      DifferenceReport_offsets_,
      -1,
      -1,
      -1,
      sizeof(DifferenceReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferenceReport, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifferenceReport, _is_default_instance_));
  PropertyHolder_descriptor_ = file->message_type(7);
  static const int PropertyHolder_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, property_definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, double_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, float_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, int32_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, int64_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, uint32_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, uint64_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, sint32_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, sint64_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, fixed32_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, fixed64_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, sfixed32_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, sfixed64_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, bool_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, string_holder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, bytes_holder_),
  };
  PropertyHolder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PropertyHolder_descriptor_,
      PropertyHolder::default_instance_,
      PropertyHolder_offsets_,
      -1,
      -1,
      -1,
      sizeof(PropertyHolder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyHolder, _is_default_instance_));
  Record_descriptor_ = file->message_type(8);
  static const int Record_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, columns_),
  };
  Record_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      -1,
      -1,
      -1,
      sizeof(Record),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _is_default_instance_));
  Records_descriptor_ = file->message_type(9);
  static const int Records_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, records_),
  };
  Records_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Records_descriptor_,
      Records::default_instance_,
      Records_offsets_,
      -1,
      -1,
      -1,
      sizeof(Records),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, _is_default_instance_));
  ProtobufType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_yaorm_5fmodels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WhereClauseItem_descriptor_, &WhereClauseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PropertyDefinition_descriptor_, &PropertyDefinition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Index_descriptor_, &Index::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Difference_descriptor_, &Difference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Definition_descriptor_, &Definition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Definitions_descriptor_, &Definitions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DifferenceReport_descriptor_, &DifferenceReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PropertyHolder_descriptor_, &PropertyHolder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Records_descriptor_, &Records::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_yaorm_5fmodels_2eproto() {
  delete WhereClauseItem::default_instance_;
  delete WhereClauseItem_reflection_;
  delete PropertyDefinition::default_instance_;
  delete PropertyDefinition_reflection_;
  delete Index::default_instance_;
  delete Index_reflection_;
  delete Difference::default_instance_;
  delete Difference_reflection_;
  delete Definition::default_instance_;
  delete Definition_reflection_;
  delete Definitions::default_instance_;
  delete Definitions_reflection_;
  delete DifferenceReport::default_instance_;
  delete DifferenceReport_reflection_;
  delete PropertyHolder::default_instance_;
  delete PropertyHolder_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete Records::default_instance_;
  delete Records_reflection_;
}

void protobuf_AddDesc_yaorm_5fmodels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_yaorm_5fmodels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022yaorm_models.proto\022\torg.yaorm\"\206\003\n\017Wher"
    "eClauseItem\0224\n\021name_and_property\030\001 \001(\0132\031"
    ".org.yaorm.PropertyHolder\022>\n\roperator_ty"
    "pe\030\002 \001(\0162\'.org.yaorm.WhereClauseItem.Ope"
    "ratorType\022E\n\021connecting_and_or\030\003 \001(\0162*.o"
    "rg.yaorm.WhereClauseItem.ConnectingAndOr"
    "\022;\n\027connecting_where_clause\030\004 \001(\0132\032.org."
    "yaorm.WhereClauseItem\"K\n\014OperatorType\022\n\n"
    "\006EQUALS\020\000\022\020\n\014GREATER_THAN\020\001\022\r\n\tLESS_THAN"
    "\020\002\022\016\n\nNOT_EQUALS\020\003\",\n\017ConnectingAndOr\022\010\n"
    "\004NONE\020\000\022\007\n\003AND\020\001\022\006\n\002OR\020\002\"u\n\022PropertyDefi"
    "nition\022\014\n\004name\030\001 \001(\t\022%\n\004type\030\002 \001(\0162\027.org"
    ".yaorm.ProtobufType\022\032\n\022foreign_collectio"
    "n\030\003 \001(\010\022\016\n\006is_key\030\004 \001(\010\"r\n\005Index\0223\n\014colu"
    "mn_names\030\001 \003(\0132\035.org.yaorm.PropertyDefin"
    "ition\0224\n\rinclude_names\030\002 \003(\0132\035.org.yaorm"
    ".PropertyDefinition\"\340\002\n\nDifference\0225\n\013en"
    "tity_type\030\001 \001(\0162 .org.yaorm.Difference.E"
    "ntityType\0222\n\toperation\030\002 \001(\0162\037.org.yaorm"
    ".Difference.Operation\022\014\n\004name\030\003 \001(\t\022\037\n\005i"
    "ndex\030\004 \001(\0132\020.org.yaorm.Index\022:\n\023property"
    "_definition\030\005 \001(\0132\035.org.yaorm.PropertyDe"
    "finition\022)\n\ndefinition\030\006 \001(\0132\025.org.yaorm"
    ".Definition\".\n\nEntityType\022\t\n\005INDEX\020\000\022\n\n\006"
    "COLUMN\020\001\022\t\n\005TABLE\020\002\"!\n\tOperation\022\n\n\006CREA"
    "TE\020\000\022\010\n\004DROP\020\001\"x\n\nDefinition\022\014\n\004name\030\001 \001"
    "(\t\022;\n\024property_definitions\030\002 \003(\0132\035.org.y"
    "aorm.PropertyDefinition\022\037\n\005index\030\003 \001(\0132\020"
    ".org.yaorm.Index\"9\n\013Definitions\022*\n\013defin"
    "itions\030\003 \003(\0132\025.org.yaorm.Definition\"X\n\020D"
    "ifferenceReport\022\030\n\020migration_exists\030\001 \001("
    "\010\022*\n\013differences\030\002 \003(\0132\025.org.yaorm.Diffe"
    "rence\"\245\003\n\016PropertyHolder\022:\n\023property_def"
    "inition\030\001 \001(\0132\035.org.yaorm.PropertyDefini"
    "tion\022\025\n\rdouble_holder\030\002 \001(\001\022\024\n\014float_hol"
    "der\030\003 \001(\002\022\024\n\014int32_holder\030\004 \001(\005\022\024\n\014int64"
    "_holder\030\005 \001(\003\022\025\n\ruint32_holder\030\006 \001(\r\022\025\n\r"
    "uint64_holder\030\007 \001(\004\022\025\n\rsint32_holder\030\010 \001"
    "(\021\022\025\n\rsint64_holder\030\t \001(\022\022\026\n\016fixed32_hol"
    "der\030\n \001(\007\022\026\n\016fixed64_holder\030\013 \001(\006\022\027\n\017sfi"
    "xed32_holder\030\014 \001(\017\022\027\n\017sfixed64_holder\030\r "
    "\001(\020\022\023\n\013bool_holder\030\016 \001(\010\022\025\n\rstring_holde"
    "r\030\017 \001(\t\022\024\n\014bytes_holder\030\020 \001(\014\"4\n\006Record\022"
    "*\n\007columns\030\001 \003(\0132\031.org.yaorm.PropertyHol"
    "der\"-\n\007Records\022\"\n\007records\030\001 \003(\0132\021.org.ya"
    "orm.Record*\327\001\n\014ProtobufType\022\010\n\004NONE\020\000\022\n\n"
    "\006DOUBLE\020\001\022\t\n\005FLOAT\020\002\022\t\n\005INT32\020\003\022\t\n\005INT64"
    "\020\004\022\n\n\006UINT32\020\005\022\n\n\006UINT64\020\006\022\n\n\006SINT32\020\007\022\n"
    "\n\006SINT64\020\010\022\013\n\007FIXED32\020\t\022\013\n\007FIXED64\020\n\022\014\n\010"
    "SFIXED32\020\013\022\014\n\010SFIXED64\020\014\022\010\n\004BOOL\020\r\022\n\n\006ST"
    "RING\020\016\022\t\n\005BYTES\020\017\022\t\n\005PROTO\020\020b\006proto3", 2036);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "yaorm_models.proto", &protobuf_RegisterTypes);
  WhereClauseItem::default_instance_ = new WhereClauseItem();
  PropertyDefinition::default_instance_ = new PropertyDefinition();
  Index::default_instance_ = new Index();
  Difference::default_instance_ = new Difference();
  Definition::default_instance_ = new Definition();
  Definitions::default_instance_ = new Definitions();
  DifferenceReport::default_instance_ = new DifferenceReport();
  PropertyHolder::default_instance_ = new PropertyHolder();
  Record::default_instance_ = new Record();
  Records::default_instance_ = new Records();
  WhereClauseItem::default_instance_->InitAsDefaultInstance();
  PropertyDefinition::default_instance_->InitAsDefaultInstance();
  Index::default_instance_->InitAsDefaultInstance();
  Difference::default_instance_->InitAsDefaultInstance();
  Definition::default_instance_->InitAsDefaultInstance();
  Definitions::default_instance_->InitAsDefaultInstance();
  DifferenceReport::default_instance_->InitAsDefaultInstance();
  PropertyHolder::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  Records::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yaorm_5fmodels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yaorm_5fmodels_2eproto {
  StaticDescriptorInitializer_yaorm_5fmodels_2eproto() {
    protobuf_AddDesc_yaorm_5fmodels_2eproto();
  }
} static_descriptor_initializer_yaorm_5fmodels_2eproto_;
const ::google::protobuf::EnumDescriptor* ProtobufType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufType_descriptor_;
}
bool ProtobufType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WhereClauseItem_OperatorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhereClauseItem_OperatorType_descriptor_;
}
bool WhereClauseItem_OperatorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WhereClauseItem_OperatorType WhereClauseItem::EQUALS;
const WhereClauseItem_OperatorType WhereClauseItem::GREATER_THAN;
const WhereClauseItem_OperatorType WhereClauseItem::LESS_THAN;
const WhereClauseItem_OperatorType WhereClauseItem::NOT_EQUALS;
const WhereClauseItem_OperatorType WhereClauseItem::OperatorType_MIN;
const WhereClauseItem_OperatorType WhereClauseItem::OperatorType_MAX;
const int WhereClauseItem::OperatorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WhereClauseItem_ConnectingAndOr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhereClauseItem_ConnectingAndOr_descriptor_;
}
bool WhereClauseItem_ConnectingAndOr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WhereClauseItem_ConnectingAndOr WhereClauseItem::NONE;
const WhereClauseItem_ConnectingAndOr WhereClauseItem::AND;
const WhereClauseItem_ConnectingAndOr WhereClauseItem::OR;
const WhereClauseItem_ConnectingAndOr WhereClauseItem::ConnectingAndOr_MIN;
const WhereClauseItem_ConnectingAndOr WhereClauseItem::ConnectingAndOr_MAX;
const int WhereClauseItem::ConnectingAndOr_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhereClauseItem::kNameAndPropertyFieldNumber;
const int WhereClauseItem::kOperatorTypeFieldNumber;
const int WhereClauseItem::kConnectingAndOrFieldNumber;
const int WhereClauseItem::kConnectingWhereClauseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhereClauseItem::WhereClauseItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.WhereClauseItem)
}

void WhereClauseItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  name_and_property_ = const_cast< ::org::yaorm::PropertyHolder*>(&::org::yaorm::PropertyHolder::default_instance());
  connecting_where_clause_ = const_cast< ::org::yaorm::WhereClauseItem*>(&::org::yaorm::WhereClauseItem::default_instance());
}

WhereClauseItem::WhereClauseItem(const WhereClauseItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.WhereClauseItem)
}

void WhereClauseItem::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  name_and_property_ = NULL;
  operator_type_ = 0;
  connecting_and_or_ = 0;
  connecting_where_clause_ = NULL;
}

WhereClauseItem::~WhereClauseItem() {
  // @@protoc_insertion_point(destructor:org.yaorm.WhereClauseItem)
  SharedDtor();
}

void WhereClauseItem::SharedDtor() {
  if (this != default_instance_) {
    delete name_and_property_;
    delete connecting_where_clause_;
  }
}

void WhereClauseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhereClauseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhereClauseItem_descriptor_;
}

const WhereClauseItem& WhereClauseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

WhereClauseItem* WhereClauseItem::default_instance_ = NULL;

WhereClauseItem* WhereClauseItem::New(::google::protobuf::Arena* arena) const {
  WhereClauseItem* n = new WhereClauseItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhereClauseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.WhereClauseItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WhereClauseItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WhereClauseItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(operator_type_, connecting_and_or_);
  if (GetArenaNoVirtual() == NULL && name_and_property_ != NULL) delete name_and_property_;
  name_and_property_ = NULL;
  if (GetArenaNoVirtual() == NULL && connecting_where_clause_ != NULL) delete connecting_where_clause_;
  connecting_where_clause_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool WhereClauseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.WhereClauseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.yaorm.PropertyHolder name_and_property = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_and_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operator_type;
        break;
      }

      // optional .org.yaorm.WhereClauseItem.OperatorType operator_type = 2;
      case 2: {
        if (tag == 16) {
         parse_operator_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_type(static_cast< ::org::yaorm::WhereClauseItem_OperatorType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_connecting_and_or;
        break;
      }

      // optional .org.yaorm.WhereClauseItem.ConnectingAndOr connecting_and_or = 3;
      case 3: {
        if (tag == 24) {
         parse_connecting_and_or:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connecting_and_or(static_cast< ::org::yaorm::WhereClauseItem_ConnectingAndOr >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_connecting_where_clause;
        break;
      }

      // optional .org.yaorm.WhereClauseItem connecting_where_clause = 4;
      case 4: {
        if (tag == 34) {
         parse_connecting_where_clause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connecting_where_clause()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.WhereClauseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.WhereClauseItem)
  return false;
#undef DO_
}

void WhereClauseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.WhereClauseItem)
  // optional .org.yaorm.PropertyHolder name_and_property = 1;
  if (this->has_name_and_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->name_and_property_, output);
  }

  // optional .org.yaorm.WhereClauseItem.OperatorType operator_type = 2;
  if (this->operator_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operator_type(), output);
  }

  // optional .org.yaorm.WhereClauseItem.ConnectingAndOr connecting_and_or = 3;
  if (this->connecting_and_or() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->connecting_and_or(), output);
  }

  // optional .org.yaorm.WhereClauseItem connecting_where_clause = 4;
  if (this->has_connecting_where_clause()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->connecting_where_clause_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.WhereClauseItem)
}

::google::protobuf::uint8* WhereClauseItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.WhereClauseItem)
  // optional .org.yaorm.PropertyHolder name_and_property = 1;
  if (this->has_name_and_property()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->name_and_property_, false, target);
  }

  // optional .org.yaorm.WhereClauseItem.OperatorType operator_type = 2;
  if (this->operator_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operator_type(), target);
  }

  // optional .org.yaorm.WhereClauseItem.ConnectingAndOr connecting_and_or = 3;
  if (this->connecting_and_or() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->connecting_and_or(), target);
  }

  // optional .org.yaorm.WhereClauseItem connecting_where_clause = 4;
  if (this->has_connecting_where_clause()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->connecting_where_clause_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.WhereClauseItem)
  return target;
}

int WhereClauseItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.WhereClauseItem)
  int total_size = 0;

  // optional .org.yaorm.PropertyHolder name_and_property = 1;
  if (this->has_name_and_property()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_and_property_);
  }

  // optional .org.yaorm.WhereClauseItem.OperatorType operator_type = 2;
  if (this->operator_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_type());
  }

  // optional .org.yaorm.WhereClauseItem.ConnectingAndOr connecting_and_or = 3;
  if (this->connecting_and_or() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connecting_and_or());
  }

  // optional .org.yaorm.WhereClauseItem connecting_where_clause = 4;
  if (this->has_connecting_where_clause()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->connecting_where_clause_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhereClauseItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.WhereClauseItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WhereClauseItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WhereClauseItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.WhereClauseItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.WhereClauseItem)
    MergeFrom(*source);
  }
}

void WhereClauseItem::MergeFrom(const WhereClauseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.WhereClauseItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_name_and_property()) {
    mutable_name_and_property()->::org::yaorm::PropertyHolder::MergeFrom(from.name_and_property());
  }
  if (from.operator_type() != 0) {
    set_operator_type(from.operator_type());
  }
  if (from.connecting_and_or() != 0) {
    set_connecting_and_or(from.connecting_and_or());
  }
  if (from.has_connecting_where_clause()) {
    mutable_connecting_where_clause()->::org::yaorm::WhereClauseItem::MergeFrom(from.connecting_where_clause());
  }
}

void WhereClauseItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.WhereClauseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhereClauseItem::CopyFrom(const WhereClauseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.WhereClauseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhereClauseItem::IsInitialized() const {

  return true;
}

void WhereClauseItem::Swap(WhereClauseItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhereClauseItem::InternalSwap(WhereClauseItem* other) {
  std::swap(name_and_property_, other->name_and_property_);
  std::swap(operator_type_, other->operator_type_);
  std::swap(connecting_and_or_, other->connecting_and_or_);
  std::swap(connecting_where_clause_, other->connecting_where_clause_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhereClauseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhereClauseItem_descriptor_;
  metadata.reflection = WhereClauseItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhereClauseItem

// optional .org.yaorm.PropertyHolder name_and_property = 1;
bool WhereClauseItem::has_name_and_property() const {
  return !_is_default_instance_ && name_and_property_ != NULL;
}
void WhereClauseItem::clear_name_and_property() {
  if (GetArenaNoVirtual() == NULL && name_and_property_ != NULL) delete name_and_property_;
  name_and_property_ = NULL;
}
const ::org::yaorm::PropertyHolder& WhereClauseItem::name_and_property() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClauseItem.name_and_property)
  return name_and_property_ != NULL ? *name_and_property_ : *default_instance_->name_and_property_;
}
::org::yaorm::PropertyHolder* WhereClauseItem::mutable_name_and_property() {
  
  if (name_and_property_ == NULL) {
    name_and_property_ = new ::org::yaorm::PropertyHolder;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.WhereClauseItem.name_and_property)
  return name_and_property_;
}
::org::yaorm::PropertyHolder* WhereClauseItem::release_name_and_property() {
  // @@protoc_insertion_point(field_release:org.yaorm.WhereClauseItem.name_and_property)
  
  ::org::yaorm::PropertyHolder* temp = name_and_property_;
  name_and_property_ = NULL;
  return temp;
}
void WhereClauseItem::set_allocated_name_and_property(::org::yaorm::PropertyHolder* name_and_property) {
  delete name_and_property_;
  name_and_property_ = name_and_property;
  if (name_and_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.WhereClauseItem.name_and_property)
}

// optional .org.yaorm.WhereClauseItem.OperatorType operator_type = 2;
void WhereClauseItem::clear_operator_type() {
  operator_type_ = 0;
}
 ::org::yaorm::WhereClauseItem_OperatorType WhereClauseItem::operator_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClauseItem.operator_type)
  return static_cast< ::org::yaorm::WhereClauseItem_OperatorType >(operator_type_);
}
 void WhereClauseItem::set_operator_type(::org::yaorm::WhereClauseItem_OperatorType value) {
  
  operator_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.WhereClauseItem.operator_type)
}

// optional .org.yaorm.WhereClauseItem.ConnectingAndOr connecting_and_or = 3;
void WhereClauseItem::clear_connecting_and_or() {
  connecting_and_or_ = 0;
}
 ::org::yaorm::WhereClauseItem_ConnectingAndOr WhereClauseItem::connecting_and_or() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClauseItem.connecting_and_or)
  return static_cast< ::org::yaorm::WhereClauseItem_ConnectingAndOr >(connecting_and_or_);
}
 void WhereClauseItem::set_connecting_and_or(::org::yaorm::WhereClauseItem_ConnectingAndOr value) {
  
  connecting_and_or_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.WhereClauseItem.connecting_and_or)
}

// optional .org.yaorm.WhereClauseItem connecting_where_clause = 4;
bool WhereClauseItem::has_connecting_where_clause() const {
  return !_is_default_instance_ && connecting_where_clause_ != NULL;
}
void WhereClauseItem::clear_connecting_where_clause() {
  if (GetArenaNoVirtual() == NULL && connecting_where_clause_ != NULL) delete connecting_where_clause_;
  connecting_where_clause_ = NULL;
}
const ::org::yaorm::WhereClauseItem& WhereClauseItem::connecting_where_clause() const {
  // @@protoc_insertion_point(field_get:org.yaorm.WhereClauseItem.connecting_where_clause)
  return connecting_where_clause_ != NULL ? *connecting_where_clause_ : *default_instance_->connecting_where_clause_;
}
::org::yaorm::WhereClauseItem* WhereClauseItem::mutable_connecting_where_clause() {
  
  if (connecting_where_clause_ == NULL) {
    connecting_where_clause_ = new ::org::yaorm::WhereClauseItem;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.WhereClauseItem.connecting_where_clause)
  return connecting_where_clause_;
}
::org::yaorm::WhereClauseItem* WhereClauseItem::release_connecting_where_clause() {
  // @@protoc_insertion_point(field_release:org.yaorm.WhereClauseItem.connecting_where_clause)
  
  ::org::yaorm::WhereClauseItem* temp = connecting_where_clause_;
  connecting_where_clause_ = NULL;
  return temp;
}
void WhereClauseItem::set_allocated_connecting_where_clause(::org::yaorm::WhereClauseItem* connecting_where_clause) {
  delete connecting_where_clause_;
  connecting_where_clause_ = connecting_where_clause;
  if (connecting_where_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.WhereClauseItem.connecting_where_clause)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyDefinition::kNameFieldNumber;
const int PropertyDefinition::kTypeFieldNumber;
const int PropertyDefinition::kForeignCollectionFieldNumber;
const int PropertyDefinition::kIsKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyDefinition::PropertyDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.PropertyDefinition)
}

void PropertyDefinition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PropertyDefinition::PropertyDefinition(const PropertyDefinition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.PropertyDefinition)
}

void PropertyDefinition::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  foreign_collection_ = false;
  is_key_ = false;
}

PropertyDefinition::~PropertyDefinition() {
  // @@protoc_insertion_point(destructor:org.yaorm.PropertyDefinition)
  SharedDtor();
}

void PropertyDefinition::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PropertyDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyDefinition_descriptor_;
}

const PropertyDefinition& PropertyDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

PropertyDefinition* PropertyDefinition::default_instance_ = NULL;

PropertyDefinition* PropertyDefinition::New(::google::protobuf::Arena* arena) const {
  PropertyDefinition* n = new PropertyDefinition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.PropertyDefinition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PropertyDefinition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PropertyDefinition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, is_key_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PropertyDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.PropertyDefinition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.yaorm.PropertyDefinition.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .org.yaorm.ProtobufType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::org::yaorm::ProtobufType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_foreign_collection;
        break;
      }

      // optional bool foreign_collection = 3;
      case 3: {
        if (tag == 24) {
         parse_foreign_collection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foreign_collection_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_key;
        break;
      }

      // optional bool is_key = 4;
      case 4: {
        if (tag == 32) {
         parse_is_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.PropertyDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.PropertyDefinition)
  return false;
#undef DO_
}

void PropertyDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.PropertyDefinition)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.yaorm.PropertyDefinition.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .org.yaorm.ProtobufType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool foreign_collection = 3;
  if (this->foreign_collection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->foreign_collection(), output);
  }

  // optional bool is_key = 4;
  if (this->is_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.PropertyDefinition)
}

::google::protobuf::uint8* PropertyDefinition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.PropertyDefinition)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.yaorm.PropertyDefinition.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .org.yaorm.ProtobufType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool foreign_collection = 3;
  if (this->foreign_collection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->foreign_collection(), target);
  }

  // optional bool is_key = 4;
  if (this->is_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.PropertyDefinition)
  return target;
}

int PropertyDefinition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.PropertyDefinition)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .org.yaorm.ProtobufType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bool foreign_collection = 3;
  if (this->foreign_collection() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_key = 4;
  if (this->is_key() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.PropertyDefinition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PropertyDefinition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyDefinition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.PropertyDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.PropertyDefinition)
    MergeFrom(*source);
  }
}

void PropertyDefinition::MergeFrom(const PropertyDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.PropertyDefinition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.foreign_collection() != 0) {
    set_foreign_collection(from.foreign_collection());
  }
  if (from.is_key() != 0) {
    set_is_key(from.is_key());
  }
}

void PropertyDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.PropertyDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyDefinition::CopyFrom(const PropertyDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.PropertyDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyDefinition::IsInitialized() const {

  return true;
}

void PropertyDefinition::Swap(PropertyDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyDefinition::InternalSwap(PropertyDefinition* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(foreign_collection_, other->foreign_collection_);
  std::swap(is_key_, other->is_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyDefinition_descriptor_;
  metadata.reflection = PropertyDefinition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyDefinition

// optional string name = 1;
void PropertyDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PropertyDefinition::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyDefinition.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropertyDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyDefinition.name)
}
 void PropertyDefinition::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.PropertyDefinition.name)
}
 void PropertyDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.PropertyDefinition.name)
}
 ::std::string* PropertyDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.PropertyDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PropertyDefinition::release_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.PropertyDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropertyDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.PropertyDefinition.name)
}

// optional .org.yaorm.ProtobufType type = 2;
void PropertyDefinition::clear_type() {
  type_ = 0;
}
 ::org::yaorm::ProtobufType PropertyDefinition::type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyDefinition.type)
  return static_cast< ::org::yaorm::ProtobufType >(type_);
}
 void PropertyDefinition::set_type(::org::yaorm::ProtobufType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyDefinition.type)
}

// optional bool foreign_collection = 3;
void PropertyDefinition::clear_foreign_collection() {
  foreign_collection_ = false;
}
 bool PropertyDefinition::foreign_collection() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyDefinition.foreign_collection)
  return foreign_collection_;
}
 void PropertyDefinition::set_foreign_collection(bool value) {
  
  foreign_collection_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyDefinition.foreign_collection)
}

// optional bool is_key = 4;
void PropertyDefinition::clear_is_key() {
  is_key_ = false;
}
 bool PropertyDefinition::is_key() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyDefinition.is_key)
  return is_key_;
}
 void PropertyDefinition::set_is_key(bool value) {
  
  is_key_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyDefinition.is_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Index::kColumnNamesFieldNumber;
const int Index::kIncludeNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Index::Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.Index)
}

void Index::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Index::Index(const Index& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.Index)
}

void Index::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:org.yaorm.Index)
  SharedDtor();
}

void Index::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Index_descriptor_;
}

const Index& Index::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

Index* Index::default_instance_ = NULL;

Index* Index::New(::google::protobuf::Arena* arena) const {
  Index* n = new Index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.Index)
  column_names_.Clear();
  include_names_.Clear();
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.yaorm.PropertyDefinition column_names = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_column_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_column_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_column_names;
        if (input->ExpectTag(18)) goto parse_loop_include_names;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .org.yaorm.PropertyDefinition include_names = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_include_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_include_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_include_names;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.Index)
  // repeated .org.yaorm.PropertyDefinition column_names = 1;
  for (unsigned int i = 0, n = this->column_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->column_names(i), output);
  }

  // repeated .org.yaorm.PropertyDefinition include_names = 2;
  for (unsigned int i = 0, n = this->include_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->include_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.Index)
}

::google::protobuf::uint8* Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.Index)
  // repeated .org.yaorm.PropertyDefinition column_names = 1;
  for (unsigned int i = 0, n = this->column_names_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->column_names(i), false, target);
  }

  // repeated .org.yaorm.PropertyDefinition include_names = 2;
  for (unsigned int i = 0, n = this->include_names_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->include_names(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.Index)
  return target;
}

int Index::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.Index)
  int total_size = 0;

  // repeated .org.yaorm.PropertyDefinition column_names = 1;
  total_size += 1 * this->column_names_size();
  for (int i = 0; i < this->column_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column_names(i));
  }

  // repeated .org.yaorm.PropertyDefinition include_names = 2;
  total_size += 1 * this->include_names_size();
  for (int i = 0; i < this->include_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->include_names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.Index)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Index* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.Index)
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.Index)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  column_names_.MergeFrom(from.column_names_);
  include_names_.MergeFrom(from.include_names_);
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {

  return true;
}

void Index::Swap(Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Index::InternalSwap(Index* other) {
  column_names_.UnsafeArenaSwap(&other->column_names_);
  include_names_.UnsafeArenaSwap(&other->include_names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Index_descriptor_;
  metadata.reflection = Index_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Index

// repeated .org.yaorm.PropertyDefinition column_names = 1;
int Index::column_names_size() const {
  return column_names_.size();
}
void Index::clear_column_names() {
  column_names_.Clear();
}
const ::org::yaorm::PropertyDefinition& Index::column_names(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Index.column_names)
  return column_names_.Get(index);
}
::org::yaorm::PropertyDefinition* Index::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Index.column_names)
  return column_names_.Mutable(index);
}
::org::yaorm::PropertyDefinition* Index::add_column_names() {
  // @@protoc_insertion_point(field_add:org.yaorm.Index.column_names)
  return column_names_.Add();
}
::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
Index::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Index.column_names)
  return &column_names_;
}
const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
Index::column_names() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Index.column_names)
  return column_names_;
}

// repeated .org.yaorm.PropertyDefinition include_names = 2;
int Index::include_names_size() const {
  return include_names_.size();
}
void Index::clear_include_names() {
  include_names_.Clear();
}
const ::org::yaorm::PropertyDefinition& Index::include_names(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Index.include_names)
  return include_names_.Get(index);
}
::org::yaorm::PropertyDefinition* Index::mutable_include_names(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Index.include_names)
  return include_names_.Mutable(index);
}
::org::yaorm::PropertyDefinition* Index::add_include_names() {
  // @@protoc_insertion_point(field_add:org.yaorm.Index.include_names)
  return include_names_.Add();
}
::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
Index::mutable_include_names() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Index.include_names)
  return &include_names_;
}
const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
Index::include_names() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Index.include_names)
  return include_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Difference_EntityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Difference_EntityType_descriptor_;
}
bool Difference_EntityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Difference_EntityType Difference::INDEX;
const Difference_EntityType Difference::COLUMN;
const Difference_EntityType Difference::TABLE;
const Difference_EntityType Difference::EntityType_MIN;
const Difference_EntityType Difference::EntityType_MAX;
const int Difference::EntityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Difference_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Difference_Operation_descriptor_;
}
bool Difference_Operation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Difference_Operation Difference::CREATE;
const Difference_Operation Difference::DROP;
const Difference_Operation Difference::Operation_MIN;
const Difference_Operation Difference::Operation_MAX;
const int Difference::Operation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Difference::kEntityTypeFieldNumber;
const int Difference::kOperationFieldNumber;
const int Difference::kNameFieldNumber;
const int Difference::kIndexFieldNumber;
const int Difference::kPropertyDefinitionFieldNumber;
const int Difference::kDefinitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Difference::Difference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.Difference)
}

void Difference::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  index_ = const_cast< ::org::yaorm::Index*>(&::org::yaorm::Index::default_instance());
  property_definition_ = const_cast< ::org::yaorm::PropertyDefinition*>(&::org::yaorm::PropertyDefinition::default_instance());
  definition_ = const_cast< ::org::yaorm::Definition*>(&::org::yaorm::Definition::default_instance());
}

Difference::Difference(const Difference& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.Difference)
}

void Difference::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_type_ = 0;
  operation_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = NULL;
  property_definition_ = NULL;
  definition_ = NULL;
}

Difference::~Difference() {
  // @@protoc_insertion_point(destructor:org.yaorm.Difference)
  SharedDtor();
}

void Difference::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete index_;
    delete property_definition_;
    delete definition_;
  }
}

void Difference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Difference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Difference_descriptor_;
}

const Difference& Difference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

Difference* Difference::default_instance_ = NULL;

Difference* Difference::New(::google::protobuf::Arena* arena) const {
  Difference* n = new Difference;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Difference::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.Difference)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Difference, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Difference*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(entity_type_, operation_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
  if (GetArenaNoVirtual() == NULL && property_definition_ != NULL) delete property_definition_;
  property_definition_ = NULL;
  if (GetArenaNoVirtual() == NULL && definition_ != NULL) delete definition_;
  definition_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Difference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.Difference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.yaorm.Difference.EntityType entity_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_type(static_cast< ::org::yaorm::Difference_EntityType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // optional .org.yaorm.Difference.Operation operation = 2;
      case 2: {
        if (tag == 16) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::org::yaorm::Difference_Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.yaorm.Difference.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_index;
        break;
      }

      // optional .org.yaorm.Index index = 4;
      case 4: {
        if (tag == 34) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_property_definition;
        break;
      }

      // optional .org.yaorm.PropertyDefinition property_definition = 5;
      case 5: {
        if (tag == 42) {
         parse_property_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_definition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_definition;
        break;
      }

      // optional .org.yaorm.Definition definition = 6;
      case 6: {
        if (tag == 50) {
         parse_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_definition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.Difference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.Difference)
  return false;
#undef DO_
}

void Difference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.Difference)
  // optional .org.yaorm.Difference.EntityType entity_type = 1;
  if (this->entity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->entity_type(), output);
  }

  // optional .org.yaorm.Difference.Operation operation = 2;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.yaorm.Difference.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .org.yaorm.Index index = 4;
  if (this->has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->index_, output);
  }

  // optional .org.yaorm.PropertyDefinition property_definition = 5;
  if (this->has_property_definition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->property_definition_, output);
  }

  // optional .org.yaorm.Definition definition = 6;
  if (this->has_definition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->definition_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.Difference)
}

::google::protobuf::uint8* Difference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.Difference)
  // optional .org.yaorm.Difference.EntityType entity_type = 1;
  if (this->entity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->entity_type(), target);
  }

  // optional .org.yaorm.Difference.Operation operation = 2;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.yaorm.Difference.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .org.yaorm.Index index = 4;
  if (this->has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->index_, false, target);
  }

  // optional .org.yaorm.PropertyDefinition property_definition = 5;
  if (this->has_property_definition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->property_definition_, false, target);
  }

  // optional .org.yaorm.Definition definition = 6;
  if (this->has_definition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->definition_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.Difference)
  return target;
}

int Difference::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.Difference)
  int total_size = 0;

  // optional .org.yaorm.Difference.EntityType entity_type = 1;
  if (this->entity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_type());
  }

  // optional .org.yaorm.Difference.Operation operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .org.yaorm.Index index = 4;
  if (this->has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_);
  }

  // optional .org.yaorm.PropertyDefinition property_definition = 5;
  if (this->has_property_definition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->property_definition_);
  }

  // optional .org.yaorm.Definition definition = 6;
  if (this->has_definition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->definition_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Difference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.Difference)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Difference* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Difference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.Difference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.Difference)
    MergeFrom(*source);
  }
}

void Difference::MergeFrom(const Difference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.Difference)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.entity_type() != 0) {
    set_entity_type(from.entity_type());
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_index()) {
    mutable_index()->::org::yaorm::Index::MergeFrom(from.index());
  }
  if (from.has_property_definition()) {
    mutable_property_definition()->::org::yaorm::PropertyDefinition::MergeFrom(from.property_definition());
  }
  if (from.has_definition()) {
    mutable_definition()->::org::yaorm::Definition::MergeFrom(from.definition());
  }
}

void Difference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.Difference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Difference::CopyFrom(const Difference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.Difference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Difference::IsInitialized() const {

  return true;
}

void Difference::Swap(Difference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Difference::InternalSwap(Difference* other) {
  std::swap(entity_type_, other->entity_type_);
  std::swap(operation_, other->operation_);
  name_.Swap(&other->name_);
  std::swap(index_, other->index_);
  std::swap(property_definition_, other->property_definition_);
  std::swap(definition_, other->definition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Difference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Difference_descriptor_;
  metadata.reflection = Difference_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Difference

// optional .org.yaorm.Difference.EntityType entity_type = 1;
void Difference::clear_entity_type() {
  entity_type_ = 0;
}
 ::org::yaorm::Difference_EntityType Difference::entity_type() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.entity_type)
  return static_cast< ::org::yaorm::Difference_EntityType >(entity_type_);
}
 void Difference::set_entity_type(::org::yaorm::Difference_EntityType value) {
  
  entity_type_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.entity_type)
}

// optional .org.yaorm.Difference.Operation operation = 2;
void Difference::clear_operation() {
  operation_ = 0;
}
 ::org::yaorm::Difference_Operation Difference::operation() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.operation)
  return static_cast< ::org::yaorm::Difference_Operation >(operation_);
}
 void Difference::set_operation(::org::yaorm::Difference_Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.operation)
}

// optional string name = 3;
void Difference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Difference::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Difference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Difference.name)
}
 void Difference::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Difference.name)
}
 void Difference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Difference.name)
}
 ::std::string* Difference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Difference::release_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.Difference.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Difference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.name)
}

// optional .org.yaorm.Index index = 4;
bool Difference::has_index() const {
  return !_is_default_instance_ && index_ != NULL;
}
void Difference::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
const ::org::yaorm::Index& Difference::index() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
::org::yaorm::Index* Difference::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::org::yaorm::Index;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.index)
  return index_;
}
::org::yaorm::Index* Difference::release_index() {
  // @@protoc_insertion_point(field_release:org.yaorm.Difference.index)
  
  ::org::yaorm::Index* temp = index_;
  index_ = NULL;
  return temp;
}
void Difference::set_allocated_index(::org::yaorm::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.index)
}

// optional .org.yaorm.PropertyDefinition property_definition = 5;
bool Difference::has_property_definition() const {
  return !_is_default_instance_ && property_definition_ != NULL;
}
void Difference::clear_property_definition() {
  if (GetArenaNoVirtual() == NULL && property_definition_ != NULL) delete property_definition_;
  property_definition_ = NULL;
}
const ::org::yaorm::PropertyDefinition& Difference::property_definition() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.property_definition)
  return property_definition_ != NULL ? *property_definition_ : *default_instance_->property_definition_;
}
::org::yaorm::PropertyDefinition* Difference::mutable_property_definition() {
  
  if (property_definition_ == NULL) {
    property_definition_ = new ::org::yaorm::PropertyDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.property_definition)
  return property_definition_;
}
::org::yaorm::PropertyDefinition* Difference::release_property_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.Difference.property_definition)
  
  ::org::yaorm::PropertyDefinition* temp = property_definition_;
  property_definition_ = NULL;
  return temp;
}
void Difference::set_allocated_property_definition(::org::yaorm::PropertyDefinition* property_definition) {
  delete property_definition_;
  property_definition_ = property_definition;
  if (property_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.property_definition)
}

// optional .org.yaorm.Definition definition = 6;
bool Difference::has_definition() const {
  return !_is_default_instance_ && definition_ != NULL;
}
void Difference::clear_definition() {
  if (GetArenaNoVirtual() == NULL && definition_ != NULL) delete definition_;
  definition_ = NULL;
}
const ::org::yaorm::Definition& Difference::definition() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Difference.definition)
  return definition_ != NULL ? *definition_ : *default_instance_->definition_;
}
::org::yaorm::Definition* Difference::mutable_definition() {
  
  if (definition_ == NULL) {
    definition_ = new ::org::yaorm::Definition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Difference.definition)
  return definition_;
}
::org::yaorm::Definition* Difference::release_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.Difference.definition)
  
  ::org::yaorm::Definition* temp = definition_;
  definition_ = NULL;
  return temp;
}
void Difference::set_allocated_definition(::org::yaorm::Definition* definition) {
  delete definition_;
  definition_ = definition;
  if (definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Difference.definition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Definition::kNameFieldNumber;
const int Definition::kPropertyDefinitionsFieldNumber;
const int Definition::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Definition::Definition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.Definition)
}

void Definition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  index_ = const_cast< ::org::yaorm::Index*>(&::org::yaorm::Index::default_instance());
}

Definition::Definition(const Definition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.Definition)
}

void Definition::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = NULL;
}

Definition::~Definition() {
  // @@protoc_insertion_point(destructor:org.yaorm.Definition)
  SharedDtor();
}

void Definition::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete index_;
  }
}

void Definition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Definition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Definition_descriptor_;
}

const Definition& Definition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

Definition* Definition::default_instance_ = NULL;

Definition* Definition::New(::google::protobuf::Arena* arena) const {
  Definition* n = new Definition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Definition::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.Definition)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
  property_definitions_.Clear();
}

bool Definition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.Definition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.yaorm.Definition.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_property_definitions;
        break;
      }

      // repeated .org.yaorm.PropertyDefinition property_definitions = 2;
      case 2: {
        if (tag == 18) {
         parse_property_definitions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_property_definitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_property_definitions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_property_definitions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_index;
        break;
      }

      // optional .org.yaorm.Index index = 3;
      case 3: {
        if (tag == 26) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.Definition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.Definition)
  return false;
#undef DO_
}

void Definition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.Definition)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.yaorm.Definition.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .org.yaorm.PropertyDefinition property_definitions = 2;
  for (unsigned int i = 0, n = this->property_definitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_definitions(i), output);
  }

  // optional .org.yaorm.Index index = 3;
  if (this->has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->index_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.Definition)
}

::google::protobuf::uint8* Definition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.Definition)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.yaorm.Definition.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .org.yaorm.PropertyDefinition property_definitions = 2;
  for (unsigned int i = 0, n = this->property_definitions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_definitions(i), false, target);
  }

  // optional .org.yaorm.Index index = 3;
  if (this->has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->index_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.Definition)
  return target;
}

int Definition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.Definition)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .org.yaorm.Index index = 3;
  if (this->has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_);
  }

  // repeated .org.yaorm.PropertyDefinition property_definitions = 2;
  total_size += 1 * this->property_definitions_size();
  for (int i = 0; i < this->property_definitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_definitions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Definition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.Definition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Definition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Definition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.Definition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.Definition)
    MergeFrom(*source);
  }
}

void Definition::MergeFrom(const Definition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.Definition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  property_definitions_.MergeFrom(from.property_definitions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_index()) {
    mutable_index()->::org::yaorm::Index::MergeFrom(from.index());
  }
}

void Definition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.Definition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Definition::CopyFrom(const Definition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.Definition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Definition::IsInitialized() const {

  return true;
}

void Definition::Swap(Definition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Definition::InternalSwap(Definition* other) {
  name_.Swap(&other->name_);
  property_definitions_.UnsafeArenaSwap(&other->property_definitions_);
  std::swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Definition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Definition_descriptor_;
  metadata.reflection = Definition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Definition

// optional string name = 1;
void Definition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Definition::name() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Definition.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Definition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.Definition.name)
}
 void Definition::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.Definition.name)
}
 void Definition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.Definition.name)
}
 ::std::string* Definition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.Definition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Definition::release_name() {
  // @@protoc_insertion_point(field_release:org.yaorm.Definition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Definition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Definition.name)
}

// repeated .org.yaorm.PropertyDefinition property_definitions = 2;
int Definition::property_definitions_size() const {
  return property_definitions_.size();
}
void Definition::clear_property_definitions() {
  property_definitions_.Clear();
}
const ::org::yaorm::PropertyDefinition& Definition::property_definitions(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Definition.property_definitions)
  return property_definitions_.Get(index);
}
::org::yaorm::PropertyDefinition* Definition::mutable_property_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Definition.property_definitions)
  return property_definitions_.Mutable(index);
}
::org::yaorm::PropertyDefinition* Definition::add_property_definitions() {
  // @@protoc_insertion_point(field_add:org.yaorm.Definition.property_definitions)
  return property_definitions_.Add();
}
::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >*
Definition::mutable_property_definitions() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Definition.property_definitions)
  return &property_definitions_;
}
const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyDefinition >&
Definition::property_definitions() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Definition.property_definitions)
  return property_definitions_;
}

// optional .org.yaorm.Index index = 3;
bool Definition::has_index() const {
  return !_is_default_instance_ && index_ != NULL;
}
void Definition::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
const ::org::yaorm::Index& Definition::index() const {
  // @@protoc_insertion_point(field_get:org.yaorm.Definition.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
::org::yaorm::Index* Definition::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::org::yaorm::Index;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.Definition.index)
  return index_;
}
::org::yaorm::Index* Definition::release_index() {
  // @@protoc_insertion_point(field_release:org.yaorm.Definition.index)
  
  ::org::yaorm::Index* temp = index_;
  index_ = NULL;
  return temp;
}
void Definition::set_allocated_index(::org::yaorm::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.Definition.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Definitions::kDefinitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Definitions::Definitions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.Definitions)
}

void Definitions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Definitions::Definitions(const Definitions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.Definitions)
}

void Definitions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Definitions::~Definitions() {
  // @@protoc_insertion_point(destructor:org.yaorm.Definitions)
  SharedDtor();
}

void Definitions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Definitions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Definitions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Definitions_descriptor_;
}

const Definitions& Definitions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

Definitions* Definitions::default_instance_ = NULL;

Definitions* Definitions::New(::google::protobuf::Arena* arena) const {
  Definitions* n = new Definitions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Definitions::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.Definitions)
  definitions_.Clear();
}

bool Definitions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.Definitions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.yaorm.Definition definitions = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_definitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_definitions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_definitions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.Definitions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.Definitions)
  return false;
#undef DO_
}

void Definitions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.Definitions)
  // repeated .org.yaorm.Definition definitions = 3;
  for (unsigned int i = 0, n = this->definitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->definitions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.Definitions)
}

::google::protobuf::uint8* Definitions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.Definitions)
  // repeated .org.yaorm.Definition definitions = 3;
  for (unsigned int i = 0, n = this->definitions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->definitions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.Definitions)
  return target;
}

int Definitions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.Definitions)
  int total_size = 0;

  // repeated .org.yaorm.Definition definitions = 3;
  total_size += 1 * this->definitions_size();
  for (int i = 0; i < this->definitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->definitions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Definitions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.Definitions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Definitions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Definitions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.Definitions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.Definitions)
    MergeFrom(*source);
  }
}

void Definitions::MergeFrom(const Definitions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.Definitions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  definitions_.MergeFrom(from.definitions_);
}

void Definitions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.Definitions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Definitions::CopyFrom(const Definitions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.Definitions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Definitions::IsInitialized() const {

  return true;
}

void Definitions::Swap(Definitions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Definitions::InternalSwap(Definitions* other) {
  definitions_.UnsafeArenaSwap(&other->definitions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Definitions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Definitions_descriptor_;
  metadata.reflection = Definitions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Definitions

// repeated .org.yaorm.Definition definitions = 3;
int Definitions::definitions_size() const {
  return definitions_.size();
}
void Definitions::clear_definitions() {
  definitions_.Clear();
}
const ::org::yaorm::Definition& Definitions::definitions(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Definitions.definitions)
  return definitions_.Get(index);
}
::org::yaorm::Definition* Definitions::mutable_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Definitions.definitions)
  return definitions_.Mutable(index);
}
::org::yaorm::Definition* Definitions::add_definitions() {
  // @@protoc_insertion_point(field_add:org.yaorm.Definitions.definitions)
  return definitions_.Add();
}
::google::protobuf::RepeatedPtrField< ::org::yaorm::Definition >*
Definitions::mutable_definitions() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Definitions.definitions)
  return &definitions_;
}
const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Definition >&
Definitions::definitions() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Definitions.definitions)
  return definitions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DifferenceReport::kMigrationExistsFieldNumber;
const int DifferenceReport::kDifferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DifferenceReport::DifferenceReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.DifferenceReport)
}

void DifferenceReport::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DifferenceReport::DifferenceReport(const DifferenceReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.DifferenceReport)
}

void DifferenceReport::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  migration_exists_ = false;
}

DifferenceReport::~DifferenceReport() {
  // @@protoc_insertion_point(destructor:org.yaorm.DifferenceReport)
  SharedDtor();
}

void DifferenceReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DifferenceReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DifferenceReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DifferenceReport_descriptor_;
}

const DifferenceReport& DifferenceReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

DifferenceReport* DifferenceReport::default_instance_ = NULL;

DifferenceReport* DifferenceReport::New(::google::protobuf::Arena* arena) const {
  DifferenceReport* n = new DifferenceReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DifferenceReport::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.DifferenceReport)
  migration_exists_ = false;
  differences_.Clear();
}

bool DifferenceReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.DifferenceReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool migration_exists = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &migration_exists_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_differences;
        break;
      }

      // repeated .org.yaorm.Difference differences = 2;
      case 2: {
        if (tag == 18) {
         parse_differences:
          DO_(input->IncrementRecursionDepth());
         parse_loop_differences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_differences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_differences;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.DifferenceReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.DifferenceReport)
  return false;
#undef DO_
}

void DifferenceReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.DifferenceReport)
  // optional bool migration_exists = 1;
  if (this->migration_exists() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->migration_exists(), output);
  }

  // repeated .org.yaorm.Difference differences = 2;
  for (unsigned int i = 0, n = this->differences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->differences(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.DifferenceReport)
}

::google::protobuf::uint8* DifferenceReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.DifferenceReport)
  // optional bool migration_exists = 1;
  if (this->migration_exists() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->migration_exists(), target);
  }

  // repeated .org.yaorm.Difference differences = 2;
  for (unsigned int i = 0, n = this->differences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->differences(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.DifferenceReport)
  return target;
}

int DifferenceReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.DifferenceReport)
  int total_size = 0;

  // optional bool migration_exists = 1;
  if (this->migration_exists() != 0) {
    total_size += 1 + 1;
  }

  // repeated .org.yaorm.Difference differences = 2;
  total_size += 1 * this->differences_size();
  for (int i = 0; i < this->differences_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->differences(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DifferenceReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.DifferenceReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DifferenceReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DifferenceReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.DifferenceReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.DifferenceReport)
    MergeFrom(*source);
  }
}

void DifferenceReport::MergeFrom(const DifferenceReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.DifferenceReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  differences_.MergeFrom(from.differences_);
  if (from.migration_exists() != 0) {
    set_migration_exists(from.migration_exists());
  }
}

void DifferenceReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.DifferenceReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DifferenceReport::CopyFrom(const DifferenceReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.DifferenceReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DifferenceReport::IsInitialized() const {

  return true;
}

void DifferenceReport::Swap(DifferenceReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DifferenceReport::InternalSwap(DifferenceReport* other) {
  std::swap(migration_exists_, other->migration_exists_);
  differences_.UnsafeArenaSwap(&other->differences_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DifferenceReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DifferenceReport_descriptor_;
  metadata.reflection = DifferenceReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DifferenceReport

// optional bool migration_exists = 1;
void DifferenceReport::clear_migration_exists() {
  migration_exists_ = false;
}
 bool DifferenceReport::migration_exists() const {
  // @@protoc_insertion_point(field_get:org.yaorm.DifferenceReport.migration_exists)
  return migration_exists_;
}
 void DifferenceReport::set_migration_exists(bool value) {
  
  migration_exists_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.DifferenceReport.migration_exists)
}

// repeated .org.yaorm.Difference differences = 2;
int DifferenceReport::differences_size() const {
  return differences_.size();
}
void DifferenceReport::clear_differences() {
  differences_.Clear();
}
const ::org::yaorm::Difference& DifferenceReport::differences(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.DifferenceReport.differences)
  return differences_.Get(index);
}
::org::yaorm::Difference* DifferenceReport::mutable_differences(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.DifferenceReport.differences)
  return differences_.Mutable(index);
}
::org::yaorm::Difference* DifferenceReport::add_differences() {
  // @@protoc_insertion_point(field_add:org.yaorm.DifferenceReport.differences)
  return differences_.Add();
}
::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >*
DifferenceReport::mutable_differences() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.DifferenceReport.differences)
  return &differences_;
}
const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Difference >&
DifferenceReport::differences() const {
  // @@protoc_insertion_point(field_list:org.yaorm.DifferenceReport.differences)
  return differences_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyHolder::kPropertyDefinitionFieldNumber;
const int PropertyHolder::kDoubleHolderFieldNumber;
const int PropertyHolder::kFloatHolderFieldNumber;
const int PropertyHolder::kInt32HolderFieldNumber;
const int PropertyHolder::kInt64HolderFieldNumber;
const int PropertyHolder::kUint32HolderFieldNumber;
const int PropertyHolder::kUint64HolderFieldNumber;
const int PropertyHolder::kSint32HolderFieldNumber;
const int PropertyHolder::kSint64HolderFieldNumber;
const int PropertyHolder::kFixed32HolderFieldNumber;
const int PropertyHolder::kFixed64HolderFieldNumber;
const int PropertyHolder::kSfixed32HolderFieldNumber;
const int PropertyHolder::kSfixed64HolderFieldNumber;
const int PropertyHolder::kBoolHolderFieldNumber;
const int PropertyHolder::kStringHolderFieldNumber;
const int PropertyHolder::kBytesHolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyHolder::PropertyHolder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.PropertyHolder)
}

void PropertyHolder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  property_definition_ = const_cast< ::org::yaorm::PropertyDefinition*>(&::org::yaorm::PropertyDefinition::default_instance());
}

PropertyHolder::PropertyHolder(const PropertyHolder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.PropertyHolder)
}

void PropertyHolder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  property_definition_ = NULL;
  double_holder_ = 0;
  float_holder_ = 0;
  int32_holder_ = 0;
  int64_holder_ = GOOGLE_LONGLONG(0);
  uint32_holder_ = 0u;
  uint64_holder_ = GOOGLE_ULONGLONG(0);
  sint32_holder_ = 0;
  sint64_holder_ = GOOGLE_LONGLONG(0);
  fixed32_holder_ = 0u;
  fixed64_holder_ = GOOGLE_ULONGLONG(0);
  sfixed32_holder_ = 0;
  sfixed64_holder_ = GOOGLE_LONGLONG(0);
  bool_holder_ = false;
  string_holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PropertyHolder::~PropertyHolder() {
  // @@protoc_insertion_point(destructor:org.yaorm.PropertyHolder)
  SharedDtor();
}

void PropertyHolder::SharedDtor() {
  string_holder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_holder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete property_definition_;
  }
}

void PropertyHolder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyHolder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyHolder_descriptor_;
}

const PropertyHolder& PropertyHolder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

PropertyHolder* PropertyHolder::default_instance_ = NULL;

PropertyHolder* PropertyHolder::New(::google::protobuf::Arena* arena) const {
  PropertyHolder* n = new PropertyHolder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyHolder::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.PropertyHolder)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PropertyHolder, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PropertyHolder*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(double_holder_, sint32_holder_);
  if (GetArenaNoVirtual() == NULL && property_definition_ != NULL) delete property_definition_;
  property_definition_ = NULL;
  ZR_(sint64_holder_, sfixed64_holder_);
  bool_holder_ = false;
  string_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PropertyHolder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.PropertyHolder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.yaorm.PropertyDefinition property_definition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_definition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_double_holder;
        break;
      }

      // optional double double_holder = 2;
      case 2: {
        if (tag == 17) {
         parse_double_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_float_holder;
        break;
      }

      // optional float float_holder = 3;
      case 3: {
        if (tag == 29) {
         parse_float_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_int32_holder;
        break;
      }

      // optional int32 int32_holder = 4;
      case 4: {
        if (tag == 32) {
         parse_int32_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_int64_holder;
        break;
      }

      // optional int64 int64_holder = 5;
      case 5: {
        if (tag == 40) {
         parse_int64_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_uint32_holder;
        break;
      }

      // optional uint32 uint32_holder = 6;
      case 6: {
        if (tag == 48) {
         parse_uint32_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_uint64_holder;
        break;
      }

      // optional uint64 uint64_holder = 7;
      case 7: {
        if (tag == 56) {
         parse_uint64_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sint32_holder;
        break;
      }

      // optional sint32 sint32_holder = 8;
      case 8: {
        if (tag == 64) {
         parse_sint32_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sint32_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sint64_holder;
        break;
      }

      // optional sint64 sint64_holder = 9;
      case 9: {
        if (tag == 72) {
         parse_sint64_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_fixed32_holder;
        break;
      }

      // optional fixed32 fixed32_holder = 10;
      case 10: {
        if (tag == 85) {
         parse_fixed32_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fixed32_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_fixed64_holder;
        break;
      }

      // optional fixed64 fixed64_holder = 11;
      case 11: {
        if (tag == 89) {
         parse_fixed64_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_sfixed32_holder;
        break;
      }

      // optional sfixed32 sfixed32_holder = 12;
      case 12: {
        if (tag == 101) {
         parse_sfixed32_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sfixed32_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_sfixed64_holder;
        break;
      }

      // optional sfixed64 sfixed64_holder = 13;
      case 13: {
        if (tag == 105) {
         parse_sfixed64_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &sfixed64_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_bool_holder;
        break;
      }

      // optional bool bool_holder = 14;
      case 14: {
        if (tag == 112) {
         parse_bool_holder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_holder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_string_holder;
        break;
      }

      // optional string string_holder = 15;
      case 15: {
        if (tag == 122) {
         parse_string_holder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_holder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_holder().data(), this->string_holder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.yaorm.PropertyHolder.string_holder"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_bytes_holder;
        break;
      }

      // optional bytes bytes_holder = 16;
      case 16: {
        if (tag == 130) {
         parse_bytes_holder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_holder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.PropertyHolder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.PropertyHolder)
  return false;
#undef DO_
}

void PropertyHolder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.PropertyHolder)
  // optional .org.yaorm.PropertyDefinition property_definition = 1;
  if (this->has_property_definition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->property_definition_, output);
  }

  // optional double double_holder = 2;
  if (this->double_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->double_holder(), output);
  }

  // optional float float_holder = 3;
  if (this->float_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_holder(), output);
  }

  // optional int32 int32_holder = 4;
  if (this->int32_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->int32_holder(), output);
  }

  // optional int64 int64_holder = 5;
  if (this->int64_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->int64_holder(), output);
  }

  // optional uint32 uint32_holder = 6;
  if (this->uint32_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uint32_holder(), output);
  }

  // optional uint64 uint64_holder = 7;
  if (this->uint64_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->uint64_holder(), output);
  }

  // optional sint32 sint32_holder = 8;
  if (this->sint32_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->sint32_holder(), output);
  }

  // optional sint64 sint64_holder = 9;
  if (this->sint64_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->sint64_holder(), output);
  }

  // optional fixed32 fixed32_holder = 10;
  if (this->fixed32_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->fixed32_holder(), output);
  }

  // optional fixed64 fixed64_holder = 11;
  if (this->fixed64_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->fixed64_holder(), output);
  }

  // optional sfixed32 sfixed32_holder = 12;
  if (this->sfixed32_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(12, this->sfixed32_holder(), output);
  }

  // optional sfixed64 sfixed64_holder = 13;
  if (this->sfixed64_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->sfixed64_holder(), output);
  }

  // optional bool bool_holder = 14;
  if (this->bool_holder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->bool_holder(), output);
  }

  // optional string string_holder = 15;
  if (this->string_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_holder().data(), this->string_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.yaorm.PropertyHolder.string_holder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->string_holder(), output);
  }

  // optional bytes bytes_holder = 16;
  if (this->bytes_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->bytes_holder(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.PropertyHolder)
}

::google::protobuf::uint8* PropertyHolder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.PropertyHolder)
  // optional .org.yaorm.PropertyDefinition property_definition = 1;
  if (this->has_property_definition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->property_definition_, false, target);
  }

  // optional double double_holder = 2;
  if (this->double_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->double_holder(), target);
  }

  // optional float float_holder = 3;
  if (this->float_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_holder(), target);
  }

  // optional int32 int32_holder = 4;
  if (this->int32_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->int32_holder(), target);
  }

  // optional int64 int64_holder = 5;
  if (this->int64_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->int64_holder(), target);
  }

  // optional uint32 uint32_holder = 6;
  if (this->uint32_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uint32_holder(), target);
  }

  // optional uint64 uint64_holder = 7;
  if (this->uint64_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->uint64_holder(), target);
  }

  // optional sint32 sint32_holder = 8;
  if (this->sint32_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->sint32_holder(), target);
  }

  // optional sint64 sint64_holder = 9;
  if (this->sint64_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(9, this->sint64_holder(), target);
  }

  // optional fixed32 fixed32_holder = 10;
  if (this->fixed32_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->fixed32_holder(), target);
  }

  // optional fixed64 fixed64_holder = 11;
  if (this->fixed64_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->fixed64_holder(), target);
  }

  // optional sfixed32 sfixed32_holder = 12;
  if (this->sfixed32_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(12, this->sfixed32_holder(), target);
  }

  // optional sfixed64 sfixed64_holder = 13;
  if (this->sfixed64_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->sfixed64_holder(), target);
  }

  // optional bool bool_holder = 14;
  if (this->bool_holder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->bool_holder(), target);
  }

  // optional string string_holder = 15;
  if (this->string_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_holder().data(), this->string_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.yaorm.PropertyHolder.string_holder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->string_holder(), target);
  }

  // optional bytes bytes_holder = 16;
  if (this->bytes_holder().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->bytes_holder(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.PropertyHolder)
  return target;
}

int PropertyHolder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.PropertyHolder)
  int total_size = 0;

  // optional .org.yaorm.PropertyDefinition property_definition = 1;
  if (this->has_property_definition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->property_definition_);
  }

  // optional double double_holder = 2;
  if (this->double_holder() != 0) {
    total_size += 1 + 8;
  }

  // optional float float_holder = 3;
  if (this->float_holder() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 int32_holder = 4;
  if (this->int32_holder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->int32_holder());
  }

  // optional int64 int64_holder = 5;
  if (this->int64_holder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->int64_holder());
  }

  // optional uint32 uint32_holder = 6;
  if (this->uint32_holder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uint32_holder());
  }

  // optional uint64 uint64_holder = 7;
  if (this->uint64_holder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uint64_holder());
  }

  // optional sint32 sint32_holder = 8;
  if (this->sint32_holder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->sint32_holder());
  }

  // optional sint64 sint64_holder = 9;
  if (this->sint64_holder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->sint64_holder());
  }

  // optional fixed32 fixed32_holder = 10;
  if (this->fixed32_holder() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed64 fixed64_holder = 11;
  if (this->fixed64_holder() != 0) {
    total_size += 1 + 8;
  }

  // optional sfixed32 sfixed32_holder = 12;
  if (this->sfixed32_holder() != 0) {
    total_size += 1 + 4;
  }

  // optional sfixed64 sfixed64_holder = 13;
  if (this->sfixed64_holder() != 0) {
    total_size += 1 + 8;
  }

  // optional bool bool_holder = 14;
  if (this->bool_holder() != 0) {
    total_size += 1 + 1;
  }

  // optional string string_holder = 15;
  if (this->string_holder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string_holder());
  }

  // optional bytes bytes_holder = 16;
  if (this->bytes_holder().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes_holder());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyHolder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.PropertyHolder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PropertyHolder* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyHolder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.PropertyHolder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.PropertyHolder)
    MergeFrom(*source);
  }
}

void PropertyHolder::MergeFrom(const PropertyHolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.PropertyHolder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_property_definition()) {
    mutable_property_definition()->::org::yaorm::PropertyDefinition::MergeFrom(from.property_definition());
  }
  if (from.double_holder() != 0) {
    set_double_holder(from.double_holder());
  }
  if (from.float_holder() != 0) {
    set_float_holder(from.float_holder());
  }
  if (from.int32_holder() != 0) {
    set_int32_holder(from.int32_holder());
  }
  if (from.int64_holder() != 0) {
    set_int64_holder(from.int64_holder());
  }
  if (from.uint32_holder() != 0) {
    set_uint32_holder(from.uint32_holder());
  }
  if (from.uint64_holder() != 0) {
    set_uint64_holder(from.uint64_holder());
  }
  if (from.sint32_holder() != 0) {
    set_sint32_holder(from.sint32_holder());
  }
  if (from.sint64_holder() != 0) {
    set_sint64_holder(from.sint64_holder());
  }
  if (from.fixed32_holder() != 0) {
    set_fixed32_holder(from.fixed32_holder());
  }
  if (from.fixed64_holder() != 0) {
    set_fixed64_holder(from.fixed64_holder());
  }
  if (from.sfixed32_holder() != 0) {
    set_sfixed32_holder(from.sfixed32_holder());
  }
  if (from.sfixed64_holder() != 0) {
    set_sfixed64_holder(from.sfixed64_holder());
  }
  if (from.bool_holder() != 0) {
    set_bool_holder(from.bool_holder());
  }
  if (from.string_holder().size() > 0) {

    string_holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_holder_);
  }
  if (from.bytes_holder().size() > 0) {

    bytes_holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_holder_);
  }
}

void PropertyHolder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.PropertyHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyHolder::CopyFrom(const PropertyHolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.PropertyHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyHolder::IsInitialized() const {

  return true;
}

void PropertyHolder::Swap(PropertyHolder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyHolder::InternalSwap(PropertyHolder* other) {
  std::swap(property_definition_, other->property_definition_);
  std::swap(double_holder_, other->double_holder_);
  std::swap(float_holder_, other->float_holder_);
  std::swap(int32_holder_, other->int32_holder_);
  std::swap(int64_holder_, other->int64_holder_);
  std::swap(uint32_holder_, other->uint32_holder_);
  std::swap(uint64_holder_, other->uint64_holder_);
  std::swap(sint32_holder_, other->sint32_holder_);
  std::swap(sint64_holder_, other->sint64_holder_);
  std::swap(fixed32_holder_, other->fixed32_holder_);
  std::swap(fixed64_holder_, other->fixed64_holder_);
  std::swap(sfixed32_holder_, other->sfixed32_holder_);
  std::swap(sfixed64_holder_, other->sfixed64_holder_);
  std::swap(bool_holder_, other->bool_holder_);
  string_holder_.Swap(&other->string_holder_);
  bytes_holder_.Swap(&other->bytes_holder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyHolder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyHolder_descriptor_;
  metadata.reflection = PropertyHolder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyHolder

// optional .org.yaorm.PropertyDefinition property_definition = 1;
bool PropertyHolder::has_property_definition() const {
  return !_is_default_instance_ && property_definition_ != NULL;
}
void PropertyHolder::clear_property_definition() {
  if (GetArenaNoVirtual() == NULL && property_definition_ != NULL) delete property_definition_;
  property_definition_ = NULL;
}
const ::org::yaorm::PropertyDefinition& PropertyHolder::property_definition() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.property_definition)
  return property_definition_ != NULL ? *property_definition_ : *default_instance_->property_definition_;
}
::org::yaorm::PropertyDefinition* PropertyHolder::mutable_property_definition() {
  
  if (property_definition_ == NULL) {
    property_definition_ = new ::org::yaorm::PropertyDefinition;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.PropertyHolder.property_definition)
  return property_definition_;
}
::org::yaorm::PropertyDefinition* PropertyHolder::release_property_definition() {
  // @@protoc_insertion_point(field_release:org.yaorm.PropertyHolder.property_definition)
  
  ::org::yaorm::PropertyDefinition* temp = property_definition_;
  property_definition_ = NULL;
  return temp;
}
void PropertyHolder::set_allocated_property_definition(::org::yaorm::PropertyDefinition* property_definition) {
  delete property_definition_;
  property_definition_ = property_definition;
  if (property_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.PropertyHolder.property_definition)
}

// optional double double_holder = 2;
void PropertyHolder::clear_double_holder() {
  double_holder_ = 0;
}
 double PropertyHolder::double_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.double_holder)
  return double_holder_;
}
 void PropertyHolder::set_double_holder(double value) {
  
  double_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.double_holder)
}

// optional float float_holder = 3;
void PropertyHolder::clear_float_holder() {
  float_holder_ = 0;
}
 float PropertyHolder::float_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.float_holder)
  return float_holder_;
}
 void PropertyHolder::set_float_holder(float value) {
  
  float_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.float_holder)
}

// optional int32 int32_holder = 4;
void PropertyHolder::clear_int32_holder() {
  int32_holder_ = 0;
}
 ::google::protobuf::int32 PropertyHolder::int32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.int32_holder)
  return int32_holder_;
}
 void PropertyHolder::set_int32_holder(::google::protobuf::int32 value) {
  
  int32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.int32_holder)
}

// optional int64 int64_holder = 5;
void PropertyHolder::clear_int64_holder() {
  int64_holder_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PropertyHolder::int64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.int64_holder)
  return int64_holder_;
}
 void PropertyHolder::set_int64_holder(::google::protobuf::int64 value) {
  
  int64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.int64_holder)
}

// optional uint32 uint32_holder = 6;
void PropertyHolder::clear_uint32_holder() {
  uint32_holder_ = 0u;
}
 ::google::protobuf::uint32 PropertyHolder::uint32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.uint32_holder)
  return uint32_holder_;
}
 void PropertyHolder::set_uint32_holder(::google::protobuf::uint32 value) {
  
  uint32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.uint32_holder)
}

// optional uint64 uint64_holder = 7;
void PropertyHolder::clear_uint64_holder() {
  uint64_holder_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PropertyHolder::uint64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.uint64_holder)
  return uint64_holder_;
}
 void PropertyHolder::set_uint64_holder(::google::protobuf::uint64 value) {
  
  uint64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.uint64_holder)
}

// optional sint32 sint32_holder = 8;
void PropertyHolder::clear_sint32_holder() {
  sint32_holder_ = 0;
}
 ::google::protobuf::int32 PropertyHolder::sint32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.sint32_holder)
  return sint32_holder_;
}
 void PropertyHolder::set_sint32_holder(::google::protobuf::int32 value) {
  
  sint32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.sint32_holder)
}

// optional sint64 sint64_holder = 9;
void PropertyHolder::clear_sint64_holder() {
  sint64_holder_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PropertyHolder::sint64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.sint64_holder)
  return sint64_holder_;
}
 void PropertyHolder::set_sint64_holder(::google::protobuf::int64 value) {
  
  sint64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.sint64_holder)
}

// optional fixed32 fixed32_holder = 10;
void PropertyHolder::clear_fixed32_holder() {
  fixed32_holder_ = 0u;
}
 ::google::protobuf::uint32 PropertyHolder::fixed32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.fixed32_holder)
  return fixed32_holder_;
}
 void PropertyHolder::set_fixed32_holder(::google::protobuf::uint32 value) {
  
  fixed32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.fixed32_holder)
}

// optional fixed64 fixed64_holder = 11;
void PropertyHolder::clear_fixed64_holder() {
  fixed64_holder_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PropertyHolder::fixed64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.fixed64_holder)
  return fixed64_holder_;
}
 void PropertyHolder::set_fixed64_holder(::google::protobuf::uint64 value) {
  
  fixed64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.fixed64_holder)
}

// optional sfixed32 sfixed32_holder = 12;
void PropertyHolder::clear_sfixed32_holder() {
  sfixed32_holder_ = 0;
}
 ::google::protobuf::int32 PropertyHolder::sfixed32_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.sfixed32_holder)
  return sfixed32_holder_;
}
 void PropertyHolder::set_sfixed32_holder(::google::protobuf::int32 value) {
  
  sfixed32_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.sfixed32_holder)
}

// optional sfixed64 sfixed64_holder = 13;
void PropertyHolder::clear_sfixed64_holder() {
  sfixed64_holder_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PropertyHolder::sfixed64_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.sfixed64_holder)
  return sfixed64_holder_;
}
 void PropertyHolder::set_sfixed64_holder(::google::protobuf::int64 value) {
  
  sfixed64_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.sfixed64_holder)
}

// optional bool bool_holder = 14;
void PropertyHolder::clear_bool_holder() {
  bool_holder_ = false;
}
 bool PropertyHolder::bool_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.bool_holder)
  return bool_holder_;
}
 void PropertyHolder::set_bool_holder(bool value) {
  
  bool_holder_ = value;
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.bool_holder)
}

// optional string string_holder = 15;
void PropertyHolder::clear_string_holder() {
  string_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PropertyHolder::string_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.string_holder)
  return string_holder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropertyHolder::set_string_holder(const ::std::string& value) {
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.string_holder)
}
 void PropertyHolder::set_string_holder(const char* value) {
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.PropertyHolder.string_holder)
}
 void PropertyHolder::set_string_holder(const char* value, size_t size) {
  
  string_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.PropertyHolder.string_holder)
}
 ::std::string* PropertyHolder::mutable_string_holder() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.PropertyHolder.string_holder)
  return string_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PropertyHolder::release_string_holder() {
  // @@protoc_insertion_point(field_release:org.yaorm.PropertyHolder.string_holder)
  
  return string_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropertyHolder::set_allocated_string_holder(::std::string* string_holder) {
  if (string_holder != NULL) {
    
  } else {
    
  }
  string_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_holder);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.PropertyHolder.string_holder)
}

// optional bytes bytes_holder = 16;
void PropertyHolder::clear_bytes_holder() {
  bytes_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PropertyHolder::bytes_holder() const {
  // @@protoc_insertion_point(field_get:org.yaorm.PropertyHolder.bytes_holder)
  return bytes_holder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropertyHolder::set_bytes_holder(const ::std::string& value) {
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.PropertyHolder.bytes_holder)
}
 void PropertyHolder::set_bytes_holder(const char* value) {
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.PropertyHolder.bytes_holder)
}
 void PropertyHolder::set_bytes_holder(const void* value, size_t size) {
  
  bytes_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.PropertyHolder.bytes_holder)
}
 ::std::string* PropertyHolder::mutable_bytes_holder() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.PropertyHolder.bytes_holder)
  return bytes_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PropertyHolder::release_bytes_holder() {
  // @@protoc_insertion_point(field_release:org.yaorm.PropertyHolder.bytes_holder)
  
  return bytes_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropertyHolder::set_allocated_bytes_holder(::std::string* bytes_holder) {
  if (bytes_holder != NULL) {
    
  } else {
    
  }
  bytes_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_holder);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.PropertyHolder.bytes_holder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.Record)
}

void Record::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Record::Record(const Record& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.Record)
}

void Record::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:org.yaorm.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.Record)
  columns_.Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.yaorm.PropertyHolder columns = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.Record)
  // repeated .org.yaorm.PropertyHolder columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.Record)
  // repeated .org.yaorm.PropertyHolder columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->columns(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.Record)
  return target;
}

int Record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.Record)
  int total_size = 0;

  // repeated .org.yaorm.PropertyHolder columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Record* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  columns_.MergeFrom(from.columns_);
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  columns_.UnsafeArenaSwap(&other->columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// repeated .org.yaorm.PropertyHolder columns = 1;
int Record::columns_size() const {
  return columns_.size();
}
void Record::clear_columns() {
  columns_.Clear();
}
const ::org::yaorm::PropertyHolder& Record::columns(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Record.columns)
  return columns_.Get(index);
}
::org::yaorm::PropertyHolder* Record::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Record.columns)
  return columns_.Mutable(index);
}
::org::yaorm::PropertyHolder* Record::add_columns() {
  // @@protoc_insertion_point(field_add:org.yaorm.Record.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyHolder >*
Record::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Record.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::org::yaorm::PropertyHolder >&
Record::columns() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Record.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Records::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Records::Records()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.yaorm.Records)
}

void Records::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Records::Records(const Records& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.yaorm.Records)
}

void Records::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Records::~Records() {
  // @@protoc_insertion_point(destructor:org.yaorm.Records)
  SharedDtor();
}

void Records::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Records::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Records::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Records_descriptor_;
}

const Records& Records::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yaorm_5fmodels_2eproto();
  return *default_instance_;
}

Records* Records::default_instance_ = NULL;

Records* Records::New(::google::protobuf::Arena* arena) const {
  Records* n = new Records;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Records::Clear() {
// @@protoc_insertion_point(message_clear_start:org.yaorm.Records)
  records_.Clear();
}

bool Records::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.yaorm.Records)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.yaorm.Record records = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_records;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.yaorm.Records)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.yaorm.Records)
  return false;
#undef DO_
}

void Records::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.yaorm.Records)
  // repeated .org.yaorm.Record records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.yaorm.Records)
}

::google::protobuf::uint8* Records::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.yaorm.Records)
  // repeated .org.yaorm.Record records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.yaorm.Records)
  return target;
}

int Records::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:org.yaorm.Records)
  int total_size = 0;

  // repeated .org.yaorm.Record records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Records::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.yaorm.Records)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Records* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Records>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.yaorm.Records)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.yaorm.Records)
    MergeFrom(*source);
  }
}

void Records::MergeFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.yaorm.Records)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  records_.MergeFrom(from.records_);
}

void Records::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.yaorm.Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Records::CopyFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.yaorm.Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Records::IsInitialized() const {

  return true;
}

void Records::Swap(Records* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Records::InternalSwap(Records* other) {
  records_.UnsafeArenaSwap(&other->records_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Records::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Records_descriptor_;
  metadata.reflection = Records_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Records

// repeated .org.yaorm.Record records = 1;
int Records::records_size() const {
  return records_.size();
}
void Records::clear_records() {
  records_.Clear();
}
const ::org::yaorm::Record& Records::records(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.Records.records)
  return records_.Get(index);
}
::org::yaorm::Record* Records::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.Records.records)
  return records_.Mutable(index);
}
::org::yaorm::Record* Records::add_records() {
  // @@protoc_insertion_point(field_add:org.yaorm.Records.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >*
Records::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.Records.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::org::yaorm::Record >&
Records::records() const {
  // @@protoc_insertion_point(field_list:org.yaorm.Records.records)
  return records_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yaorm
}  // namespace org

// @@protoc_insertion_point(global_scope)
