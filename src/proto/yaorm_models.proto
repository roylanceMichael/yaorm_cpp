syntax = "proto3";
package org.yaorm;

enum ProtobufType {
    NONE = 0;
    DOUBLE = 1;
    FLOAT = 2;
    INT32 = 3;
    INT64 = 4;
    UINT32 = 5;
    UINT64 = 6;
    SINT32 = 7;
    SINT64 = 8;
    FIXED32 = 9;
    FIXED64 = 10;
    SFIXED32 = 11;
    SFIXED64 = 12;
    BOOL = 13;
    STRING = 14;
    BYTES = 15;
    PROTO = 16;
}

enum SelectFunctionType {
    NONE_SELECT_FUNCTION_TYPE = 0;
    COUNT_SELECT_FUNCTION_TYPE = 1;
    MAX_SELECT_FUNCTION_TYPE = 2;
    MIN_SELECT_FUNCTION_TYPE = 3;
    SUM_SELECT_FUNCTION_TYPE = 4;
}

enum OrderByType {
    ASC = 0;
    DESC = 1;
}

message ProtoTypeToSqlType {
    ProtobufType proto_type = 1;
    string sql_type = 2;
}

message ProtoTypeToSqlTypes {
    repeated ProtoTypeToSqlType results = 1;
}

message WhereClause {
    Column name_and_property = 1;
    enum OperatorType {
        EQUALS = 0;
        GREATER_THAN = 1;
        LESS_THAN = 2;
        NOT_EQUALS = 3;
        IN = 4;
    }
    OperatorType operator_type = 2;
    enum ConnectingAndOr {
        NONE = 0;
        AND = 1;
        OR = 2;
    }
    ConnectingAndOr connecting_and_or = 3;
    WhereClause connecting_where_clause = 4;
    repeated string in_items = 5;
}

message ColumnDefinition {
    string name = 1;
    ProtobufType type = 2;
    bool is_key = 3;
    enum ColumnType {
        SCALAR = 0;
        ENUM_NAME = 1;
        ENUM_VALUE = 2;
        MESSAGE_KEY = 3;
    }
    ColumnType column_type = 4;
    enum LinkerType {
        NONE = 0;
        PARENT = 1;
        CHILD = 2;
        NEITHER = 3;
    }
    LinkerType linker_type = 5;
    int32 order = 6;
    string alias = 7;
    string table_alias = 8;
    SelectFunctionType function_type = 9;
    string function_text = 10;
}

message Index {
    repeated ColumnDefinition column_names = 1;
    repeated ColumnDefinition include_names = 2;
}

message Difference {
    enum EntityType {
        INDEX = 0;
        COLUMN = 1;
        TABLE = 2;
    }
    EntityType entity_type = 1;
    enum Operation {
        CREATE = 0;
        DROP = 1;
    }
    Operation operation = 2;
    string name = 3;
    Index index = 4;
    ColumnDefinition property_definition = 5;
    TableDefinition table_definition = 6;
}

message TableDefinition {
    string name = 1;
    repeated ColumnDefinition column_definitions = 2;
    Index index = 3;
    enum TableType {
        NORMAL = 0;
        LINKER_MESSAGE = 1;
        LINKER_ENUM = 2;
    }
    TableType table_type = 4;
    string alias = 5;
}

message TableDefinitions {
    repeated TableDefinition table_definitions = 1;
}

message DifferenceReport {
    bool migration_exists = 1;
    repeated Difference differences = 2;
}

message Column {
    ColumnDefinition definition = 1;
    double double_holder = 2;
    float float_holder = 3;
    int32 int32_holder = 4;
    int64 int64_holder = 5;
    uint32 uint32_holder = 6;
    uint64 uint64_holder = 7;
    sint32 sint32_holder = 8;
    sint64 sint64_holder = 9;
    fixed32 fixed32_holder = 10;
    fixed64 fixed64_holder = 11;
    sfixed32 sfixed32_holder = 12;
    sfixed64 sfixed64_holder = 13;
    bool bool_holder = 14;
    string string_holder = 15;
    bytes bytes_holder = 16;
}

message Record {
    repeated Column columns = 1;
}

message Records {
    repeated Record records = 1;
}

message TableRecords {
    TableDefinition table_definition = 1;
    Records records = 2;
    string table_name = 3;
}

message AllTableRecords {
    repeated TableRecords table_records = 1;
}

message DatabaseOperation {
    TableDefinition table_definition = 1;
    Records records = 2;
    Index index = 3;
    ColumnDefinition column_definition = 4;
    WhereClause where_clause = 5;
    enum DatabaseOperationType {
        CREATE_TABLE = 0;
        DROP_TABLE = 1;
        CREATE_INDEX = 2;
        DROP_INDEX = 3;
        CREATE_COLUMN = 4;
        DROP_COLUMN = 5;
        GET_COUNT = 6;
        GET_CUSTOM = 7;
        GET = 8;
        GET_MANY = 9;
        GET_WHERE = 10;
        BULK_INSERT = 11;
        CREATE_OR_UPDATE = 12;
        CREATE = 13;
        UPDATE = 14;
        UPDATE_WITH_CRITERIA = 15;
        UPDATE_CUSTOM = 16;
        DELETE = 17;
        DELETE_ALL = 18;
    }
    DatabaseOperationType database_operation_type = 6;
}

message DatabaseOperationResult {
    bool bool_result = 1;
    int64 count_result = 2;
    Record record_result = 3;
    Records records_result = 4;
    string error_message = 5;
    DatabaseOperation database_operation = 6;
}

message DatabaseDefinition {
    string schema = 1;
    string name = 2;
    TableDefinitions table_definitions = 3;
    repeated TableDefinitionGraphs table_definition_graphs = 4;
}

message TableDefinitionGraph {
    TableDefinition main_table_definition = 1;
    TableDefinition other_table_definition = 2;
    TableDefinition linker_table_table = 3;
    enum TableDefinitionGraphType {
        ENUM_TYPE = 0;
        MESSAGE_TYPE = 1;
    }
    TableDefinitionGraphType definition_graph_type = 4;
    string main_name = 5;
    string other_name = 6;
    string column_name = 7;
}

message TableDefinitionGraphs {
    TableDefinition main_table_definition = 1;
    repeated TableDefinitionGraph table_definition_graphs = 2;
}

message ConnectionInfo {
    string host = 1;
    string user = 2;
    string password = 3;
    string schema = 4;
    bool should_create_schema = 5;
    int32 port = 6;
}

message Migration {
    string id = 1;
    string context_name = 2;
    string model_definition_base64 = 3;
    int64 insert_date = 4;
}

message DatabaseExecution {
    string raw_sql = 1;
    int64 time_called = 2;
    bool result = 3;
    int64 order_called = 4;
}

message DatabaseExecutionReport {
    int64 calls_to_database = 1;
    repeated DatabaseExecution executions = 2;
}

// project
message JoinTable {
    TableDefinition first_table = 1;
    TableDefinition second_table = 2;
    ColumnDefinition first_column = 7;
    ColumnDefinition second_column = 8;
    WhereClause where_clause = 9;
}

message JoinTableRecords {
    JoinTable join_table = 1;
    Records records = 2;
}

message GroupBy {
    repeated ColumnDefinition columns = 1;
}

message OrderBy {
    ColumnDefinition column = 1;
    OrderByType type = 2;
}

message Projection {
    repeated ColumnDefinition labels = 1;
    TableDefinition main_table = 2;
    repeated JoinTable joins = 3;
    WhereClause where_clause = 4;
    GroupBy group_by = 5;
    repeated OrderBy order_bys = 6;
    string name = 7;
    int64 limit = 8;
    int64 offset = 9;

}

message UIYaormRequest {
    string token = 1;
    TableDefinition table_definition = 2;
    Records records = 3;
    ConnectionInfo connection_info = 4;
    WhereClause where_clause = 5;
    int64 limit = 6;
    int64 offset = 7;
    bool insert_same_as_update = 8;
    string schema_name = 9;
    string table_name = 10;
    string custom_sql = 11;
    string file_descriptor = 13;
    repeated string ids = 14;
}

message UIYaormResponse {
    Records records = 1;
    repeated string schemas = 2;
    repeated string tables = 3;
    TableDefinition table_definition = 4;
    TableDefinitions table_definitions = 5;
    int64 record_count = 6;
    bool result = 7;
    repeated ProtoTypeToSqlType proto_type_to_sql_types = 8;
    string string_result = 9;
}

message SqlGeneratorRequestResponse {
    org.yaorm.TableDefinition definition = 1;
    org.yaorm.ColumnDefinition column_definition = 2;
    org.yaorm.Index index = 3;
    org.yaorm.Column column = 4;
    org.yaorm.WhereClause where_clause = 5;
    org.yaorm.Records records = 6;
    int64 limit = 7;
    int64 offset = 8;
    string schema_name = 9;
    string table_name = 10;
    string response = 11;
    ProtoTypeToSqlTypes proto_type_to_sql_types = 12;
}