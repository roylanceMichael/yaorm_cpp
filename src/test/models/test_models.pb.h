// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_models.proto

#ifndef PROTOBUF_test_5fmodels_2eproto__INCLUDED
#define PROTOBUF_test_5fmodels_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace yaorm {
namespace tests {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_5fmodels_2eproto();
void protobuf_AssignDesc_test_5fmodels_2eproto();
void protobuf_ShutdownFile_test_5fmodels_2eproto();

class ChildModel;
class SubChildModel;
class TestModel;

// ===================================================================

class TestModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.tests.TestModel) */ {
 public:
  TestModel();
  virtual ~TestModel();

  TestModel(const TestModel& from);

  inline TestModel& operator=(const TestModel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestModel& default_instance();

  void Swap(TestModel* other);

  // implements Message ----------------------------------------------

  inline TestModel* New() const { return New(NULL); }

  TestModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestModel& from);
  void MergeFrom(const TestModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string display = 2;
  void clear_display();
  static const int kDisplayFieldNumber = 2;
  const ::std::string& display() const;
  void set_display(const ::std::string& value);
  void set_display(const char* value);
  void set_display(const char* value, size_t size);
  ::std::string* mutable_display();
  ::std::string* release_display();
  void set_allocated_display(::std::string* display);

  // optional .org.yaorm.tests.ChildModel child_model = 3;
  bool has_child_model() const;
  void clear_child_model();
  static const int kChildModelFieldNumber = 3;
  const ::org::yaorm::tests::ChildModel& child_model() const;
  ::org::yaorm::tests::ChildModel* mutable_child_model();
  ::org::yaorm::tests::ChildModel* release_child_model();
  void set_allocated_child_model(::org::yaorm::tests::ChildModel* child_model);

  // repeated string displays = 4;
  int displays_size() const;
  void clear_displays();
  static const int kDisplaysFieldNumber = 4;
  const ::std::string& displays(int index) const;
  ::std::string* mutable_displays(int index);
  void set_displays(int index, const ::std::string& value);
  void set_displays(int index, const char* value);
  void set_displays(int index, const char* value, size_t size);
  ::std::string* add_displays();
  void add_displays(const ::std::string& value);
  void add_displays(const char* value);
  void add_displays(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& displays() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_displays();

  // repeated .org.yaorm.tests.SubChildModel sub_children = 5;
  int sub_children_size() const;
  void clear_sub_children();
  static const int kSubChildrenFieldNumber = 5;
  const ::org::yaorm::tests::SubChildModel& sub_children(int index) const;
  ::org::yaorm::tests::SubChildModel* mutable_sub_children(int index);
  ::org::yaorm::tests::SubChildModel* add_sub_children();
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::tests::SubChildModel >*
      mutable_sub_children();
  const ::google::protobuf::RepeatedPtrField< ::org::yaorm::tests::SubChildModel >&
      sub_children() const;

  // @@protoc_insertion_point(class_scope:org.yaorm.tests.TestModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr display_;
  ::org::yaorm::tests::ChildModel* child_model_;
  ::google::protobuf::RepeatedPtrField< ::std::string> displays_;
  ::google::protobuf::RepeatedPtrField< ::org::yaorm::tests::SubChildModel > sub_children_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_test_5fmodels_2eproto();
  friend void protobuf_AssignDesc_test_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_test_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static TestModel* default_instance_;
};
// -------------------------------------------------------------------

class ChildModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.tests.ChildModel) */ {
 public:
  ChildModel();
  virtual ~ChildModel();

  ChildModel(const ChildModel& from);

  inline ChildModel& operator=(const ChildModel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChildModel& default_instance();

  void Swap(ChildModel* other);

  // implements Message ----------------------------------------------

  inline ChildModel* New() const { return New(NULL); }

  ChildModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChildModel& from);
  void MergeFrom(const ChildModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChildModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string child_display = 2;
  void clear_child_display();
  static const int kChildDisplayFieldNumber = 2;
  const ::std::string& child_display() const;
  void set_child_display(const ::std::string& value);
  void set_child_display(const char* value);
  void set_child_display(const char* value, size_t size);
  ::std::string* mutable_child_display();
  ::std::string* release_child_display();
  void set_allocated_child_display(::std::string* child_display);

  // @@protoc_insertion_point(class_scope:org.yaorm.tests.ChildModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr child_display_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_test_5fmodels_2eproto();
  friend void protobuf_AssignDesc_test_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_test_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static ChildModel* default_instance_;
};
// -------------------------------------------------------------------

class SubChildModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.yaorm.tests.SubChildModel) */ {
 public:
  SubChildModel();
  virtual ~SubChildModel();

  SubChildModel(const SubChildModel& from);

  inline SubChildModel& operator=(const SubChildModel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubChildModel& default_instance();

  void Swap(SubChildModel* other);

  // implements Message ----------------------------------------------

  inline SubChildModel* New() const { return New(NULL); }

  SubChildModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubChildModel& from);
  void MergeFrom(const SubChildModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubChildModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string sub_display = 2;
  void clear_sub_display();
  static const int kSubDisplayFieldNumber = 2;
  const ::std::string& sub_display() const;
  void set_sub_display(const ::std::string& value);
  void set_sub_display(const char* value);
  void set_sub_display(const char* value, size_t size);
  ::std::string* mutable_sub_display();
  ::std::string* release_sub_display();
  void set_allocated_sub_display(::std::string* sub_display);

  // @@protoc_insertion_point(class_scope:org.yaorm.tests.SubChildModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr sub_display_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_test_5fmodels_2eproto();
  friend void protobuf_AssignDesc_test_5fmodels_2eproto();
  friend void protobuf_ShutdownFile_test_5fmodels_2eproto();

  void InitAsDefaultInstance();
  static SubChildModel* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TestModel

// optional string id = 1;
inline void TestModel::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestModel::id() const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.TestModel.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestModel::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.tests.TestModel.id)
}
inline void TestModel::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.tests.TestModel.id)
}
inline void TestModel::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.tests.TestModel.id)
}
inline ::std::string* TestModel::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.TestModel.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestModel::release_id() {
  // @@protoc_insertion_point(field_release:org.yaorm.tests.TestModel.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestModel::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.tests.TestModel.id)
}

// optional string display = 2;
inline void TestModel::clear_display() {
  display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestModel::display() const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.TestModel.display)
  return display_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestModel::set_display(const ::std::string& value) {
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.tests.TestModel.display)
}
inline void TestModel::set_display(const char* value) {
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.tests.TestModel.display)
}
inline void TestModel::set_display(const char* value, size_t size) {
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.tests.TestModel.display)
}
inline ::std::string* TestModel::mutable_display() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.TestModel.display)
  return display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestModel::release_display() {
  // @@protoc_insertion_point(field_release:org.yaorm.tests.TestModel.display)
  
  return display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestModel::set_allocated_display(::std::string* display) {
  if (display != NULL) {
    
  } else {
    
  }
  display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.tests.TestModel.display)
}

// optional .org.yaorm.tests.ChildModel child_model = 3;
inline bool TestModel::has_child_model() const {
  return !_is_default_instance_ && child_model_ != NULL;
}
inline void TestModel::clear_child_model() {
  if (GetArenaNoVirtual() == NULL && child_model_ != NULL) delete child_model_;
  child_model_ = NULL;
}
inline const ::org::yaorm::tests::ChildModel& TestModel::child_model() const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.TestModel.child_model)
  return child_model_ != NULL ? *child_model_ : *default_instance_->child_model_;
}
inline ::org::yaorm::tests::ChildModel* TestModel::mutable_child_model() {
  
  if (child_model_ == NULL) {
    child_model_ = new ::org::yaorm::tests::ChildModel;
  }
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.TestModel.child_model)
  return child_model_;
}
inline ::org::yaorm::tests::ChildModel* TestModel::release_child_model() {
  // @@protoc_insertion_point(field_release:org.yaorm.tests.TestModel.child_model)
  
  ::org::yaorm::tests::ChildModel* temp = child_model_;
  child_model_ = NULL;
  return temp;
}
inline void TestModel::set_allocated_child_model(::org::yaorm::tests::ChildModel* child_model) {
  delete child_model_;
  child_model_ = child_model;
  if (child_model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.tests.TestModel.child_model)
}

// repeated string displays = 4;
inline int TestModel::displays_size() const {
  return displays_.size();
}
inline void TestModel::clear_displays() {
  displays_.Clear();
}
inline const ::std::string& TestModel::displays(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.TestModel.displays)
  return displays_.Get(index);
}
inline ::std::string* TestModel::mutable_displays(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.TestModel.displays)
  return displays_.Mutable(index);
}
inline void TestModel::set_displays(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.yaorm.tests.TestModel.displays)
  displays_.Mutable(index)->assign(value);
}
inline void TestModel::set_displays(int index, const char* value) {
  displays_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.yaorm.tests.TestModel.displays)
}
inline void TestModel::set_displays(int index, const char* value, size_t size) {
  displays_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.tests.TestModel.displays)
}
inline ::std::string* TestModel::add_displays() {
  // @@protoc_insertion_point(field_add_mutable:org.yaorm.tests.TestModel.displays)
  return displays_.Add();
}
inline void TestModel::add_displays(const ::std::string& value) {
  displays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.yaorm.tests.TestModel.displays)
}
inline void TestModel::add_displays(const char* value) {
  displays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.yaorm.tests.TestModel.displays)
}
inline void TestModel::add_displays(const char* value, size_t size) {
  displays_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.yaorm.tests.TestModel.displays)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestModel::displays() const {
  // @@protoc_insertion_point(field_list:org.yaorm.tests.TestModel.displays)
  return displays_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestModel::mutable_displays() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.tests.TestModel.displays)
  return &displays_;
}

// repeated .org.yaorm.tests.SubChildModel sub_children = 5;
inline int TestModel::sub_children_size() const {
  return sub_children_.size();
}
inline void TestModel::clear_sub_children() {
  sub_children_.Clear();
}
inline const ::org::yaorm::tests::SubChildModel& TestModel::sub_children(int index) const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.TestModel.sub_children)
  return sub_children_.Get(index);
}
inline ::org::yaorm::tests::SubChildModel* TestModel::mutable_sub_children(int index) {
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.TestModel.sub_children)
  return sub_children_.Mutable(index);
}
inline ::org::yaorm::tests::SubChildModel* TestModel::add_sub_children() {
  // @@protoc_insertion_point(field_add:org.yaorm.tests.TestModel.sub_children)
  return sub_children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::yaorm::tests::SubChildModel >*
TestModel::mutable_sub_children() {
  // @@protoc_insertion_point(field_mutable_list:org.yaorm.tests.TestModel.sub_children)
  return &sub_children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::yaorm::tests::SubChildModel >&
TestModel::sub_children() const {
  // @@protoc_insertion_point(field_list:org.yaorm.tests.TestModel.sub_children)
  return sub_children_;
}

// -------------------------------------------------------------------

// ChildModel

// optional string id = 1;
inline void ChildModel::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChildModel::id() const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.ChildModel.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChildModel::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.tests.ChildModel.id)
}
inline void ChildModel::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.tests.ChildModel.id)
}
inline void ChildModel::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.tests.ChildModel.id)
}
inline ::std::string* ChildModel::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.ChildModel.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChildModel::release_id() {
  // @@protoc_insertion_point(field_release:org.yaorm.tests.ChildModel.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChildModel::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.tests.ChildModel.id)
}

// optional string child_display = 2;
inline void ChildModel::clear_child_display() {
  child_display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChildModel::child_display() const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.ChildModel.child_display)
  return child_display_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChildModel::set_child_display(const ::std::string& value) {
  
  child_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.tests.ChildModel.child_display)
}
inline void ChildModel::set_child_display(const char* value) {
  
  child_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.tests.ChildModel.child_display)
}
inline void ChildModel::set_child_display(const char* value, size_t size) {
  
  child_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.tests.ChildModel.child_display)
}
inline ::std::string* ChildModel::mutable_child_display() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.ChildModel.child_display)
  return child_display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChildModel::release_child_display() {
  // @@protoc_insertion_point(field_release:org.yaorm.tests.ChildModel.child_display)
  
  return child_display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChildModel::set_allocated_child_display(::std::string* child_display) {
  if (child_display != NULL) {
    
  } else {
    
  }
  child_display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), child_display);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.tests.ChildModel.child_display)
}

// -------------------------------------------------------------------

// SubChildModel

// optional string id = 1;
inline void SubChildModel::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubChildModel::id() const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.SubChildModel.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubChildModel::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.tests.SubChildModel.id)
}
inline void SubChildModel::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.tests.SubChildModel.id)
}
inline void SubChildModel::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.tests.SubChildModel.id)
}
inline ::std::string* SubChildModel::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.SubChildModel.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubChildModel::release_id() {
  // @@protoc_insertion_point(field_release:org.yaorm.tests.SubChildModel.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubChildModel::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.tests.SubChildModel.id)
}

// optional string sub_display = 2;
inline void SubChildModel::clear_sub_display() {
  sub_display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubChildModel::sub_display() const {
  // @@protoc_insertion_point(field_get:org.yaorm.tests.SubChildModel.sub_display)
  return sub_display_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubChildModel::set_sub_display(const ::std::string& value) {
  
  sub_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.yaorm.tests.SubChildModel.sub_display)
}
inline void SubChildModel::set_sub_display(const char* value) {
  
  sub_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.yaorm.tests.SubChildModel.sub_display)
}
inline void SubChildModel::set_sub_display(const char* value, size_t size) {
  
  sub_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.yaorm.tests.SubChildModel.sub_display)
}
inline ::std::string* SubChildModel::mutable_sub_display() {
  
  // @@protoc_insertion_point(field_mutable:org.yaorm.tests.SubChildModel.sub_display)
  return sub_display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubChildModel::release_sub_display() {
  // @@protoc_insertion_point(field_release:org.yaorm.tests.SubChildModel.sub_display)
  
  return sub_display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubChildModel::set_allocated_sub_display(::std::string* sub_display) {
  if (sub_display != NULL) {
    
  } else {
    
  }
  sub_display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_display);
  // @@protoc_insertion_point(field_set_allocated:org.yaorm.tests.SubChildModel.sub_display)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tests
}  // namespace yaorm
}  // namespace org

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_5fmodels_2eproto__INCLUDED
